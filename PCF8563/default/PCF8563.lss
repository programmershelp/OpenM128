
PCF8563.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00000b96  00000c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080019c  0080019c  00000cc6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000193  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ef  00000000  00000000  00000e99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000314  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000657  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000236  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000455  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 39       	cpi	r26, 0x9C	; 156
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ac e9       	ldi	r26, 0x9C	; 156
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 3a       	cpi	r26, 0xA2	; 162
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 35 02 	call	0x46a	; 0x46a <main>
  c6:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <twi_init>:

void twi_init()	 	 	//TWI(I2C)初始化
{
/*Hardware Environment：DVK501 && M128+ EX*/
#if defined(_DVK501_M128_EX_)
	TWBR = 0X0F;		//设置TWI波特率  
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	80 93 70 00 	sts	0x0070, r24
	TWSR &= 0XFC;		//设置TWI预分频 为 1
  d4:	e1 e7       	ldi	r30, 0x71	; 113
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8c 7f       	andi	r24, 0xFC	; 252
  dc:	80 83       	st	Z, r24
	TWSR &= 0XFC;		//设置TWI预分频 为 1
	
#else
  #warning "iic interface undefined."
#endif
}
  de:	08 95       	ret

000000e0 <I2C_Start>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Start()					
{
	I2CStart();						
  e0:	84 ea       	ldi	r24, 0xA4	; 164
  e2:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
  e6:	80 91 74 00 	lds	r24, 0x0074
  ea:	87 ff       	sbrs	r24, 7
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <I2C_Start+0x6>
	if( I2CChkAck()!=I2C_START ) 
  ee:	80 91 71 00 	lds	r24, 0x0071
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	09 f4       	brne	.+2      	; 0xfc <I2C_Start+0x1c>
  fa:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
  fc:	89 2f       	mov	r24, r25
  fe:	08 95       	ret

00000100 <I2C_Restart>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Restart()					
{
	I2CStart();						
 100:	84 ea       	ldi	r24, 0xA4	; 164
 102:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 106:	80 91 74 00 	lds	r24, 0x0074
 10a:	87 ff       	sbrs	r24, 7
 10c:	fc cf       	rjmp	.-8      	; 0x106 <I2C_Restart+0x6>
	if( I2CChkAck()!=I2C_RESTART ) 
 10e:	80 91 71 00 	lds	r24, 0x0071
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	88 7f       	andi	r24, 0xF8	; 248
 116:	80 31       	cpi	r24, 0x10	; 16
 118:	09 f4       	brne	.+2      	; 0x11c <I2C_Restart+0x1c>
 11a:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 11c:	89 2f       	mov	r24, r25
 11e:	08 95       	ret

00000120 <I2C_SendWrDAdr>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr(uint8_t wrDAdr)	
{
	I2CSendByte(wrDAdr);			//设置 器件写地址
 120:	80 93 73 00 	sts	0x0073, r24
 124:	84 e8       	ldi	r24, 0x84	; 132
 126:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 12a:	80 91 74 00 	lds	r24, 0x0074
 12e:	87 ff       	sbrs	r24, 7
 130:	fc cf       	rjmp	.-8      	; 0x12a <I2C_SendWrDAdr+0xa>
	if( I2CChkAck()!=I2C_MT_SLA_ACK )
 132:	80 91 71 00 	lds	r24, 0x0071
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	88 31       	cpi	r24, 0x18	; 24
 13c:	09 f4       	brne	.+2      	; 0x140 <I2C_SendWrDAdr+0x20>
 13e:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 140:	89 2f       	mov	r24, r25
 142:	08 95       	ret

00000144 <I2C_SendWrDAdr_>:
提示说明：兼容 发送 7位 器件写地址: XXXX XXX0
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendWrDAdr_(uint16_t wrDAdr)	
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
	if( (wrDAdr&0xF000) == 0xF000 )	//判断是否为 10位 器件地址
 14a:	80 70       	andi	r24, 0x00	; 0
 14c:	90 7f       	andi	r25, 0xF0	; 240
 14e:	80 50       	subi	r24, 0x00	; 0
 150:	90 4f       	sbci	r25, 0xF0	; 240
 152:	29 f4       	brne	.+10     	; 0x15e <I2C_SendWrDAdr_+0x1a>
		if( I2C_SendWrDAdr( (uint8_t)wrDAdr>>8 )==I2C_ERR )	//设置 （高位）器件写地址
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 90 00 	call	0x120	; 0x120 <I2C_SendWrDAdr>
 15a:	88 23       	and	r24, r24
 15c:	29 f0       	breq	.+10     	; 0x168 <I2C_SendWrDAdr_+0x24>
			return I2C_ERR;
	if( I2C_SendWrDAdr( (uint8_t)wrDAdr )==I2C_ERR )	//设置 （低位）器件写地址
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 90 00 	call	0x120	; 0x120 <I2C_SendWrDAdr>
 164:	81 11       	cpse	r24, r1
 166:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <I2C_SendRdDAdr>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendRdDAdr(uint8_t rdDAdr)	
{
	I2CSendByte(rdDAdr);			//设置 器件读地址
 16e:	80 93 73 00 	sts	0x0073, r24
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 178:	80 91 74 00 	lds	r24, 0x0074
 17c:	87 ff       	sbrs	r24, 7
 17e:	fc cf       	rjmp	.-8      	; 0x178 <I2C_SendRdDAdr+0xa>
	if( I2CChkAck()!=I2C_MR_SLA_ACK )  
 180:	80 91 71 00 	lds	r24, 0x0071
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	88 7f       	andi	r24, 0xF8	; 248
 188:	80 34       	cpi	r24, 0x40	; 64
 18a:	09 f4       	brne	.+2      	; 0x18e <I2C_SendRdDAdr+0x20>
 18c:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;	
}
 18e:	89 2f       	mov	r24, r25
 190:	08 95       	ret

00000192 <I2C_SendRdDAdr_>:
uint8_t I2C_SendRdDAdr_(uint8_t rdDAdr)	
{
	if( (rdDAdr&0xF000) == 0xF000)	//判断是否为 10位 器件地址
		if( I2C_SendWrDAdr( (uint8_t)rdDAdr>>8 )==I2C_ERR )	//设置 （高位）器件读地址
			return I2C_ERR;
	if( I2C_SendWrDAdr( (uint8_t)rdDAdr )==I2C_ERR )	//设置 （低位）器件读地址
 192:	0e 94 90 00 	call	0x120	; 0x120 <I2C_SendWrDAdr>
 196:	81 11       	cpse	r24, r1
 198:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 19a:	08 95       	ret

0000019c <I2C_SendDat>:
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_SendDat(uint8_t configDat)	
{
	I2CSendByte(configDat);			
 19c:	80 93 73 00 	sts	0x0073, r24
 1a0:	84 e8       	ldi	r24, 0x84	; 132
 1a2:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 1a6:	80 91 74 00 	lds	r24, 0x0074
 1aa:	87 ff       	sbrs	r24, 7
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <I2C_SendDat+0xa>
	if( I2CChkAck()!=I2C_MT_DATA_ACK ) 
 1ae:	80 91 71 00 	lds	r24, 0x0071
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	88 7f       	andi	r24, 0xF8	; 248
 1b6:	88 32       	cpi	r24, 0x28	; 40
 1b8:	09 f4       	brne	.+2      	; 0x1bc <I2C_SendDat+0x20>
 1ba:	91 e0       	ldi	r25, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;	
}
 1bc:	89 2f       	mov	r24, r25
 1be:	08 95       	ret

000001c0 <I2C_RcvNAckDat>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvNAckDat(uint8_t *pRdDat)	
{
 1c0:	fc 01       	movw	r30, r24
	I2CRcvNckByte();
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 1c8:	80 91 74 00 	lds	r24, 0x0074
 1cc:	87 ff       	sbrs	r24, 7
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <I2C_RcvNAckDat+0x8>
	if( I2CChkAck()!=I2C_MR_DATA_NACK )
 1d0:	80 91 71 00 	lds	r24, 0x0071
 1d4:	88 7f       	andi	r24, 0xF8	; 248
 1d6:	88 35       	cpi	r24, 0x58	; 88
 1d8:	11 f0       	breq	.+4      	; 0x1de <I2C_RcvNAckDat+0x1e>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret
		return I2C_ERR;
	*pRdDat=TWDR;
 1de:	80 91 73 00 	lds	r24, 0x0073
 1e2:	80 83       	st	Z, r24
 1e4:	81 e0       	ldi	r24, 0x01	; 1
	return I2C_CRR;
}
 1e6:	08 95       	ret

000001e8 <I2C_RcvAckDat>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_RcvAckDat(uint8_t *pRdDat)	
{
 1e8:	fc 01       	movw	r30, r24
	I2CRcvAckByte();					
 1ea:	84 ec       	ldi	r24, 0xC4	; 196
 1ec:	80 93 74 00 	sts	0x0074, r24
	I2CWaitAck();
 1f0:	80 91 74 00 	lds	r24, 0x0074
 1f4:	87 ff       	sbrs	r24, 7
 1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <I2C_RcvAckDat+0x8>
	if( I2CChkAck()!=I2C_MR_DATA_ACK )
 1f8:	80 91 71 00 	lds	r24, 0x0071
 1fc:	88 7f       	andi	r24, 0xF8	; 248
 1fe:	80 35       	cpi	r24, 0x50	; 80
 200:	11 f0       	breq	.+4      	; 0x206 <I2C_RcvAckDat+0x1e>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
		return I2C_ERR;
	*pRdDat=TWDR;
 206:	80 91 73 00 	lds	r24, 0x0073
 20a:	80 83       	st	Z, r24
 20c:	81 e0       	ldi	r24, 0x01	; 1
	return I2C_CRR;
}
 20e:	08 95       	ret

00000210 <I2C_Write>:
		 wordAdr: word address 字地址
		 dat: data 数据
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Write(uint16_t wrDAdr,uint8_t wordAdr,uint8_t dat)
{
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	16 2f       	mov	r17, r22
 21c:	04 2f       	mov	r16, r20
	if( I2C_Start()==I2C_ERR )
 21e:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start>
 222:	88 23       	and	r24, r24
 224:	a1 f0       	breq	.+40     	; 0x24e <I2C_Write+0x3e>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 226:	ce 01       	movw	r24, r28
 228:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_SendWrDAdr_>
 22c:	88 23       	and	r24, r24
 22e:	79 f0       	breq	.+30     	; 0x24e <I2C_Write+0x3e>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 230:	81 2f       	mov	r24, r17
 232:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SendDat>
 236:	88 23       	and	r24, r24
 238:	51 f0       	breq	.+20     	; 0x24e <I2C_Write+0x3e>
		return I2C_ERR;

	if( I2C_SendDat(dat)==I2C_ERR )
 23a:	80 2f       	mov	r24, r16
 23c:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SendDat>
 240:	88 23       	and	r24, r24
 242:	29 f0       	breq	.+10     	; 0x24e <I2C_Write+0x3e>
		return I2C_ERR;

	I2C_Stop();
 244:	84 e9       	ldi	r24, 0x94	; 148
 246:	80 93 74 00 	sts	0x0074, r24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	01 c0       	rjmp	.+2      	; 0x250 <I2C_Write+0x40>

	return I2C_CRR;
 24e:	80 e0       	ldi	r24, 0x00	; 0
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <I2C_Read>:
		 *pRdDat: p->read data 读取数据指针
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Read(uint16_t wrDAdr,uint8_t wordAdr,
			  uint8_t rdDAdr,uint8_t *pRdDat)
{
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
 268:	f6 2e       	mov	r15, r22
 26a:	e4 2e       	mov	r14, r20
 26c:	89 01       	movw	r16, r18
	if( I2C_Start()==I2C_ERR )
 26e:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start>
 272:	88 23       	and	r24, r24
 274:	e9 f0       	breq	.+58     	; 0x2b0 <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 276:	ce 01       	movw	r24, r28
 278:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_SendWrDAdr_>
 27c:	88 23       	and	r24, r24
 27e:	c1 f0       	breq	.+48     	; 0x2b0 <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 280:	8f 2d       	mov	r24, r15
 282:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SendDat>
 286:	88 23       	and	r24, r24
 288:	99 f0       	breq	.+38     	; 0x2b0 <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_Restart()==I2C_ERR )
 28a:	0e 94 80 00 	call	0x100	; 0x100 <I2C_Restart>
 28e:	88 23       	and	r24, r24
 290:	79 f0       	breq	.+30     	; 0x2b0 <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 292:	8e 2d       	mov	r24, r14
 294:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_SendRdDAdr>
 298:	88 23       	and	r24, r24
 29a:	51 f0       	breq	.+20     	; 0x2b0 <I2C_Read+0x56>
		return I2C_ERR;

	if( I2C_RcvNAckDat(pRdDat)==I2C_ERR )
 29c:	c8 01       	movw	r24, r16
 29e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_RcvNAckDat>
 2a2:	88 23       	and	r24, r24
 2a4:	29 f0       	breq	.+10     	; 0x2b0 <I2C_Read+0x56>
		return I2C_ERR;

	I2C_Stop();
 2a6:	84 e9       	ldi	r24, 0x94	; 148
 2a8:	80 93 74 00 	sts	0x0074, r24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <I2C_Read+0x58>

	return I2C_CRR;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	08 95       	ret

000002c0 <I2C_Read_>:
		 num: number 读取数据个数
返    回：
--------------------------------------------------------------------*/
uint8_t I2C_Read_(uint16_t wrDAdr,uint8_t wordAdr,
			   uint8_t rdDAdr,uint8_t *pRdDat,uint8_t num)
{
 2c0:	cf 92       	push	r12
 2c2:	df 92       	push	r13
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	ec 01       	movw	r28, r24
 2d0:	16 2f       	mov	r17, r22
 2d2:	f4 2e       	mov	r15, r20
 2d4:	69 01       	movw	r12, r18
 	uint8_t i;
	
	if( I2C_Start()==I2C_ERR )
 2d6:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Start>
 2da:	88 23       	and	r24, r24
 2dc:	81 f1       	breq	.+96     	; 0x33e <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_SendWrDAdr_(wrDAdr)==I2C_ERR )
 2de:	ce 01       	movw	r24, r28
 2e0:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_SendWrDAdr_>
 2e4:	88 23       	and	r24, r24
 2e6:	59 f1       	breq	.+86     	; 0x33e <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_SendDat(wordAdr)==I2C_ERR )
 2e8:	81 2f       	mov	r24, r17
 2ea:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_SendDat>
 2ee:	88 23       	and	r24, r24
 2f0:	31 f1       	breq	.+76     	; 0x33e <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_Restart()==I2C_ERR )
 2f2:	0e 94 80 00 	call	0x100	; 0x100 <I2C_Restart>
 2f6:	88 23       	and	r24, r24
 2f8:	11 f1       	breq	.+68     	; 0x33e <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
 2fa:	8f 2d       	mov	r24, r15
 2fc:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_SendRdDAdr>
 300:	88 23       	and	r24, r24
 302:	e9 f0       	breq	.+58     	; 0x33e <I2C_Read_+0x7e>
 304:	ff 24       	eor	r15, r15
		return I2C_ERR;

	for(i=0;i<num-1;i++)
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	01 50       	subi	r16, 0x01	; 1
 30a:	10 40       	sbci	r17, 0x00	; 0
 30c:	06 c0       	rjmp	.+12     	; 0x31a <I2C_Read_+0x5a>
		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
 30e:	c9 01       	movw	r24, r18
 310:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_RcvAckDat>
 314:	88 23       	and	r24, r24
 316:	99 f0       	breq	.+38     	; 0x33e <I2C_Read_+0x7e>
		return I2C_ERR;

	if( I2C_SendRdDAdr(rdDAdr)==I2C_ERR )
		return I2C_ERR;

	for(i=0;i<num-1;i++)
 318:	f3 94       	inc	r15
 31a:	8f 2d       	mov	r24, r15
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	96 01       	movw	r18, r12
 320:	28 0f       	add	r18, r24
 322:	39 1f       	adc	r19, r25
 324:	80 17       	cp	r24, r16
 326:	91 07       	cpc	r25, r17
 328:	94 f3       	brlt	.-28     	; 0x30e <I2C_Read_+0x4e>
		if( I2C_RcvAckDat(pRdDat+i)==I2C_ERR )
			return I2C_ERR;
	
	if( I2C_RcvNAckDat(pRdDat+i)==I2C_ERR )
 32a:	c9 01       	movw	r24, r18
 32c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_RcvNAckDat>
 330:	88 23       	and	r24, r24
 332:	29 f0       	breq	.+10     	; 0x33e <I2C_Read_+0x7e>
			return I2C_ERR;

	I2C_Stop();
 334:	84 e9       	ldi	r24, 0x94	; 148
 336:	80 93 74 00 	sts	0x0074, r24
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	01 c0       	rjmp	.+2      	; 0x340 <I2C_Read_+0x80>
	
	return I2C_CRR;
 33e:	80 e0       	ldi	r24, 0x00	; 0
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	ff 90       	pop	r15
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	08 95       	ret

00000350 <WriteAByte>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t WriteAByte(uint8_t wordAdr,uint8_t dat)
{
 350:	28 2f       	mov	r18, r24
 352:	46 2f       	mov	r20, r22
	if( I2C_Write(WR_DADR,wordAdr,dat)==I2C_ERR )
 354:	82 ea       	ldi	r24, 0xA2	; 162
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	62 2f       	mov	r22, r18
 35a:	0e 94 08 01 	call	0x210	; 0x210 <I2C_Write>
 35e:	81 11       	cpse	r24, r1
 360:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 362:	08 95       	ret

00000364 <ReadNByte>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
uint8_t ReadNByte(uint8_t wordAdr,uint8_t *pRdDat,uint8_t num)
{  
 364:	0f 93       	push	r16
 366:	58 2f       	mov	r21, r24
 368:	9b 01       	movw	r18, r22
 36a:	04 2f       	mov	r16, r20
	if( I2C_Read_(WR_DADR,wordAdr,RD_DADR,pRdDat,num)==I2C_ERR )
 36c:	82 ea       	ldi	r24, 0xA2	; 162
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	65 2f       	mov	r22, r21
 372:	43 ea       	ldi	r20, 0xA3	; 163
 374:	0e 94 60 01 	call	0x2c0	; 0x2c0 <I2C_Read_>
 378:	81 11       	cpse	r24, r1
 37a:	81 e0       	ldi	r24, 0x01	; 1
		return I2C_ERR;
	return I2C_CRR;
}
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <PCF8563_getTime>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
void PCF8563_getTime(uint8_t *buf)
{
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	8c 01       	movw	r16, r24
	ReadNByte(SECOND_DATA_BUF,buf,3);
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	b8 01       	movw	r22, r16
 38a:	43 e0       	ldi	r20, 0x03	; 3
 38c:	0e 94 b2 01 	call	0x364	; 0x364 <ReadNByte>
	buf[0]=buf[0]&0x7f;		//get second data
 390:	f8 01       	movw	r30, r16
 392:	80 81       	ld	r24, Z
 394:	8f 77       	andi	r24, 0x7F	; 127
 396:	80 83       	st	Z, r24
	buf[1]=buf[1]&0x7f;		//get minute data
 398:	81 81       	ldd	r24, Z+1	; 0x01
 39a:	8f 77       	andi	r24, 0x7F	; 127
 39c:	81 83       	std	Z+1, r24	; 0x01
	buf[2]=buf[2]&0x3f;		//get hour data
 39e:	82 81       	ldd	r24, Z+2	; 0x02
 3a0:	8f 73       	andi	r24, 0x3F	; 63
 3a2:	82 83       	std	Z+2, r24	; 0x02

	buf[0]=changeHexToInt(buf[0]);
 3a4:	20 81       	ld	r18, Z
 3a6:	82 2f       	mov	r24, r18
 3a8:	82 95       	swap	r24
 3aa:	8f 70       	andi	r24, 0x0F	; 15
 3ac:	3a e0       	ldi	r19, 0x0A	; 10
 3ae:	83 9f       	mul	r24, r19
 3b0:	c0 01       	movw	r24, r0
 3b2:	11 24       	eor	r1, r1
 3b4:	2f 70       	andi	r18, 0x0F	; 15
 3b6:	28 0f       	add	r18, r24
 3b8:	20 83       	st	Z, r18
	buf[1]=changeHexToInt(buf[1]);
 3ba:	21 81       	ldd	r18, Z+1	; 0x01
 3bc:	82 2f       	mov	r24, r18
 3be:	82 95       	swap	r24
 3c0:	8f 70       	andi	r24, 0x0F	; 15
 3c2:	83 9f       	mul	r24, r19
 3c4:	c0 01       	movw	r24, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	2f 70       	andi	r18, 0x0F	; 15
 3ca:	28 0f       	add	r18, r24
 3cc:	21 83       	std	Z+1, r18	; 0x01
	buf[2]=changeHexToInt(buf[2]);
 3ce:	22 81       	ldd	r18, Z+2	; 0x02
 3d0:	82 2f       	mov	r24, r18
 3d2:	82 95       	swap	r24
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	83 9f       	mul	r24, r19
 3d8:	c0 01       	movw	r24, r0
 3da:	11 24       	eor	r1, r1
 3dc:	2f 70       	andi	r18, 0x0F	; 15
 3de:	28 0f       	add	r18, r24
 3e0:	22 83       	std	Z+2, r18	; 0x02
}
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <PCF8563_setTime>:
提示说明：
输    入：
返    回：
--------------------------------------------------------------------*/
void PCF8563_setTime(uint8_t hour,uint8_t minute,uint8_t second)
{
 3e8:	ef 92       	push	r14
 3ea:	ff 92       	push	r15
 3ec:	0f 93       	push	r16
 3ee:	1f 93       	push	r17
 3f0:	28 2f       	mov	r18, r24
 3f2:	56 2f       	mov	r21, r22
	hour=changeIntToHex(hour);		//将数据的Dex格式转换为Hex格式
 3f4:	6a e0       	ldi	r22, 0x0A	; 10
 3f6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__udivmodqi4>
 3fa:	38 2f       	mov	r19, r24
 3fc:	32 95       	swap	r19
 3fe:	30 7f       	andi	r19, 0xF0	; 240
 400:	82 2f       	mov	r24, r18
 402:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__udivmodqi4>
 406:	29 2f       	mov	r18, r25
	minute=changeIntToHex(minute);
 408:	85 2f       	mov	r24, r21
 40a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__udivmodqi4>
 40e:	08 2f       	mov	r16, r24
 410:	02 95       	swap	r16
 412:	00 7f       	andi	r16, 0xF0	; 240
 414:	85 2f       	mov	r24, r21
 416:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__udivmodqi4>
 41a:	e9 2e       	mov	r14, r25
	second=changeIntToHex(second);
 41c:	84 2f       	mov	r24, r20
 41e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__udivmodqi4>
 422:	18 2f       	mov	r17, r24
 424:	12 95       	swap	r17
 426:	10 7f       	andi	r17, 0xF0	; 240
 428:	84 2f       	mov	r24, r20
 42a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__udivmodqi4>
 42e:	f9 2e       	mov	r15, r25

	WriteAByte(HOUR_DATA_BUF,hour);
 430:	32 0f       	add	r19, r18
 432:	84 e0       	ldi	r24, 0x04	; 4
 434:	63 2f       	mov	r22, r19
 436:	0e 94 a8 01 	call	0x350	; 0x350 <WriteAByte>
	WriteAByte(MINUTE_DATA_BUF,minute);
 43a:	0e 0d       	add	r16, r14
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	60 2f       	mov	r22, r16
 440:	0e 94 a8 01 	call	0x350	; 0x350 <WriteAByte>
	WriteAByte(SECOND_DATA_BUF,second);
 444:	1f 0d       	add	r17, r15
 446:	82 e0       	ldi	r24, 0x02	; 2
 448:	61 2f       	mov	r22, r17
 44a:	0e 94 a8 01 	call	0x350	; 0x350 <WriteAByte>
}
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	ef 90       	pop	r14
 456:	08 95       	ret

00000458 <PCF8563_init>:
输    入：
返    回：
--------------------------------------------------------------------*/
void PCF8563_init()
{
	WriteAByte(CTRL_BUF1,0x00);			//basic setting
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	0e 94 a8 01 	call	0x350	; 0x350 <WriteAByte>
	WriteAByte(CTRL_BUF2,0x12);			//alarm enable
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	62 e1       	ldi	r22, 0x12	; 18
 464:	0e 94 a8 01 	call	0x350	; 0x350 <WriteAByte>
}
 468:	08 95       	ret

0000046a <main>:
#include <util/delay.h>
#include <ws_iic_port.h>
#include <ws_pcf8563_port.h>

int main(void)
{
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	df 93       	push	r29
 478:	cf 93       	push	r28
 47a:	00 d0       	rcall	.+0      	; 0x47c <main+0x12>
 47c:	0f 92       	push	r0
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xFF;
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 486:	1b ba       	out	0x1b, r1	; 27

	uint8_t time[3];
	uint8_t Flag,Flag1;
	usartInit();
 488:	0e 94 bf 02 	call	0x57e	; 0x57e <usartInit>
	printf("*--------------------------------------------------- *\r\n");
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	0e 94 ee 02 	call	0x5dc	; 0x5dc <puts>
	printf("*-------------------AT24CXX experiment-------------- *\r\n");
 494:	88 e3       	ldi	r24, 0x38	; 56
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 ee 02 	call	0x5dc	; 0x5dc <puts>
	printf("*--------------------------------------------------- *\r\n");
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <puts>

void twi_init()	 	 	//TWI(I2C)初始化
{
/*Hardware Environment：DVK501 && M128+ EX*/
#if defined(_DVK501_M128_EX_)
	TWBR = 0X0F;		//设置TWI波特率  
 4a4:	8f e0       	ldi	r24, 0x0F	; 15
 4a6:	80 93 70 00 	sts	0x0070, r24
	TWSR &= 0XFC;		//设置TWI预分频 为 1
 4aa:	80 91 71 00 	lds	r24, 0x0071
 4ae:	8c 7f       	andi	r24, 0xFC	; 252
 4b0:	80 93 71 00 	sts	0x0071, r24


	twi_init();	
	PCF8563_init();	
 4b4:	0e 94 2c 02 	call	0x458	; 0x458 <PCF8563_init>
	PCF8563_setTime(0,0,0); 
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	40 e0       	ldi	r20, 0x00	; 0
 4be:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <PCF8563_setTime>
	
	while(1)
	{	
		while(1)
		{
			PCF8563_getTime(time);
 4c2:	6e 01       	movw	r12, r28
 4c4:	08 94       	sec
 4c6:	c1 1c       	adc	r12, r1
 4c8:	d1 1c       	adc	r13, r1

			if(Flag1 != Flag)
			{
				PORTA = time[0];
				printf("Real time clock  %d:%d:%d \r \n",time[2],time[1],time[0]);
 4ca:	80 e7       	ldi	r24, 0x70	; 112
 4cc:	e8 2e       	mov	r14, r24
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	f8 2e       	mov	r15, r24
	
	while(1)
	{	
		while(1)
		{
			PCF8563_getTime(time);
 4d2:	c6 01       	movw	r24, r12
 4d4:	0e 94 c0 01 	call	0x380	; 0x380 <PCF8563_getTime>

			if(Flag1 != Flag)
 4d8:	10 17       	cp	r17, r16
 4da:	39 f1       	breq	.+78     	; 0x52a <main+0xc0>
			{
				PORTA = time[0];
 4dc:	99 81       	ldd	r25, Y+1	; 0x01
 4de:	9b bb       	out	0x1b, r25	; 27
				printf("Real time clock  %d:%d:%d \r \n",time[2],time[1],time[0]);
 4e0:	2d b7       	in	r18, 0x3d	; 61
 4e2:	3e b7       	in	r19, 0x3e	; 62
 4e4:	28 50       	subi	r18, 0x08	; 8
 4e6:	30 40       	sbci	r19, 0x00	; 0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	3e bf       	out	0x3e, r19	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	2d bf       	out	0x3d, r18	; 61
 4f2:	ed b7       	in	r30, 0x3d	; 61
 4f4:	fe b7       	in	r31, 0x3e	; 62
 4f6:	31 96       	adiw	r30, 0x01	; 1
 4f8:	ad b7       	in	r26, 0x3d	; 61
 4fa:	be b7       	in	r27, 0x3e	; 62
 4fc:	12 96       	adiw	r26, 0x02	; 2
 4fe:	fc 92       	st	X, r15
 500:	ee 92       	st	-X, r14
 502:	11 97       	sbiw	r26, 0x01	; 1
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	82 83       	std	Z+2, r24	; 0x02
 508:	13 82       	std	Z+3, r1	; 0x03
 50a:	8a 81       	ldd	r24, Y+2	; 0x02
 50c:	84 83       	std	Z+4, r24	; 0x04
 50e:	15 82       	std	Z+5, r1	; 0x05
 510:	96 83       	std	Z+6, r25	; 0x06
 512:	17 82       	std	Z+7, r1	; 0x07
 514:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
 518:	2d b7       	in	r18, 0x3d	; 61
 51a:	3e b7       	in	r19, 0x3e	; 62
 51c:	28 5f       	subi	r18, 0xF8	; 248
 51e:	3f 4f       	sbci	r19, 0xFF	; 255
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	f8 94       	cli
 524:	3e bf       	out	0x3e, r19	; 62
 526:	0f be       	out	0x3f, r0	; 63
 528:	2d bf       	out	0x3d, r18	; 61
				Flag1=Flag;
			}  	
			Flag = time[0];
 52a:	10 2f       	mov	r17, r16
 52c:	09 81       	ldd	r16, Y+1	; 0x01
 52e:	d1 cf       	rjmp	.-94     	; 0x4d2 <main+0x68>

00000530 <uart_putchar>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE); 


//From RS232 sends a byte
static int uart_putchar(char c, FILE *stream)    
{ 
 530:	1f 93       	push	r17
 532:	18 2f       	mov	r17, r24
  if (c == '\n')        
 534:	8a 30       	cpi	r24, 0x0A	; 10
 536:	19 f4       	brne	.+6      	; 0x53e <uart_putchar+0xe>
  uart_putchar('\r', stream);      
 538:	8d e0       	ldi	r24, 0x0D	; 13
 53a:	0e 94 98 02 	call	0x530	; 0x530 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);      
 53e:	5d 9b       	sbis	0x0b, 5	; 11
 540:	fe cf       	rjmp	.-4      	; 0x53e <uart_putchar+0xe>
  UDR0 = c;      
 542:	1c b9       	out	0x0c, r17	; 12
  return 0;    
} 
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	1f 91       	pop	r17
 54a:	08 95       	ret

0000054c <putUsart0>:

void putUsart0(unsigned char c)
{ 
	while(!(WS_UCSR0A & 0x20));
 54c:	5d 9b       	sbis	0x0b, 5	; 11
 54e:	fe cf       	rjmp	.-4      	; 0x54c <putUsart0>
	WS_UDR0 = c;
 550:	8c b9       	out	0x0c, r24	; 12
}
 552:	08 95       	ret

00000554 <getUsart0>:
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 554:	5f 9b       	sbis	0x0b, 7	; 11
 556:	07 c0       	rjmp	.+14     	; 0x566 <getUsart0+0x12>
    status = WS_UCSR0A;
 558:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 55a:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 55c:	8c 71       	andi	r24, 0x1C	; 28
 55e:	19 f4       	brne	.+6      	; 0x566 <getUsart0+0x12>
    return res;
 560:	29 2f       	mov	r18, r25
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <getUsart0+0x16>
 566:	2f ef       	ldi	r18, 0xFF	; 255
 568:	3f ef       	ldi	r19, 0xFF	; 255
}
 56a:	c9 01       	movw	r24, r18
 56c:	08 95       	ret

0000056e <waitUsart0>:
}
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 56e:	5f 9b       	sbis	0x0b, 7	; 11
 570:	fe cf       	rjmp	.-4      	; 0x56e <waitUsart0>
    status = WS_UCSR0A;
 572:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 574:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 576:	8c 71       	andi	r24, 0x1C	; 28
 578:	d1 f7       	brne	.-12     	; 0x56e <waitUsart0>
unsigned char waitUsart0(void)
{
    unsigned int c;
    while((c=getUsart0())==0xFFFF);
    return (unsigned char)c;
}
 57a:	89 2f       	mov	r24, r25
 57c:	08 95       	ret

0000057e <usartInit>:
	// USART0 Receiver: On
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud Rate: 9600
	//
	UCSR0A=0x00;
 57e:	1b b8       	out	0x0b, r1	; 11
	UCSR0B=0x98;
 580:	88 e9       	ldi	r24, 0x98	; 152
 582:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=0x06;
 584:	86 e0       	ldi	r24, 0x06	; 6
 586:	80 93 95 00 	sts	0x0095, r24
	UBRR0H=0x00;
 58a:	10 92 90 00 	sts	0x0090, r1
	UBRR0L=0x2F;
 58e:	8f e2       	ldi	r24, 0x2F	; 47
 590:	89 b9       	out	0x09, r24	; 9
	stdout = &mystdout;       //Must add 
 592:	8e e8       	ldi	r24, 0x8E	; 142
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	90 93 9f 01 	sts	0x019F, r25
 59a:	80 93 9e 01 	sts	0x019E, r24
}
 59e:	08 95       	ret

000005a0 <__udivmodqi4>:
 5a0:	99 1b       	sub	r25, r25
 5a2:	79 e0       	ldi	r23, 0x09	; 9
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <__udivmodqi4_ep>

000005a6 <__udivmodqi4_loop>:
 5a6:	99 1f       	adc	r25, r25
 5a8:	96 17       	cp	r25, r22
 5aa:	08 f0       	brcs	.+2      	; 0x5ae <__udivmodqi4_ep>
 5ac:	96 1b       	sub	r25, r22

000005ae <__udivmodqi4_ep>:
 5ae:	88 1f       	adc	r24, r24
 5b0:	7a 95       	dec	r23
 5b2:	c9 f7       	brne	.-14     	; 0x5a6 <__udivmodqi4_loop>
 5b4:	80 95       	com	r24
 5b6:	08 95       	ret

000005b8 <printf>:
 5b8:	df 93       	push	r29
 5ba:	cf 93       	push	r28
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	fe 01       	movw	r30, r28
 5c2:	35 96       	adiw	r30, 0x05	; 5
 5c4:	61 91       	ld	r22, Z+
 5c6:	71 91       	ld	r23, Z+
 5c8:	80 91 9e 01 	lds	r24, 0x019E
 5cc:	90 91 9f 01 	lds	r25, 0x019F
 5d0:	af 01       	movw	r20, r30
 5d2:	0e 94 23 03 	call	0x646	; 0x646 <vfprintf>
 5d6:	cf 91       	pop	r28
 5d8:	df 91       	pop	r29
 5da:	08 95       	ret

000005dc <puts>:
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	8c 01       	movw	r16, r24
 5e6:	e0 91 9e 01 	lds	r30, 0x019E
 5ea:	f0 91 9f 01 	lds	r31, 0x019F
 5ee:	83 81       	ldd	r24, Z+3	; 0x03
 5f0:	81 ff       	sbrs	r24, 1
 5f2:	21 c0       	rjmp	.+66     	; 0x636 <puts+0x5a>
 5f4:	c0 e0       	ldi	r28, 0x00	; 0
 5f6:	d0 e0       	ldi	r29, 0x00	; 0
 5f8:	0d c0       	rjmp	.+26     	; 0x614 <puts+0x38>
 5fa:	e0 91 9e 01 	lds	r30, 0x019E
 5fe:	f0 91 9f 01 	lds	r31, 0x019F
 602:	20 85       	ldd	r18, Z+8	; 0x08
 604:	31 85       	ldd	r19, Z+9	; 0x09
 606:	bf 01       	movw	r22, r30
 608:	f9 01       	movw	r30, r18
 60a:	09 95       	icall
 60c:	89 2b       	or	r24, r25
 60e:	11 f0       	breq	.+4      	; 0x614 <puts+0x38>
 610:	cf ef       	ldi	r28, 0xFF	; 255
 612:	df ef       	ldi	r29, 0xFF	; 255
 614:	f8 01       	movw	r30, r16
 616:	81 91       	ld	r24, Z+
 618:	8f 01       	movw	r16, r30
 61a:	88 23       	and	r24, r24
 61c:	71 f7       	brne	.-36     	; 0x5fa <puts+0x1e>
 61e:	e0 91 9e 01 	lds	r30, 0x019E
 622:	f0 91 9f 01 	lds	r31, 0x019F
 626:	20 85       	ldd	r18, Z+8	; 0x08
 628:	31 85       	ldd	r19, Z+9	; 0x09
 62a:	8a e0       	ldi	r24, 0x0A	; 10
 62c:	bf 01       	movw	r22, r30
 62e:	f9 01       	movw	r30, r18
 630:	09 95       	icall
 632:	89 2b       	or	r24, r25
 634:	11 f0       	breq	.+4      	; 0x63a <puts+0x5e>
 636:	cf ef       	ldi	r28, 0xFF	; 255
 638:	df ef       	ldi	r29, 0xFF	; 255
 63a:	ce 01       	movw	r24, r28
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	08 95       	ret

00000646 <vfprintf>:
 646:	2f 92       	push	r2
 648:	3f 92       	push	r3
 64a:	4f 92       	push	r4
 64c:	5f 92       	push	r5
 64e:	6f 92       	push	r6
 650:	7f 92       	push	r7
 652:	8f 92       	push	r8
 654:	9f 92       	push	r9
 656:	af 92       	push	r10
 658:	bf 92       	push	r11
 65a:	cf 92       	push	r12
 65c:	df 92       	push	r13
 65e:	ef 92       	push	r14
 660:	ff 92       	push	r15
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	df 93       	push	r29
 668:	cf 93       	push	r28
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62
 66e:	2b 97       	sbiw	r28, 0x0b	; 11
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	f8 94       	cli
 674:	de bf       	out	0x3e, r29	; 62
 676:	0f be       	out	0x3f, r0	; 63
 678:	cd bf       	out	0x3d, r28	; 61
 67a:	3c 01       	movw	r6, r24
 67c:	2b 01       	movw	r4, r22
 67e:	5a 01       	movw	r10, r20
 680:	fc 01       	movw	r30, r24
 682:	17 82       	std	Z+7, r1	; 0x07
 684:	16 82       	std	Z+6, r1	; 0x06
 686:	83 81       	ldd	r24, Z+3	; 0x03
 688:	81 fd       	sbrc	r24, 1
 68a:	03 c0       	rjmp	.+6      	; 0x692 <vfprintf+0x4c>
 68c:	6f ef       	ldi	r22, 0xFF	; 255
 68e:	7f ef       	ldi	r23, 0xFF	; 255
 690:	c6 c1       	rjmp	.+908    	; 0xa1e <vfprintf+0x3d8>
 692:	9a e0       	ldi	r25, 0x0A	; 10
 694:	89 2e       	mov	r8, r25
 696:	1e 01       	movw	r2, r28
 698:	08 94       	sec
 69a:	21 1c       	adc	r2, r1
 69c:	31 1c       	adc	r3, r1
 69e:	f3 01       	movw	r30, r6
 6a0:	23 81       	ldd	r18, Z+3	; 0x03
 6a2:	f2 01       	movw	r30, r4
 6a4:	23 fd       	sbrc	r18, 3
 6a6:	85 91       	lpm	r24, Z+
 6a8:	23 ff       	sbrs	r18, 3
 6aa:	81 91       	ld	r24, Z+
 6ac:	2f 01       	movw	r4, r30
 6ae:	88 23       	and	r24, r24
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <vfprintf+0x6e>
 6b2:	b2 c1       	rjmp	.+868    	; 0xa18 <vfprintf+0x3d2>
 6b4:	85 32       	cpi	r24, 0x25	; 37
 6b6:	39 f4       	brne	.+14     	; 0x6c6 <vfprintf+0x80>
 6b8:	23 fd       	sbrc	r18, 3
 6ba:	85 91       	lpm	r24, Z+
 6bc:	23 ff       	sbrs	r18, 3
 6be:	81 91       	ld	r24, Z+
 6c0:	2f 01       	movw	r4, r30
 6c2:	85 32       	cpi	r24, 0x25	; 37
 6c4:	29 f4       	brne	.+10     	; 0x6d0 <vfprintf+0x8a>
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	b3 01       	movw	r22, r6
 6ca:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 6ce:	e7 cf       	rjmp	.-50     	; 0x69e <vfprintf+0x58>
 6d0:	98 2f       	mov	r25, r24
 6d2:	ff 24       	eor	r15, r15
 6d4:	ee 24       	eor	r14, r14
 6d6:	99 24       	eor	r9, r9
 6d8:	ff e1       	ldi	r31, 0x1F	; 31
 6da:	ff 15       	cp	r31, r15
 6dc:	d0 f0       	brcs	.+52     	; 0x712 <vfprintf+0xcc>
 6de:	9b 32       	cpi	r25, 0x2B	; 43
 6e0:	69 f0       	breq	.+26     	; 0x6fc <vfprintf+0xb6>
 6e2:	9c 32       	cpi	r25, 0x2C	; 44
 6e4:	28 f4       	brcc	.+10     	; 0x6f0 <vfprintf+0xaa>
 6e6:	90 32       	cpi	r25, 0x20	; 32
 6e8:	59 f0       	breq	.+22     	; 0x700 <vfprintf+0xba>
 6ea:	93 32       	cpi	r25, 0x23	; 35
 6ec:	91 f4       	brne	.+36     	; 0x712 <vfprintf+0xcc>
 6ee:	0e c0       	rjmp	.+28     	; 0x70c <vfprintf+0xc6>
 6f0:	9d 32       	cpi	r25, 0x2D	; 45
 6f2:	49 f0       	breq	.+18     	; 0x706 <vfprintf+0xc0>
 6f4:	90 33       	cpi	r25, 0x30	; 48
 6f6:	69 f4       	brne	.+26     	; 0x712 <vfprintf+0xcc>
 6f8:	41 e0       	ldi	r20, 0x01	; 1
 6fa:	24 c0       	rjmp	.+72     	; 0x744 <vfprintf+0xfe>
 6fc:	52 e0       	ldi	r21, 0x02	; 2
 6fe:	f5 2a       	or	r15, r21
 700:	84 e0       	ldi	r24, 0x04	; 4
 702:	f8 2a       	or	r15, r24
 704:	28 c0       	rjmp	.+80     	; 0x756 <vfprintf+0x110>
 706:	98 e0       	ldi	r25, 0x08	; 8
 708:	f9 2a       	or	r15, r25
 70a:	25 c0       	rjmp	.+74     	; 0x756 <vfprintf+0x110>
 70c:	e0 e1       	ldi	r30, 0x10	; 16
 70e:	fe 2a       	or	r15, r30
 710:	22 c0       	rjmp	.+68     	; 0x756 <vfprintf+0x110>
 712:	f7 fc       	sbrc	r15, 7
 714:	29 c0       	rjmp	.+82     	; 0x768 <vfprintf+0x122>
 716:	89 2f       	mov	r24, r25
 718:	80 53       	subi	r24, 0x30	; 48
 71a:	8a 30       	cpi	r24, 0x0A	; 10
 71c:	70 f4       	brcc	.+28     	; 0x73a <vfprintf+0xf4>
 71e:	f6 fe       	sbrs	r15, 6
 720:	05 c0       	rjmp	.+10     	; 0x72c <vfprintf+0xe6>
 722:	98 9c       	mul	r9, r8
 724:	90 2c       	mov	r9, r0
 726:	11 24       	eor	r1, r1
 728:	98 0e       	add	r9, r24
 72a:	15 c0       	rjmp	.+42     	; 0x756 <vfprintf+0x110>
 72c:	e8 9c       	mul	r14, r8
 72e:	e0 2c       	mov	r14, r0
 730:	11 24       	eor	r1, r1
 732:	e8 0e       	add	r14, r24
 734:	f0 e2       	ldi	r31, 0x20	; 32
 736:	ff 2a       	or	r15, r31
 738:	0e c0       	rjmp	.+28     	; 0x756 <vfprintf+0x110>
 73a:	9e 32       	cpi	r25, 0x2E	; 46
 73c:	29 f4       	brne	.+10     	; 0x748 <vfprintf+0x102>
 73e:	f6 fc       	sbrc	r15, 6
 740:	6b c1       	rjmp	.+726    	; 0xa18 <vfprintf+0x3d2>
 742:	40 e4       	ldi	r20, 0x40	; 64
 744:	f4 2a       	or	r15, r20
 746:	07 c0       	rjmp	.+14     	; 0x756 <vfprintf+0x110>
 748:	9c 36       	cpi	r25, 0x6C	; 108
 74a:	19 f4       	brne	.+6      	; 0x752 <vfprintf+0x10c>
 74c:	50 e8       	ldi	r21, 0x80	; 128
 74e:	f5 2a       	or	r15, r21
 750:	02 c0       	rjmp	.+4      	; 0x756 <vfprintf+0x110>
 752:	98 36       	cpi	r25, 0x68	; 104
 754:	49 f4       	brne	.+18     	; 0x768 <vfprintf+0x122>
 756:	f2 01       	movw	r30, r4
 758:	23 fd       	sbrc	r18, 3
 75a:	95 91       	lpm	r25, Z+
 75c:	23 ff       	sbrs	r18, 3
 75e:	91 91       	ld	r25, Z+
 760:	2f 01       	movw	r4, r30
 762:	99 23       	and	r25, r25
 764:	09 f0       	breq	.+2      	; 0x768 <vfprintf+0x122>
 766:	b8 cf       	rjmp	.-144    	; 0x6d8 <vfprintf+0x92>
 768:	89 2f       	mov	r24, r25
 76a:	85 54       	subi	r24, 0x45	; 69
 76c:	83 30       	cpi	r24, 0x03	; 3
 76e:	18 f0       	brcs	.+6      	; 0x776 <vfprintf+0x130>
 770:	80 52       	subi	r24, 0x20	; 32
 772:	83 30       	cpi	r24, 0x03	; 3
 774:	38 f4       	brcc	.+14     	; 0x784 <vfprintf+0x13e>
 776:	44 e0       	ldi	r20, 0x04	; 4
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	a4 0e       	add	r10, r20
 77c:	b5 1e       	adc	r11, r21
 77e:	5f e3       	ldi	r21, 0x3F	; 63
 780:	59 83       	std	Y+1, r21	; 0x01
 782:	0f c0       	rjmp	.+30     	; 0x7a2 <vfprintf+0x15c>
 784:	93 36       	cpi	r25, 0x63	; 99
 786:	31 f0       	breq	.+12     	; 0x794 <vfprintf+0x14e>
 788:	93 37       	cpi	r25, 0x73	; 115
 78a:	79 f0       	breq	.+30     	; 0x7aa <vfprintf+0x164>
 78c:	93 35       	cpi	r25, 0x53	; 83
 78e:	09 f0       	breq	.+2      	; 0x792 <vfprintf+0x14c>
 790:	56 c0       	rjmp	.+172    	; 0x83e <vfprintf+0x1f8>
 792:	20 c0       	rjmp	.+64     	; 0x7d4 <vfprintf+0x18e>
 794:	f5 01       	movw	r30, r10
 796:	80 81       	ld	r24, Z
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	42 e0       	ldi	r20, 0x02	; 2
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	a4 0e       	add	r10, r20
 7a0:	b5 1e       	adc	r11, r21
 7a2:	61 01       	movw	r12, r2
 7a4:	01 e0       	ldi	r16, 0x01	; 1
 7a6:	10 e0       	ldi	r17, 0x00	; 0
 7a8:	12 c0       	rjmp	.+36     	; 0x7ce <vfprintf+0x188>
 7aa:	f5 01       	movw	r30, r10
 7ac:	c0 80       	ld	r12, Z
 7ae:	d1 80       	ldd	r13, Z+1	; 0x01
 7b0:	f6 fc       	sbrc	r15, 6
 7b2:	03 c0       	rjmp	.+6      	; 0x7ba <vfprintf+0x174>
 7b4:	6f ef       	ldi	r22, 0xFF	; 255
 7b6:	7f ef       	ldi	r23, 0xFF	; 255
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0x178>
 7ba:	69 2d       	mov	r22, r9
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	42 e0       	ldi	r20, 0x02	; 2
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	a4 0e       	add	r10, r20
 7c4:	b5 1e       	adc	r11, r21
 7c6:	c6 01       	movw	r24, r12
 7c8:	0e 94 34 05 	call	0xa68	; 0xa68 <strnlen>
 7cc:	8c 01       	movw	r16, r24
 7ce:	5f e7       	ldi	r21, 0x7F	; 127
 7d0:	f5 22       	and	r15, r21
 7d2:	14 c0       	rjmp	.+40     	; 0x7fc <vfprintf+0x1b6>
 7d4:	f5 01       	movw	r30, r10
 7d6:	c0 80       	ld	r12, Z
 7d8:	d1 80       	ldd	r13, Z+1	; 0x01
 7da:	f6 fc       	sbrc	r15, 6
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <vfprintf+0x19e>
 7de:	6f ef       	ldi	r22, 0xFF	; 255
 7e0:	7f ef       	ldi	r23, 0xFF	; 255
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <vfprintf+0x1a2>
 7e4:	69 2d       	mov	r22, r9
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	42 e0       	ldi	r20, 0x02	; 2
 7ea:	50 e0       	ldi	r21, 0x00	; 0
 7ec:	a4 0e       	add	r10, r20
 7ee:	b5 1e       	adc	r11, r21
 7f0:	c6 01       	movw	r24, r12
 7f2:	0e 94 29 05 	call	0xa52	; 0xa52 <strnlen_P>
 7f6:	8c 01       	movw	r16, r24
 7f8:	50 e8       	ldi	r21, 0x80	; 128
 7fa:	f5 2a       	or	r15, r21
 7fc:	f3 fe       	sbrs	r15, 3
 7fe:	07 c0       	rjmp	.+14     	; 0x80e <vfprintf+0x1c8>
 800:	1a c0       	rjmp	.+52     	; 0x836 <vfprintf+0x1f0>
 802:	80 e2       	ldi	r24, 0x20	; 32
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	b3 01       	movw	r22, r6
 808:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 80c:	ea 94       	dec	r14
 80e:	8e 2d       	mov	r24, r14
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	08 17       	cp	r16, r24
 814:	19 07       	cpc	r17, r25
 816:	a8 f3       	brcs	.-22     	; 0x802 <vfprintf+0x1bc>
 818:	0e c0       	rjmp	.+28     	; 0x836 <vfprintf+0x1f0>
 81a:	f6 01       	movw	r30, r12
 81c:	f7 fc       	sbrc	r15, 7
 81e:	85 91       	lpm	r24, Z+
 820:	f7 fe       	sbrs	r15, 7
 822:	81 91       	ld	r24, Z+
 824:	6f 01       	movw	r12, r30
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	b3 01       	movw	r22, r6
 82a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 82e:	e1 10       	cpse	r14, r1
 830:	ea 94       	dec	r14
 832:	01 50       	subi	r16, 0x01	; 1
 834:	10 40       	sbci	r17, 0x00	; 0
 836:	01 15       	cp	r16, r1
 838:	11 05       	cpc	r17, r1
 83a:	79 f7       	brne	.-34     	; 0x81a <vfprintf+0x1d4>
 83c:	ea c0       	rjmp	.+468    	; 0xa12 <vfprintf+0x3cc>
 83e:	94 36       	cpi	r25, 0x64	; 100
 840:	11 f0       	breq	.+4      	; 0x846 <vfprintf+0x200>
 842:	99 36       	cpi	r25, 0x69	; 105
 844:	69 f5       	brne	.+90     	; 0x8a0 <vfprintf+0x25a>
 846:	f7 fe       	sbrs	r15, 7
 848:	08 c0       	rjmp	.+16     	; 0x85a <vfprintf+0x214>
 84a:	f5 01       	movw	r30, r10
 84c:	20 81       	ld	r18, Z
 84e:	31 81       	ldd	r19, Z+1	; 0x01
 850:	42 81       	ldd	r20, Z+2	; 0x02
 852:	53 81       	ldd	r21, Z+3	; 0x03
 854:	84 e0       	ldi	r24, 0x04	; 4
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0a c0       	rjmp	.+20     	; 0x86e <vfprintf+0x228>
 85a:	f5 01       	movw	r30, r10
 85c:	80 81       	ld	r24, Z
 85e:	91 81       	ldd	r25, Z+1	; 0x01
 860:	9c 01       	movw	r18, r24
 862:	44 27       	eor	r20, r20
 864:	37 fd       	sbrc	r19, 7
 866:	40 95       	com	r20
 868:	54 2f       	mov	r21, r20
 86a:	82 e0       	ldi	r24, 0x02	; 2
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	a8 0e       	add	r10, r24
 870:	b9 1e       	adc	r11, r25
 872:	9f e6       	ldi	r25, 0x6F	; 111
 874:	f9 22       	and	r15, r25
 876:	57 ff       	sbrs	r21, 7
 878:	09 c0       	rjmp	.+18     	; 0x88c <vfprintf+0x246>
 87a:	50 95       	com	r21
 87c:	40 95       	com	r20
 87e:	30 95       	com	r19
 880:	21 95       	neg	r18
 882:	3f 4f       	sbci	r19, 0xFF	; 255
 884:	4f 4f       	sbci	r20, 0xFF	; 255
 886:	5f 4f       	sbci	r21, 0xFF	; 255
 888:	e0 e8       	ldi	r30, 0x80	; 128
 88a:	fe 2a       	or	r15, r30
 88c:	ca 01       	movw	r24, r20
 88e:	b9 01       	movw	r22, r18
 890:	a1 01       	movw	r20, r2
 892:	2a e0       	ldi	r18, 0x0A	; 10
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	0e 94 6b 05 	call	0xad6	; 0xad6 <__ultoa_invert>
 89a:	d8 2e       	mov	r13, r24
 89c:	d2 18       	sub	r13, r2
 89e:	40 c0       	rjmp	.+128    	; 0x920 <vfprintf+0x2da>
 8a0:	95 37       	cpi	r25, 0x75	; 117
 8a2:	29 f4       	brne	.+10     	; 0x8ae <vfprintf+0x268>
 8a4:	1f 2d       	mov	r17, r15
 8a6:	1f 7e       	andi	r17, 0xEF	; 239
 8a8:	2a e0       	ldi	r18, 0x0A	; 10
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	1d c0       	rjmp	.+58     	; 0x8e8 <vfprintf+0x2a2>
 8ae:	1f 2d       	mov	r17, r15
 8b0:	19 7f       	andi	r17, 0xF9	; 249
 8b2:	9f 36       	cpi	r25, 0x6F	; 111
 8b4:	61 f0       	breq	.+24     	; 0x8ce <vfprintf+0x288>
 8b6:	90 37       	cpi	r25, 0x70	; 112
 8b8:	20 f4       	brcc	.+8      	; 0x8c2 <vfprintf+0x27c>
 8ba:	98 35       	cpi	r25, 0x58	; 88
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <vfprintf+0x27a>
 8be:	ac c0       	rjmp	.+344    	; 0xa18 <vfprintf+0x3d2>
 8c0:	0f c0       	rjmp	.+30     	; 0x8e0 <vfprintf+0x29a>
 8c2:	90 37       	cpi	r25, 0x70	; 112
 8c4:	39 f0       	breq	.+14     	; 0x8d4 <vfprintf+0x28e>
 8c6:	98 37       	cpi	r25, 0x78	; 120
 8c8:	09 f0       	breq	.+2      	; 0x8cc <vfprintf+0x286>
 8ca:	a6 c0       	rjmp	.+332    	; 0xa18 <vfprintf+0x3d2>
 8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <vfprintf+0x290>
 8ce:	28 e0       	ldi	r18, 0x08	; 8
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <vfprintf+0x2a2>
 8d4:	10 61       	ori	r17, 0x10	; 16
 8d6:	14 fd       	sbrc	r17, 4
 8d8:	14 60       	ori	r17, 0x04	; 4
 8da:	20 e1       	ldi	r18, 0x10	; 16
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	04 c0       	rjmp	.+8      	; 0x8e8 <vfprintf+0x2a2>
 8e0:	14 fd       	sbrc	r17, 4
 8e2:	16 60       	ori	r17, 0x06	; 6
 8e4:	20 e1       	ldi	r18, 0x10	; 16
 8e6:	32 e0       	ldi	r19, 0x02	; 2
 8e8:	17 ff       	sbrs	r17, 7
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <vfprintf+0x2b6>
 8ec:	f5 01       	movw	r30, r10
 8ee:	60 81       	ld	r22, Z
 8f0:	71 81       	ldd	r23, Z+1	; 0x01
 8f2:	82 81       	ldd	r24, Z+2	; 0x02
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	44 e0       	ldi	r20, 0x04	; 4
 8f8:	50 e0       	ldi	r21, 0x00	; 0
 8fa:	08 c0       	rjmp	.+16     	; 0x90c <vfprintf+0x2c6>
 8fc:	f5 01       	movw	r30, r10
 8fe:	80 81       	ld	r24, Z
 900:	91 81       	ldd	r25, Z+1	; 0x01
 902:	bc 01       	movw	r22, r24
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	42 e0       	ldi	r20, 0x02	; 2
 90a:	50 e0       	ldi	r21, 0x00	; 0
 90c:	a4 0e       	add	r10, r20
 90e:	b5 1e       	adc	r11, r21
 910:	a1 01       	movw	r20, r2
 912:	0e 94 6b 05 	call	0xad6	; 0xad6 <__ultoa_invert>
 916:	d8 2e       	mov	r13, r24
 918:	d2 18       	sub	r13, r2
 91a:	8f e7       	ldi	r24, 0x7F	; 127
 91c:	f8 2e       	mov	r15, r24
 91e:	f1 22       	and	r15, r17
 920:	f6 fe       	sbrs	r15, 6
 922:	0b c0       	rjmp	.+22     	; 0x93a <vfprintf+0x2f4>
 924:	5e ef       	ldi	r21, 0xFE	; 254
 926:	f5 22       	and	r15, r21
 928:	d9 14       	cp	r13, r9
 92a:	38 f4       	brcc	.+14     	; 0x93a <vfprintf+0x2f4>
 92c:	f4 fe       	sbrs	r15, 4
 92e:	07 c0       	rjmp	.+14     	; 0x93e <vfprintf+0x2f8>
 930:	f2 fc       	sbrc	r15, 2
 932:	05 c0       	rjmp	.+10     	; 0x93e <vfprintf+0x2f8>
 934:	8f ee       	ldi	r24, 0xEF	; 239
 936:	f8 22       	and	r15, r24
 938:	02 c0       	rjmp	.+4      	; 0x93e <vfprintf+0x2f8>
 93a:	1d 2d       	mov	r17, r13
 93c:	01 c0       	rjmp	.+2      	; 0x940 <vfprintf+0x2fa>
 93e:	19 2d       	mov	r17, r9
 940:	f4 fe       	sbrs	r15, 4
 942:	0d c0       	rjmp	.+26     	; 0x95e <vfprintf+0x318>
 944:	fe 01       	movw	r30, r28
 946:	ed 0d       	add	r30, r13
 948:	f1 1d       	adc	r31, r1
 94a:	80 81       	ld	r24, Z
 94c:	80 33       	cpi	r24, 0x30	; 48
 94e:	19 f4       	brne	.+6      	; 0x956 <vfprintf+0x310>
 950:	99 ee       	ldi	r25, 0xE9	; 233
 952:	f9 22       	and	r15, r25
 954:	08 c0       	rjmp	.+16     	; 0x966 <vfprintf+0x320>
 956:	1f 5f       	subi	r17, 0xFF	; 255
 958:	f2 fe       	sbrs	r15, 2
 95a:	05 c0       	rjmp	.+10     	; 0x966 <vfprintf+0x320>
 95c:	03 c0       	rjmp	.+6      	; 0x964 <vfprintf+0x31e>
 95e:	8f 2d       	mov	r24, r15
 960:	86 78       	andi	r24, 0x86	; 134
 962:	09 f0       	breq	.+2      	; 0x966 <vfprintf+0x320>
 964:	1f 5f       	subi	r17, 0xFF	; 255
 966:	0f 2d       	mov	r16, r15
 968:	f3 fc       	sbrc	r15, 3
 96a:	14 c0       	rjmp	.+40     	; 0x994 <vfprintf+0x34e>
 96c:	f0 fe       	sbrs	r15, 0
 96e:	0f c0       	rjmp	.+30     	; 0x98e <vfprintf+0x348>
 970:	1e 15       	cp	r17, r14
 972:	10 f0       	brcs	.+4      	; 0x978 <vfprintf+0x332>
 974:	9d 2c       	mov	r9, r13
 976:	0b c0       	rjmp	.+22     	; 0x98e <vfprintf+0x348>
 978:	9d 2c       	mov	r9, r13
 97a:	9e 0c       	add	r9, r14
 97c:	91 1a       	sub	r9, r17
 97e:	1e 2d       	mov	r17, r14
 980:	06 c0       	rjmp	.+12     	; 0x98e <vfprintf+0x348>
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	b3 01       	movw	r22, r6
 988:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 98c:	1f 5f       	subi	r17, 0xFF	; 255
 98e:	1e 15       	cp	r17, r14
 990:	c0 f3       	brcs	.-16     	; 0x982 <vfprintf+0x33c>
 992:	04 c0       	rjmp	.+8      	; 0x99c <vfprintf+0x356>
 994:	1e 15       	cp	r17, r14
 996:	10 f4       	brcc	.+4      	; 0x99c <vfprintf+0x356>
 998:	e1 1a       	sub	r14, r17
 99a:	01 c0       	rjmp	.+2      	; 0x99e <vfprintf+0x358>
 99c:	ee 24       	eor	r14, r14
 99e:	04 ff       	sbrs	r16, 4
 9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <vfprintf+0x37a>
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	b3 01       	movw	r22, r6
 9a8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 9ac:	02 ff       	sbrs	r16, 2
 9ae:	1d c0       	rjmp	.+58     	; 0x9ea <vfprintf+0x3a4>
 9b0:	01 fd       	sbrc	r16, 1
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <vfprintf+0x374>
 9b4:	88 e7       	ldi	r24, 0x78	; 120
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	0e c0       	rjmp	.+28     	; 0x9d6 <vfprintf+0x390>
 9ba:	88 e5       	ldi	r24, 0x58	; 88
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0b c0       	rjmp	.+22     	; 0x9d6 <vfprintf+0x390>
 9c0:	80 2f       	mov	r24, r16
 9c2:	86 78       	andi	r24, 0x86	; 134
 9c4:	91 f0       	breq	.+36     	; 0x9ea <vfprintf+0x3a4>
 9c6:	01 ff       	sbrs	r16, 1
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <vfprintf+0x388>
 9ca:	8b e2       	ldi	r24, 0x2B	; 43
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <vfprintf+0x38a>
 9ce:	80 e2       	ldi	r24, 0x20	; 32
 9d0:	f7 fc       	sbrc	r15, 7
 9d2:	8d e2       	ldi	r24, 0x2D	; 45
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	b3 01       	movw	r22, r6
 9d8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <vfprintf+0x3a4>
 9de:	80 e3       	ldi	r24, 0x30	; 48
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	b3 01       	movw	r22, r6
 9e4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 9e8:	9a 94       	dec	r9
 9ea:	d9 14       	cp	r13, r9
 9ec:	c0 f3       	brcs	.-16     	; 0x9de <vfprintf+0x398>
 9ee:	da 94       	dec	r13
 9f0:	f1 01       	movw	r30, r2
 9f2:	ed 0d       	add	r30, r13
 9f4:	f1 1d       	adc	r31, r1
 9f6:	80 81       	ld	r24, Z
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	b3 01       	movw	r22, r6
 9fc:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 a00:	dd 20       	and	r13, r13
 a02:	a9 f7       	brne	.-22     	; 0x9ee <vfprintf+0x3a8>
 a04:	06 c0       	rjmp	.+12     	; 0xa12 <vfprintf+0x3cc>
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	b3 01       	movw	r22, r6
 a0c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <fputc>
 a10:	ea 94       	dec	r14
 a12:	ee 20       	and	r14, r14
 a14:	c1 f7       	brne	.-16     	; 0xa06 <vfprintf+0x3c0>
 a16:	43 ce       	rjmp	.-890    	; 0x69e <vfprintf+0x58>
 a18:	f3 01       	movw	r30, r6
 a1a:	66 81       	ldd	r22, Z+6	; 0x06
 a1c:	77 81       	ldd	r23, Z+7	; 0x07
 a1e:	cb 01       	movw	r24, r22
 a20:	2b 96       	adiw	r28, 0x0b	; 11
 a22:	0f b6       	in	r0, 0x3f	; 63
 a24:	f8 94       	cli
 a26:	de bf       	out	0x3e, r29	; 62
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	cd bf       	out	0x3d, r28	; 61
 a2c:	cf 91       	pop	r28
 a2e:	df 91       	pop	r29
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	ff 90       	pop	r15
 a36:	ef 90       	pop	r14
 a38:	df 90       	pop	r13
 a3a:	cf 90       	pop	r12
 a3c:	bf 90       	pop	r11
 a3e:	af 90       	pop	r10
 a40:	9f 90       	pop	r9
 a42:	8f 90       	pop	r8
 a44:	7f 90       	pop	r7
 a46:	6f 90       	pop	r6
 a48:	5f 90       	pop	r5
 a4a:	4f 90       	pop	r4
 a4c:	3f 90       	pop	r3
 a4e:	2f 90       	pop	r2
 a50:	08 95       	ret

00000a52 <strnlen_P>:
 a52:	fc 01       	movw	r30, r24
 a54:	05 90       	lpm	r0, Z+
 a56:	61 50       	subi	r22, 0x01	; 1
 a58:	70 40       	sbci	r23, 0x00	; 0
 a5a:	01 10       	cpse	r0, r1
 a5c:	d8 f7       	brcc	.-10     	; 0xa54 <strnlen_P+0x2>
 a5e:	80 95       	com	r24
 a60:	90 95       	com	r25
 a62:	8e 0f       	add	r24, r30
 a64:	9f 1f       	adc	r25, r31
 a66:	08 95       	ret

00000a68 <strnlen>:
 a68:	fc 01       	movw	r30, r24
 a6a:	61 50       	subi	r22, 0x01	; 1
 a6c:	70 40       	sbci	r23, 0x00	; 0
 a6e:	01 90       	ld	r0, Z+
 a70:	01 10       	cpse	r0, r1
 a72:	d8 f7       	brcc	.-10     	; 0xa6a <strnlen+0x2>
 a74:	80 95       	com	r24
 a76:	90 95       	com	r25
 a78:	8e 0f       	add	r24, r30
 a7a:	9f 1f       	adc	r25, r31
 a7c:	08 95       	ret

00000a7e <fputc>:
 a7e:	0f 93       	push	r16
 a80:	1f 93       	push	r17
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	8c 01       	movw	r16, r24
 a88:	eb 01       	movw	r28, r22
 a8a:	8b 81       	ldd	r24, Y+3	; 0x03
 a8c:	81 ff       	sbrs	r24, 1
 a8e:	1b c0       	rjmp	.+54     	; 0xac6 <fputc+0x48>
 a90:	82 ff       	sbrs	r24, 2
 a92:	0d c0       	rjmp	.+26     	; 0xaae <fputc+0x30>
 a94:	2e 81       	ldd	r18, Y+6	; 0x06
 a96:	3f 81       	ldd	r19, Y+7	; 0x07
 a98:	8c 81       	ldd	r24, Y+4	; 0x04
 a9a:	9d 81       	ldd	r25, Y+5	; 0x05
 a9c:	28 17       	cp	r18, r24
 a9e:	39 07       	cpc	r19, r25
 aa0:	64 f4       	brge	.+24     	; 0xaba <fputc+0x3c>
 aa2:	e8 81       	ld	r30, Y
 aa4:	f9 81       	ldd	r31, Y+1	; 0x01
 aa6:	01 93       	st	Z+, r16
 aa8:	f9 83       	std	Y+1, r31	; 0x01
 aaa:	e8 83       	st	Y, r30
 aac:	06 c0       	rjmp	.+12     	; 0xaba <fputc+0x3c>
 aae:	e8 85       	ldd	r30, Y+8	; 0x08
 ab0:	f9 85       	ldd	r31, Y+9	; 0x09
 ab2:	80 2f       	mov	r24, r16
 ab4:	09 95       	icall
 ab6:	89 2b       	or	r24, r25
 ab8:	31 f4       	brne	.+12     	; 0xac6 <fputc+0x48>
 aba:	8e 81       	ldd	r24, Y+6	; 0x06
 abc:	9f 81       	ldd	r25, Y+7	; 0x07
 abe:	01 96       	adiw	r24, 0x01	; 1
 ac0:	9f 83       	std	Y+7, r25	; 0x07
 ac2:	8e 83       	std	Y+6, r24	; 0x06
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <fputc+0x4c>
 ac6:	0f ef       	ldi	r16, 0xFF	; 255
 ac8:	1f ef       	ldi	r17, 0xFF	; 255
 aca:	c8 01       	movw	r24, r16
 acc:	df 91       	pop	r29
 ace:	cf 91       	pop	r28
 ad0:	1f 91       	pop	r17
 ad2:	0f 91       	pop	r16
 ad4:	08 95       	ret

00000ad6 <__ultoa_invert>:
 ad6:	fa 01       	movw	r30, r20
 ad8:	aa 27       	eor	r26, r26
 ada:	28 30       	cpi	r18, 0x08	; 8
 adc:	51 f1       	breq	.+84     	; 0xb32 <__ultoa_invert+0x5c>
 ade:	20 31       	cpi	r18, 0x10	; 16
 ae0:	81 f1       	breq	.+96     	; 0xb42 <__ultoa_invert+0x6c>
 ae2:	e8 94       	clt
 ae4:	6f 93       	push	r22
 ae6:	6e 7f       	andi	r22, 0xFE	; 254
 ae8:	6e 5f       	subi	r22, 0xFE	; 254
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	af 4f       	sbci	r26, 0xFF	; 255
 af2:	b1 e0       	ldi	r27, 0x01	; 1
 af4:	3e d0       	rcall	.+124    	; 0xb72 <__ultoa_invert+0x9c>
 af6:	b4 e0       	ldi	r27, 0x04	; 4
 af8:	3c d0       	rcall	.+120    	; 0xb72 <__ultoa_invert+0x9c>
 afa:	67 0f       	add	r22, r23
 afc:	78 1f       	adc	r23, r24
 afe:	89 1f       	adc	r24, r25
 b00:	9a 1f       	adc	r25, r26
 b02:	a1 1d       	adc	r26, r1
 b04:	68 0f       	add	r22, r24
 b06:	79 1f       	adc	r23, r25
 b08:	8a 1f       	adc	r24, r26
 b0a:	91 1d       	adc	r25, r1
 b0c:	a1 1d       	adc	r26, r1
 b0e:	6a 0f       	add	r22, r26
 b10:	71 1d       	adc	r23, r1
 b12:	81 1d       	adc	r24, r1
 b14:	91 1d       	adc	r25, r1
 b16:	a1 1d       	adc	r26, r1
 b18:	20 d0       	rcall	.+64     	; 0xb5a <__ultoa_invert+0x84>
 b1a:	09 f4       	brne	.+2      	; 0xb1e <__ultoa_invert+0x48>
 b1c:	68 94       	set
 b1e:	3f 91       	pop	r19
 b20:	2a e0       	ldi	r18, 0x0A	; 10
 b22:	26 9f       	mul	r18, r22
 b24:	11 24       	eor	r1, r1
 b26:	30 19       	sub	r19, r0
 b28:	30 5d       	subi	r19, 0xD0	; 208
 b2a:	31 93       	st	Z+, r19
 b2c:	de f6       	brtc	.-74     	; 0xae4 <__ultoa_invert+0xe>
 b2e:	cf 01       	movw	r24, r30
 b30:	08 95       	ret
 b32:	46 2f       	mov	r20, r22
 b34:	47 70       	andi	r20, 0x07	; 7
 b36:	40 5d       	subi	r20, 0xD0	; 208
 b38:	41 93       	st	Z+, r20
 b3a:	b3 e0       	ldi	r27, 0x03	; 3
 b3c:	0f d0       	rcall	.+30     	; 0xb5c <__ultoa_invert+0x86>
 b3e:	c9 f7       	brne	.-14     	; 0xb32 <__ultoa_invert+0x5c>
 b40:	f6 cf       	rjmp	.-20     	; 0xb2e <__ultoa_invert+0x58>
 b42:	46 2f       	mov	r20, r22
 b44:	4f 70       	andi	r20, 0x0F	; 15
 b46:	40 5d       	subi	r20, 0xD0	; 208
 b48:	4a 33       	cpi	r20, 0x3A	; 58
 b4a:	18 f0       	brcs	.+6      	; 0xb52 <__ultoa_invert+0x7c>
 b4c:	49 5d       	subi	r20, 0xD9	; 217
 b4e:	31 fd       	sbrc	r19, 1
 b50:	40 52       	subi	r20, 0x20	; 32
 b52:	41 93       	st	Z+, r20
 b54:	02 d0       	rcall	.+4      	; 0xb5a <__ultoa_invert+0x84>
 b56:	a9 f7       	brne	.-22     	; 0xb42 <__ultoa_invert+0x6c>
 b58:	ea cf       	rjmp	.-44     	; 0xb2e <__ultoa_invert+0x58>
 b5a:	b4 e0       	ldi	r27, 0x04	; 4
 b5c:	a6 95       	lsr	r26
 b5e:	97 95       	ror	r25
 b60:	87 95       	ror	r24
 b62:	77 95       	ror	r23
 b64:	67 95       	ror	r22
 b66:	ba 95       	dec	r27
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__ultoa_invert+0x86>
 b6a:	00 97       	sbiw	r24, 0x00	; 0
 b6c:	61 05       	cpc	r22, r1
 b6e:	71 05       	cpc	r23, r1
 b70:	08 95       	ret
 b72:	9b 01       	movw	r18, r22
 b74:	ac 01       	movw	r20, r24
 b76:	0a 2e       	mov	r0, r26
 b78:	06 94       	lsr	r0
 b7a:	57 95       	ror	r21
 b7c:	47 95       	ror	r20
 b7e:	37 95       	ror	r19
 b80:	27 95       	ror	r18
 b82:	ba 95       	dec	r27
 b84:	c9 f7       	brne	.-14     	; 0xb78 <__ultoa_invert+0xa2>
 b86:	62 0f       	add	r22, r18
 b88:	73 1f       	adc	r23, r19
 b8a:	84 1f       	adc	r24, r20
 b8c:	95 1f       	adc	r25, r21
 b8e:	a0 1d       	adc	r26, r0
 b90:	08 95       	ret

00000b92 <_exit>:
 b92:	f8 94       	cli

00000b94 <__stop_program>:
 b94:	ff cf       	rjmp	.-2      	; 0xb94 <__stop_program>
