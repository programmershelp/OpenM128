
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008a  00000000  00000000  000001dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000056  00000000  00000000  00000267  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d6  00000000  00000000  000002bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000087  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e4       	ldi	r30, 0x40	; 64
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 93 00 	call	0x126	; 0x126 <main>
  b6:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <key_press>:
#include <util/delay.h>


void key_press(void)
{
	PIND &=0xC0;
  be:	80 b3       	in	r24, 0x10	; 16
  c0:	80 7c       	andi	r24, 0xC0	; 192
  c2:	80 bb       	out	0x10, r24	; 16
	switch((PIND&0xC0))
  c4:	80 b3       	in	r24, 0x10	; 16
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 7c       	andi	r24, 0xC0	; 192
  ca:	90 70       	andi	r25, 0x00	; 0
  cc:	80 34       	cpi	r24, 0x40	; 64
  ce:	91 05       	cpc	r25, r1
  d0:	49 f0       	breq	.+18     	; 0xe4 <key_press+0x26>
  d2:	80 38       	cpi	r24, 0x80	; 128
  d4:	91 05       	cpc	r25, r1
  d6:	61 f4       	brne	.+24     	; 0xf0 <key_press+0x32>
	{	
		case 0x80:  while((PIND&0xC0)==0x40);PORTA =0x01;break;
  d8:	80 b3       	in	r24, 0x10	; 16
  da:	80 7c       	andi	r24, 0xC0	; 192
  dc:	80 34       	cpi	r24, 0x40	; 64
  de:	e1 f3       	breq	.-8      	; 0xd8 <key_press+0x1a>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	05 c0       	rjmp	.+10     	; 0xee <key_press+0x30>
		case 0x40:  while((PIND&0xC0)==0x80);PORTA =0x02;break;	       
  e4:	80 b3       	in	r24, 0x10	; 16
  e6:	80 7c       	andi	r24, 0xC0	; 192
  e8:	80 38       	cpi	r24, 0x80	; 128
  ea:	e1 f3       	breq	.-8      	; 0xe4 <key_press+0x26>
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	8b bb       	out	0x1b, r24	; 27
	}

	PINE &=0xC0;
  f0:	81 b1       	in	r24, 0x01	; 1
  f2:	80 7c       	andi	r24, 0xC0	; 192
  f4:	81 b9       	out	0x01, r24	; 1
	switch((PINE&0xC0))
  f6:	81 b1       	in	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	80 7c       	andi	r24, 0xC0	; 192
  fc:	90 70       	andi	r25, 0x00	; 0
  fe:	80 34       	cpi	r24, 0x40	; 64
 100:	91 05       	cpc	r25, r1
 102:	51 f0       	breq	.+20     	; 0x118 <key_press+0x5a>
 104:	80 38       	cpi	r24, 0x80	; 128
 106:	91 05       	cpc	r25, r1
 108:	69 f4       	brne	.+26     	; 0x124 <key_press+0x66>
	{	
		case 0x80:  while((PINE&0xC0)==0x40);PORTA =0x04;break;
 10a:	81 b1       	in	r24, 0x01	; 1
 10c:	80 7c       	andi	r24, 0xC0	; 192
 10e:	80 34       	cpi	r24, 0x40	; 64
 110:	e1 f3       	breq	.-8      	; 0x10a <key_press+0x4c>
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	8b bb       	out	0x1b, r24	; 27
 116:	08 95       	ret
		case 0x40:  while((PINE&0xC0)==0x80);PORTA =0x08;break;	       
 118:	81 b1       	in	r24, 0x01	; 1
 11a:	80 7c       	andi	r24, 0xC0	; 192
 11c:	80 38       	cpi	r24, 0x80	; 128
 11e:	e1 f3       	breq	.-8      	; 0x118 <key_press+0x5a>
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	8b bb       	out	0x1b, r24	; 27
 124:	08 95       	ret

00000126 <main>:

}
int main(void)
{

	DDRD =0X00;
 126:	11 ba       	out	0x11, r1	; 17
	DDRE =0X00;
 128:	12 b8       	out	0x02, r1	; 2
	PORTD = 0xff;	
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	82 bb       	out	0x12, r24	; 18
	PORTE = 0xff;
 12e:	83 b9       	out	0x03, r24	; 3
	DDRA = 0xff;
 130:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x55;
 132:	85 e5       	ldi	r24, 0x55	; 85
 134:	8b bb       	out	0x1b, r24	; 27
	while(1)
    {
     key_press();
 136:	0e 94 5f 00 	call	0xbe	; 0xbe <key_press>
 13a:	fd cf       	rjmp	.-6      	; 0x136 <main+0x10>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
