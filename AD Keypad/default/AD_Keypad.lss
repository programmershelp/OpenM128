
AD_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000025e  00800100  00000360  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000360  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080035e  0080035e  00000652  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000090  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003e0  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ec  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d5  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000015e  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 35       	cpi	r26, 0x5E	; 94
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	13 e0       	ldi	r17, 0x03	; 3
  b4:	ae e5       	ldi	r26, 0x5E	; 94
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 36       	cpi	r26, 0x64	; 100
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 12 01 	call	0x224	; 0x224 <main>
  c6:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <ADC_Init>:
}


void ADC_Init(void)
{
    DDRA&=~(1<<PA0);      //PA0 Set to input, became great resistance, high resistance state
  ce:	d0 98       	cbi	0x1a, 0	; 26
    SFIOR =0;              //Continuous conversion mode 
  d0:	10 bc       	out	0x20, r1	; 32
    ADMUX=0X40;            //AVCC£¬AREF Pins plus filter capacitance
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	87 b9       	out	0x07, r24	; 7
	
}
  d6:	08 95       	ret

000000d8 <ad_getdata>:

unsigned int ad_getdata(void)
{ 
    unsigned int addata; 
    ADCSR =0X80;                    //Start ADC conversion 
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	86 b9       	out	0x06, r24	; 6
    ADCSR |=0x40;           	    //Began to switch 
  dc:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSR&0x10));			//Waiting for conversion
  de:	34 9b       	sbis	0x06, 4	; 6
  e0:	fe cf       	rjmp	.-4      	; 0xde <ad_getdata+0x6>
    addata=ADCL; 
  e2:	94 b1       	in	r25, 0x04	; 4
    addata=addata+ADCH*256;        //The ADCL, ADCH converted into 10 into the system
  e4:	85 b1       	in	r24, 0x05	; 5
	ADCSR |=0x10;                  //ADIF to write "1", ADIF qing 0
  e6:	34 9a       	sbi	0x06, 4	; 6
	ADCSR =0X00;                   //Close ADC conversion 
  e8:	16 b8       	out	0x06, r1	; 6
  ea:	38 2f       	mov	r19, r24
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	29 0f       	add	r18, r25
  f0:	31 1d       	adc	r19, r1
   return addata; 
}
  f2:	c9 01       	movw	r24, r18
  f4:	08 95       	ret

000000f6 <key_scanf>:
	}
}


void key_scanf(unsigned int value)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
		if((value>=0)&&(value<=70))
  fc:	87 34       	cpi	r24, 0x47	; 71
  fe:	91 05       	cpc	r25, r1
 100:	20 f4       	brcc	.+8      	; 0x10a <key_scanf+0x14>
		printf("You press the button is key0 \r\n");	
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>

		if((value>=70)&&(value<=140))
 10a:	ce 01       	movw	r24, r28
 10c:	86 54       	subi	r24, 0x46	; 70
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	87 34       	cpi	r24, 0x47	; 71
 112:	91 05       	cpc	r25, r1
 114:	20 f4       	brcc	.+8      	; 0x11e <key_scanf+0x28>
		printf("You press the button is key1 \r\n");	
 116:	8f e1       	ldi	r24, 0x1F	; 31
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>

		if((value>=140)&&(value<=210))
 11e:	ce 01       	movw	r24, r28
 120:	8c 58       	subi	r24, 0x8C	; 140
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	87 34       	cpi	r24, 0x47	; 71
 126:	91 05       	cpc	r25, r1
 128:	20 f4       	brcc	.+8      	; 0x132 <key_scanf+0x3c>
		printf("You press the button is key2 \r\n");
 12a:	8e e3       	ldi	r24, 0x3E	; 62
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
			
		if((value>=210)&&(value<=260))
 132:	ce 01       	movw	r24, r28
 134:	82 5d       	subi	r24, 0xD2	; 210
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	c3 97       	sbiw	r24, 0x33	; 51
 13a:	20 f4       	brcc	.+8      	; 0x144 <key_scanf+0x4e>
		printf("You press the button is key3 \r\n");
 13c:	8d e5       	ldi	r24, 0x5D	; 93
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
			
		if((value>=260)&&(value<=320))
 144:	ce 01       	movw	r24, r28
 146:	84 50       	subi	r24, 0x04	; 4
 148:	91 40       	sbci	r25, 0x01	; 1
 14a:	cd 97       	sbiw	r24, 0x3d	; 61
 14c:	20 f4       	brcc	.+8      	; 0x156 <key_scanf+0x60>
		printf("You press the button is key4 \r\n");
 14e:	8c e7       	ldi	r24, 0x7C	; 124
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
			
		if((value>=320)&&(value<=380))
 156:	ce 01       	movw	r24, r28
 158:	80 54       	subi	r24, 0x40	; 64
 15a:	91 40       	sbci	r25, 0x01	; 1
 15c:	cd 97       	sbiw	r24, 0x3d	; 61
 15e:	20 f4       	brcc	.+8      	; 0x168 <key_scanf+0x72>
		printf("You press the button is key5 \r\n");
 160:	8b e9       	ldi	r24, 0x9B	; 155
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
			

		if((value>=380)&&(value<=420))
 168:	ce 01       	movw	r24, r28
 16a:	8c 57       	subi	r24, 0x7C	; 124
 16c:	91 40       	sbci	r25, 0x01	; 1
 16e:	89 97       	sbiw	r24, 0x29	; 41
 170:	20 f4       	brcc	.+8      	; 0x17a <key_scanf+0x84>
		printf("You press the button is key6 \r\n");	
 172:	8a eb       	ldi	r24, 0xBA	; 186
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>

		if((value>=420)&&(value<=470))
 17a:	ce 01       	movw	r24, r28
 17c:	84 5a       	subi	r24, 0xA4	; 164
 17e:	91 40       	sbci	r25, 0x01	; 1
 180:	c3 97       	sbiw	r24, 0x33	; 51
 182:	20 f4       	brcc	.+8      	; 0x18c <key_scanf+0x96>
		printf("You press the button is key7 \r\n");	
 184:	89 ed       	ldi	r24, 0xD9	; 217
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>

		if((value>=470)&&(value<=530))
 18c:	ce 01       	movw	r24, r28
 18e:	86 5d       	subi	r24, 0xD6	; 214
 190:	91 40       	sbci	r25, 0x01	; 1
 192:	cd 97       	sbiw	r24, 0x3d	; 61
 194:	20 f4       	brcc	.+8      	; 0x19e <key_scanf+0xa8>
		printf("You press the button is key8 \r\n");
 196:	88 ef       	ldi	r24, 0xF8	; 248
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
			
		if((value>=530)&&(value<=600))
 19e:	ce 01       	movw	r24, r28
 1a0:	82 51       	subi	r24, 0x12	; 18
 1a2:	92 40       	sbci	r25, 0x02	; 2
 1a4:	87 34       	cpi	r24, 0x47	; 71
 1a6:	91 05       	cpc	r25, r1
 1a8:	20 f4       	brcc	.+8      	; 0x1b2 <key_scanf+0xbc>
		printf("You press the button is key9 \r\n");
 1aa:	87 e1       	ldi	r24, 0x17	; 23
 1ac:	92 e0       	ldi	r25, 0x02	; 2
 1ae:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
			
		if((value>=600)&&(value<=650))
 1b2:	ce 01       	movw	r24, r28
 1b4:	88 55       	subi	r24, 0x58	; 88
 1b6:	92 40       	sbci	r25, 0x02	; 2
 1b8:	c3 97       	sbiw	r24, 0x33	; 51
 1ba:	20 f4       	brcc	.+8      	; 0x1c4 <key_scanf+0xce>
		printf("You press the button is key10 \r\n");
 1bc:	86 e3       	ldi	r24, 0x36	; 54
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
			
		if((value>=650)&&(value<=700))
 1c4:	ce 01       	movw	r24, r28
 1c6:	8a 58       	subi	r24, 0x8A	; 138
 1c8:	92 40       	sbci	r25, 0x02	; 2
 1ca:	c3 97       	sbiw	r24, 0x33	; 51
 1cc:	20 f4       	brcc	.+8      	; 0x1d6 <key_scanf+0xe0>
		printf("You press the button is key11 \r\n");
 1ce:	86 e5       	ldi	r24, 0x56	; 86
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>

		if((value>=700)&&(value<=760))
 1d6:	ce 01       	movw	r24, r28
 1d8:	8c 5b       	subi	r24, 0xBC	; 188
 1da:	92 40       	sbci	r25, 0x02	; 2
 1dc:	cd 97       	sbiw	r24, 0x3d	; 61
 1de:	20 f4       	brcc	.+8      	; 0x1e8 <key_scanf+0xf2>
		printf("You press the button is key12 \r\n");	
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>

		if((value>=760)&&(value<=830))
 1e8:	ce 01       	movw	r24, r28
 1ea:	88 5f       	subi	r24, 0xF8	; 248
 1ec:	92 40       	sbci	r25, 0x02	; 2
 1ee:	87 34       	cpi	r24, 0x47	; 71
 1f0:	91 05       	cpc	r25, r1
 1f2:	20 f4       	brcc	.+8      	; 0x1fc <key_scanf+0x106>
		printf("You press the button is key13 \r\n");	
 1f4:	86 e9       	ldi	r24, 0x96	; 150
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>

		if((value>=830)&&(value<=890))
 1fc:	ce 01       	movw	r24, r28
 1fe:	8e 53       	subi	r24, 0x3E	; 62
 200:	93 40       	sbci	r25, 0x03	; 3
 202:	cd 97       	sbiw	r24, 0x3d	; 61
 204:	20 f4       	brcc	.+8      	; 0x20e <key_scanf+0x118>
		printf("You press the button is key14 \r\n");
 206:	86 eb       	ldi	r24, 0xB6	; 182
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
			
		if((value>=890)&&(value<=940))
 20e:	ca 57       	subi	r28, 0x7A	; 122
 210:	d3 40       	sbci	r29, 0x03	; 3
 212:	e3 97       	sbiw	r28, 0x33	; 51
 214:	20 f4       	brcc	.+8      	; 0x21e <key_scanf+0x128>
		printf("You press the button is key15 \r\n");
 216:	86 ed       	ldi	r24, 0xD6	; 214
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <main>:
void ADC_Init(void);
unsigned int ad_getdata(void);
void key_scanf(unsigned int value);

int main(void)
{
 224:	1f 93       	push	r17
	unsigned int AD_value;
	unsigned char i;
	DDRA=0XFF;
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	8a bb       	out	0x1a, r24	; 26
	PORTA=0X55;
 22a:	85 e5       	ldi	r24, 0x55	; 85
 22c:	8b bb       	out	0x1b, r24	; 27
	usartInit();
 22e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <usartInit>
}


void ADC_Init(void)
{
    DDRA&=~(1<<PA0);      //PA0 Set to input, became great resistance, high resistance state
 232:	d0 98       	cbi	0x1a, 0	; 26
    SFIOR =0;              //Continuous conversion mode 
 234:	10 bc       	out	0x20, r1	; 32
    ADMUX=0X40;            //AVCC£¬AREF Pins plus filter capacitance
 236:	80 e4       	ldi	r24, 0x40	; 64
 238:	87 b9       	out	0x07, r24	; 7
	DDRA=0XFF;
	PORTA=0X55;
	usartInit();
	ADC_Init();

	printf("*--------------------------------------------* \r\n");
 23a:	86 ef       	ldi	r24, 0xF6	; 246
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
	printf("www.waveshare.net \r\n");
 242:	87 e2       	ldi	r24, 0x27	; 39
 244:	93 e0       	ldi	r25, 0x03	; 3
 246:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
	printf("ADC Test procedure \r\n");
 24a:	8b e3       	ldi	r24, 0x3B	; 59
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
	printf("*--------------------------------------------* \r\n");
 252:	86 ef       	ldi	r24, 0xF6	; 246
 254:	92 e0       	ldi	r25, 0x02	; 2
 256:	0e 94 79 01 	call	0x2f2	; 0x2f2 <puts>
 25a:	10 e0       	ldi	r17, 0x00	; 0
 25c:	03 c0       	rjmp	.+6      	; 0x264 <main+0x40>
	while(1)
	{


		for(i=0;i<200;i++)
		AD_value=ad_getdata();
 25e:	0e 94 6c 00 	call	0xd8	; 0xd8 <ad_getdata>
	printf("*--------------------------------------------* \r\n");
	while(1)
	{


		for(i=0;i<200;i++)
 262:	1f 5f       	subi	r17, 0xFF	; 255
 264:	18 3c       	cpi	r17, 0xC8	; 200
 266:	d8 f3       	brcs	.-10     	; 0x25e <main+0x3a>
		AD_value=ad_getdata();
		key_scanf(AD_value);
 268:	0e 94 7b 00 	call	0xf6	; 0xf6 <key_scanf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	8f e3       	ldi	r24, 0x3F	; 63
 26e:	9d e0       	ldi	r25, 0x0D	; 13
 270:	a3 e0       	ldi	r26, 0x03	; 3
 272:	81 50       	subi	r24, 0x01	; 1
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	a0 40       	sbci	r26, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <main+0x4e>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x58>
 27c:	00 00       	nop
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	ee cf       	rjmp	.-36     	; 0x25e <main+0x3a>

00000282 <uart_putchar>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE); 


//From RS232 sends a byte
static int uart_putchar(char c, FILE *stream)    
{ 
 282:	1f 93       	push	r17
 284:	18 2f       	mov	r17, r24
  if (c == '\n')        
 286:	8a 30       	cpi	r24, 0x0A	; 10
 288:	19 f4       	brne	.+6      	; 0x290 <uart_putchar+0xe>
  uart_putchar('\r', stream);      
 28a:	8d e0       	ldi	r24, 0x0D	; 13
 28c:	0e 94 41 01 	call	0x282	; 0x282 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);      
 290:	5d 9b       	sbis	0x0b, 5	; 11
 292:	fe cf       	rjmp	.-4      	; 0x290 <uart_putchar+0xe>
  UDR0 = c;      
 294:	1c b9       	out	0x0c, r17	; 12
  return 0;    
} 
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	1f 91       	pop	r17
 29c:	08 95       	ret

0000029e <putUsart0>:

void putUsart0(unsigned char c)
{ 
	while(!(WS_UCSR0A & 0x20));
 29e:	5d 9b       	sbis	0x0b, 5	; 11
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <putUsart0>
	WS_UDR0 = c;
 2a2:	8c b9       	out	0x0c, r24	; 12
}
 2a4:	08 95       	ret

000002a6 <getUsart0>:
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 2a6:	5f 9b       	sbis	0x0b, 7	; 11
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <getUsart0+0x12>
    status = WS_UCSR0A;
 2aa:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 2ac:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 2ae:	8c 71       	andi	r24, 0x1C	; 28
 2b0:	19 f4       	brne	.+6      	; 0x2b8 <getUsart0+0x12>
    return res;
 2b2:	29 2f       	mov	r18, r25
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <getUsart0+0x16>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	3f ef       	ldi	r19, 0xFF	; 255
}
 2bc:	c9 01       	movw	r24, r18
 2be:	08 95       	ret

000002c0 <waitUsart0>:
}
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 2c0:	5f 9b       	sbis	0x0b, 7	; 11
 2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <waitUsart0>
    status = WS_UCSR0A;
 2c4:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 2c6:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 2c8:	8c 71       	andi	r24, 0x1C	; 28
 2ca:	d1 f7       	brne	.-12     	; 0x2c0 <waitUsart0>
unsigned char waitUsart0(void)
{
    unsigned int c;
    while((c=getUsart0())==0xFFFF);
    return (unsigned char)c;
}
 2cc:	89 2f       	mov	r24, r25
 2ce:	08 95       	ret

000002d0 <usartInit>:
	// USART0 Receiver: On
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud Rate: 9600
	//
	UCSR0A=0x00;
 2d0:	1b b8       	out	0x0b, r1	; 11
	UCSR0B=0x98;
 2d2:	88 e9       	ldi	r24, 0x98	; 152
 2d4:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=0x06;
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	80 93 95 00 	sts	0x0095, r24
	UBRR0H=0x00;
 2dc:	10 92 90 00 	sts	0x0090, r1
	UBRR0L=0x2F;
 2e0:	8f e2       	ldi	r24, 0x2F	; 47
 2e2:	89 b9       	out	0x09, r24	; 9
	stdout = &mystdout;       //Must add 
 2e4:	80 e5       	ldi	r24, 0x50	; 80
 2e6:	93 e0       	ldi	r25, 0x03	; 3
 2e8:	90 93 61 03 	sts	0x0361, r25
 2ec:	80 93 60 03 	sts	0x0360, r24
}
 2f0:	08 95       	ret

000002f2 <puts>:
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	8c 01       	movw	r16, r24
 2fc:	e0 91 60 03 	lds	r30, 0x0360
 300:	f0 91 61 03 	lds	r31, 0x0361
 304:	83 81       	ldd	r24, Z+3	; 0x03
 306:	81 ff       	sbrs	r24, 1
 308:	21 c0       	rjmp	.+66     	; 0x34c <puts+0x5a>
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	d0 e0       	ldi	r29, 0x00	; 0
 30e:	0d c0       	rjmp	.+26     	; 0x32a <puts+0x38>
 310:	e0 91 60 03 	lds	r30, 0x0360
 314:	f0 91 61 03 	lds	r31, 0x0361
 318:	20 85       	ldd	r18, Z+8	; 0x08
 31a:	31 85       	ldd	r19, Z+9	; 0x09
 31c:	bf 01       	movw	r22, r30
 31e:	f9 01       	movw	r30, r18
 320:	09 95       	icall
 322:	89 2b       	or	r24, r25
 324:	11 f0       	breq	.+4      	; 0x32a <puts+0x38>
 326:	cf ef       	ldi	r28, 0xFF	; 255
 328:	df ef       	ldi	r29, 0xFF	; 255
 32a:	f8 01       	movw	r30, r16
 32c:	81 91       	ld	r24, Z+
 32e:	8f 01       	movw	r16, r30
 330:	88 23       	and	r24, r24
 332:	71 f7       	brne	.-36     	; 0x310 <puts+0x1e>
 334:	e0 91 60 03 	lds	r30, 0x0360
 338:	f0 91 61 03 	lds	r31, 0x0361
 33c:	20 85       	ldd	r18, Z+8	; 0x08
 33e:	31 85       	ldd	r19, Z+9	; 0x09
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	bf 01       	movw	r22, r30
 344:	f9 01       	movw	r30, r18
 346:	09 95       	icall
 348:	89 2b       	or	r24, r25
 34a:	11 f0       	breq	.+4      	; 0x350 <puts+0x5e>
 34c:	cf ef       	ldi	r28, 0xFF	; 255
 34e:	df ef       	ldi	r29, 0xFF	; 255
 350:	ce 01       	movw	r24, r28
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
