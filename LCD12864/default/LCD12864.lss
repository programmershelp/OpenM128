
LCD12864.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000548  000005dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000548  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800126  00800126  00000602  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000602  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ac  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a6  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a1  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057e  00000000  00000000  00000d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b0  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e8  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 32       	cpi	r26, 0x26	; 38
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 36       	cpi	r26, 0x66	; 102
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 23 02 	call	0x446	; 0x446 <main>
  c6:	0c 94 84 02 	jmp	0x508	; 0x508 <exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spiSendChar>:
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  ce:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <spiSendChar+0x2>
}
  d4:	08 95       	ret

000000d6 <sendCodeST7920>:
*	给LCD控制芯片ST7920发送指令的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
  d6:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  d8:	88 ef       	ldi	r24, 0xF8	; 248
  da:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  dc:	77 9b       	sbis	0x0e, 7	; 14
  de:	fe cf       	rjmp	.-4      	; 0xdc <sendCodeST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
  e0:	89 2f       	mov	r24, r25
  e2:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  e4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
  e6:	77 9b       	sbis	0x0e, 7	; 14
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <sendCodeST7920+0x10>
*/
void sendCodeST7920(uint8_t code)
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
  ea:	92 95       	swap	r25
  ec:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  ee:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
  f0:	77 9b       	sbis	0x0e, 7	; 14
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <sendCodeST7920+0x1a>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  f4:	88 eb       	ldi	r24, 0xB8	; 184
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <sendCodeST7920+0x20>
{
	spiSendChar(0xF8);
	spiSendChar(code & 0xF0);
	spiSendChar((code<<4));
	LCD_DELAY();
}
  fa:	08 95       	ret

000000fc <sendDataST7920>:
*	给LCD控制芯片ST7920发送数据的函数
*
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
  fc:	98 2f       	mov	r25, r24
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
  fe:	8a ef       	ldi	r24, 0xFA	; 250
 100:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 102:	77 9b       	sbis	0x0e, 7	; 14
 104:	fe cf       	rjmp	.-4      	; 0x102 <sendDataST7920+0x6>
*-------------------------------------------------------------------------------------------------------
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
 106:	89 2f       	mov	r24, r25
 108:	80 7f       	andi	r24, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 10a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 10c:	77 9b       	sbis	0x0e, 7	; 14
 10e:	fe cf       	rjmp	.-4      	; 0x10c <sendDataST7920+0x10>
*/
void sendDataST7920(uint8_t data)
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
 110:	92 95       	swap	r25
 112:	90 7f       	andi	r25, 0xF0	; 240
*
*-------------------------------------------------------------------------------------------------------
*/
void spiSendChar(uint8_t send_char)
{
	SPDR = send_char;
 114:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));
 116:	77 9b       	sbis	0x0e, 7	; 14
 118:	fe cf       	rjmp	.-4      	; 0x116 <sendDataST7920+0x1a>
 11a:	88 eb       	ldi	r24, 0xB8	; 184
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <sendDataST7920+0x20>
{
	spiSendChar(0xFA);
	spiSendChar(data & 0xF0);
	spiSendChar((data<<4));
	LCD_DELAY();
}
 120:	08 95       	ret

00000122 <refreshLCD>:
*	*lcd_stack指向用于刷新LCD的数据栈,需64byte容量
*
*-------------------------------------------------------------------------------------------------------
*/
void refreshLCD(const uint8_t *lcd_stack)
{
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	6c 01       	movw	r12, r24
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendCodeST7920>
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d0 e0       	ldi	r29, 0x00	; 0
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 13e:	f6 01       	movw	r30, r12
 140:	ec 0f       	add	r30, r28
 142:	fd 1f       	adc	r31, r29
 144:	80 81       	ld	r24, Z
 146:	0e 94 7e 00 	call	0xfc	; 0xfc <sendDataST7920>
 14a:	21 96       	adiw	r28, 0x01	; 1
*/
void refreshLCD(const uint8_t *lcd_stack)
{
	uint8_t addr;
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
 14c:	c0 31       	cpi	r28, 0x10	; 16
 14e:	d1 05       	cpc	r29, r1
 150:	b1 f7       	brne	.-20     	; 0x13e <refreshLCD+0x1c>
 152:	76 01       	movw	r14, r12
 154:	e6 01       	movw	r28, r12
 156:	00 e2       	ldi	r16, 0x20	; 32
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 158:	88 a1       	ldd	r24, Y+32	; 0x20
 15a:	0e 94 7e 00 	call	0xfc	; 0xfc <sendDataST7920>
	sendCodeST7920(0x02);	/*地址归位*/
	for(addr=0;addr < 16;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=32;addr < 48;addr++)
 15e:	0f 5f       	subi	r16, 0xFF	; 255
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	00 33       	cpi	r16, 0x30	; 48
 164:	c9 f7       	brne	.-14     	; 0x158 <refreshLCD+0x36>
 166:	10 e1       	ldi	r17, 0x10	; 16
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 168:	f7 01       	movw	r30, r14
 16a:	80 89       	ldd	r24, Z+16	; 0x10
 16c:	0e 94 7e 00 	call	0xfc	; 0xfc <sendDataST7920>
	}
	for(addr=32;addr < 48;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	for(addr=16;addr < 32;addr++)
 170:	1f 5f       	subi	r17, 0xFF	; 255
 172:	08 94       	sec
 174:	e1 1c       	adc	r14, r1
 176:	f1 1c       	adc	r15, r1
 178:	10 32       	cpi	r17, 0x20	; 32
 17a:	b1 f7       	brne	.-20     	; 0x168 <refreshLCD+0x46>
 17c:	e6 01       	movw	r28, r12
 17e:	e0 96       	adiw	r28, 0x30	; 48
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
 180:	89 91       	ld	r24, Y+
 182:	0e 94 7e 00 	call	0xfc	; 0xfc <sendDataST7920>
	for(addr=16;addr < 32;addr++)
	{
		sendDataST7920(*(lcd_stack + addr));
	}
	
	for(addr=48;addr < 64;addr++)
 186:	0f 5f       	subi	r16, 0xFF	; 255
 188:	00 34       	cpi	r16, 0x40	; 64
 18a:	d1 f7       	brne	.-12     	; 0x180 <refreshLCD+0x5e>
	{
		sendDataST7920(*(lcd_stack + addr));
	}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	08 95       	ret

0000019e <decToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
 19e:	1f 93       	push	r17
 1a0:	fc 01       	movw	r30, r24
 1a2:	9b 01       	movw	r18, r22
			case 1:
			{
				*str = (dec+'0');
				break;
			}
			default: *str = '0';
 1a4:	10 e3       	ldi	r17, 0x30	; 48
 1a6:	43 c0       	rjmp	.+134    	; 0x22e <decToAscii+0x90>
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
	{
		switch(width)
 1a8:	43 30       	cpi	r20, 0x03	; 3
 1aa:	21 f1       	breq	.+72     	; 0x1f4 <decToAscii+0x56>
 1ac:	44 30       	cpi	r20, 0x04	; 4
 1ae:	28 f4       	brcc	.+10     	; 0x1ba <decToAscii+0x1c>
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	b1 f1       	breq	.+108    	; 0x220 <decToAscii+0x82>
 1b4:	42 30       	cpi	r20, 0x02	; 2
 1b6:	c1 f5       	brne	.+112    	; 0x228 <decToAscii+0x8a>
 1b8:	28 c0       	rjmp	.+80     	; 0x20a <decToAscii+0x6c>
 1ba:	44 30       	cpi	r20, 0x04	; 4
 1bc:	69 f0       	breq	.+26     	; 0x1d8 <decToAscii+0x3a>
 1be:	45 30       	cpi	r20, 0x05	; 5
 1c0:	99 f5       	brne	.+102    	; 0x228 <decToAscii+0x8a>
		{
			case 5:
			{
				*str = (dec/10000+'0');
 1c2:	c9 01       	movw	r24, r18
 1c4:	60 e1       	ldi	r22, 0x10	; 16
 1c6:	77 e2       	ldi	r23, 0x27	; 39
 1c8:	0e 94 8e 02 	call	0x51c	; 0x51c <__udivmodhi4>
 1cc:	60 5d       	subi	r22, 0xD0	; 208
 1ce:	60 83       	st	Z, r22
				dec%=10000;
 1d0:	c9 01       	movw	r24, r18
 1d2:	60 e1       	ldi	r22, 0x10	; 16
 1d4:	77 e2       	ldi	r23, 0x27	; 39
 1d6:	0a c0       	rjmp	.+20     	; 0x1ec <decToAscii+0x4e>
				break;
			}			
			case 4:
			{
				*str = (dec/1000+'0');
 1d8:	c9 01       	movw	r24, r18
 1da:	68 ee       	ldi	r22, 0xE8	; 232
 1dc:	73 e0       	ldi	r23, 0x03	; 3
 1de:	0e 94 8e 02 	call	0x51c	; 0x51c <__udivmodhi4>
 1e2:	60 5d       	subi	r22, 0xD0	; 208
 1e4:	60 83       	st	Z, r22
				dec%=1000;
 1e6:	c9 01       	movw	r24, r18
 1e8:	68 ee       	ldi	r22, 0xE8	; 232
 1ea:	73 e0       	ldi	r23, 0x03	; 3
 1ec:	0e 94 8e 02 	call	0x51c	; 0x51c <__udivmodhi4>
 1f0:	9c 01       	movw	r18, r24
 1f2:	1b c0       	rjmp	.+54     	; 0x22a <decToAscii+0x8c>
				break;
			}
			case 3:
			{
				*str = (dec/100+'0');
 1f4:	c9 01       	movw	r24, r18
 1f6:	64 e6       	ldi	r22, 0x64	; 100
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	0e 94 8e 02 	call	0x51c	; 0x51c <__udivmodhi4>
 1fe:	60 5d       	subi	r22, 0xD0	; 208
 200:	60 83       	st	Z, r22
				dec%=100;
 202:	c9 01       	movw	r24, r18
 204:	64 e6       	ldi	r22, 0x64	; 100
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	f1 cf       	rjmp	.-30     	; 0x1ec <decToAscii+0x4e>
				break;
			}
			case 2:
			{
				*str = (dec/10+'0');
 20a:	c9 01       	movw	r24, r18
 20c:	6a e0       	ldi	r22, 0x0A	; 10
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	0e 94 8e 02 	call	0x51c	; 0x51c <__udivmodhi4>
 214:	60 5d       	subi	r22, 0xD0	; 208
 216:	60 83       	st	Z, r22
				dec%=10;
 218:	c9 01       	movw	r24, r18
 21a:	6a e0       	ldi	r22, 0x0A	; 10
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	e6 cf       	rjmp	.-52     	; 0x1ec <decToAscii+0x4e>
				break;
			}
			case 1:
			{
				*str = (dec+'0');
 220:	20 5d       	subi	r18, 0xD0	; 208
 222:	20 83       	st	Z, r18
 224:	20 53       	subi	r18, 0x30	; 48
 226:	01 c0       	rjmp	.+2      	; 0x22a <decToAscii+0x8c>
				break;
			}
			default: *str = '0';
 228:	10 83       	st	Z, r17
		}
		width--;
 22a:	41 50       	subi	r20, 0x01	; 1
		str++;
 22c:	31 96       	adiw	r30, 0x01	; 1
*
*-------------------------------------------------------------------------------------------------------
*/
void decToAscii(uint8_t* str,uint16_t dec,uint8_t width)
{
	while(width)
 22e:	44 23       	and	r20, r20
 230:	09 f0       	breq	.+2      	; 0x234 <decToAscii+0x96>
 232:	ba cf       	rjmp	.-140    	; 0x1a8 <decToAscii+0xa>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 234:	1f 91       	pop	r17
 236:	08 95       	ret

00000238 <hexToAscii>:
*	width是转换成ASCII后的宽度(高位填充'0')
*
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
 238:	cf 92       	push	r12
 23a:	df 92       	push	r13
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	fc 01       	movw	r30, r24
	{
		switch(width)
		{		
			case 4:
			{
				tmp=(hex>>12);
 24a:	eb 01       	movw	r28, r22
 24c:	cd 2f       	mov	r28, r29
 24e:	dd 27       	eor	r29, r29
 250:	c2 95       	swap	r28
 252:	cf 70       	andi	r28, 0x0F	; 15
				if(tmp>9) *str = tmp+('A'-10);
 254:	27 e3       	ldi	r18, 0x37	; 55
 256:	d2 2e       	mov	r13, r18
 258:	dc 0e       	add	r13, r28
				else *str = tmp+'0';
 25a:	90 e3       	ldi	r25, 0x30	; 48
 25c:	e9 2e       	mov	r14, r25
 25e:	ec 0e       	add	r14, r28
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
 260:	a7 2f       	mov	r26, r23
 262:	bb 27       	eor	r27, r27
 264:	af 70       	andi	r26, 0x0F	; 15
 266:	b0 70       	andi	r27, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 268:	17 e3       	ldi	r17, 0x37	; 55
 26a:	f1 2e       	mov	r15, r17
 26c:	fa 0e       	add	r15, r26
				else *str = tmp+'0';
 26e:	0a 2f       	mov	r16, r26
 270:	00 5d       	subi	r16, 0xD0	; 208
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
 272:	9b 01       	movw	r18, r22
 274:	54 e0       	ldi	r21, 0x04	; 4
 276:	36 95       	lsr	r19
 278:	27 95       	ror	r18
 27a:	5a 95       	dec	r21
 27c:	e1 f7       	brne	.-8      	; 0x276 <hexToAscii+0x3e>
 27e:	2f 70       	andi	r18, 0x0F	; 15
 280:	30 70       	andi	r19, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
 282:	82 2f       	mov	r24, r18
 284:	12 2f       	mov	r17, r18
 286:	19 5c       	subi	r17, 0xC9	; 201
				else *str = tmp+'0';
 288:	80 5d       	subi	r24, 0xD0	; 208
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
				break;
			}
			default: *str = '0';
 28a:	90 e3       	ldi	r25, 0x30	; 48
 28c:	c9 2e       	mov	r12, r25
				else *str = tmp+'0';
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
 28e:	6f 70       	andi	r22, 0x0F	; 15
 290:	70 70       	andi	r23, 0x00	; 0
				if(tmp>9) *str = tmp+('A'-10);
				else *str = tmp+'0';
 292:	56 2f       	mov	r21, r22
 294:	50 5d       	subi	r21, 0xD0	; 208
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 296:	96 2f       	mov	r25, r22
 298:	99 5c       	subi	r25, 0xC9	; 201
 29a:	2a c0       	rjmp	.+84     	; 0x2f0 <hexToAscii+0xb8>
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
	{
		switch(width)
 29c:	42 30       	cpi	r20, 0x02	; 2
 29e:	b9 f0       	breq	.+46     	; 0x2ce <hexToAscii+0x96>
 2a0:	43 30       	cpi	r20, 0x03	; 3
 2a2:	18 f4       	brcc	.+6      	; 0x2aa <hexToAscii+0x72>
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	09 f5       	brne	.+66     	; 0x2ea <hexToAscii+0xb2>
 2a8:	19 c0       	rjmp	.+50     	; 0x2dc <hexToAscii+0xa4>
 2aa:	43 30       	cpi	r20, 0x03	; 3
 2ac:	49 f0       	breq	.+18     	; 0x2c0 <hexToAscii+0x88>
 2ae:	44 30       	cpi	r20, 0x04	; 4
 2b0:	e1 f4       	brne	.+56     	; 0x2ea <hexToAscii+0xb2>
		{		
			case 4:
			{
				tmp=(hex>>12);
				if(tmp>9) *str = tmp+('A'-10);
 2b2:	ca 30       	cpi	r28, 0x0A	; 10
 2b4:	d1 05       	cpc	r29, r1
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <hexToAscii+0x84>
 2b8:	d0 82       	st	Z, r13
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <hexToAscii+0xb4>
				else *str = tmp+'0';
 2bc:	e0 82       	st	Z, r14
 2be:	16 c0       	rjmp	.+44     	; 0x2ec <hexToAscii+0xb4>
				break;
			}
			case 3:
			{
				tmp=(hex>>8)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2c0:	aa 30       	cpi	r26, 0x0A	; 10
 2c2:	b1 05       	cpc	r27, r1
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <hexToAscii+0x92>
 2c6:	f0 82       	st	Z, r15
 2c8:	11 c0       	rjmp	.+34     	; 0x2ec <hexToAscii+0xb4>
				else *str = tmp+'0';
 2ca:	00 83       	st	Z, r16
 2cc:	0f c0       	rjmp	.+30     	; 0x2ec <hexToAscii+0xb4>
				break;
			}
			case 2:
			{
				tmp=(hex>>4)&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2ce:	2a 30       	cpi	r18, 0x0A	; 10
 2d0:	31 05       	cpc	r19, r1
 2d2:	10 f0       	brcs	.+4      	; 0x2d8 <hexToAscii+0xa0>
 2d4:	10 83       	st	Z, r17
 2d6:	0a c0       	rjmp	.+20     	; 0x2ec <hexToAscii+0xb4>
				else *str = tmp+'0';
 2d8:	80 83       	st	Z, r24
 2da:	08 c0       	rjmp	.+16     	; 0x2ec <hexToAscii+0xb4>
				break;
			}
			case 1:
			{
				tmp=hex&0x000F;
				if(tmp>9) *str = tmp+('A'-10);
 2dc:	6a 30       	cpi	r22, 0x0A	; 10
 2de:	71 05       	cpc	r23, r1
 2e0:	10 f0       	brcs	.+4      	; 0x2e6 <hexToAscii+0xae>
 2e2:	90 83       	st	Z, r25
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <hexToAscii+0xb4>
				else *str = tmp+'0';
 2e6:	50 83       	st	Z, r21
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <hexToAscii+0xb4>
				break;
			}
			default: *str = '0';
 2ea:	c0 82       	st	Z, r12
		}
		width--;
 2ec:	41 50       	subi	r20, 0x01	; 1
		str++;
 2ee:	31 96       	adiw	r30, 0x01	; 1
*-------------------------------------------------------------------------------------------------------
*/
void hexToAscii(uint8_t* str,uint16_t hex,uint8_t width)
{
	uint16_t tmp;
	while(width)
 2f0:	44 23       	and	r20, r20
 2f2:	a1 f6       	brne	.-88     	; 0x29c <hexToAscii+0x64>
			default: *str = '0';
		}
		width--;
		str++;
	}
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	08 95       	ret

00000306 <st7920LcdInit>:
#define CLR_CS_LCD() cbi(PORTB,4)
#define OUT_CS_LCD() sbi(DDRB,4)

void st7920LcdInit(void)
{
DDRB|=0x87;
 306:	87 b3       	in	r24, 0x17	; 23
 308:	87 68       	ori	r24, 0x87	; 135
 30a:	87 bb       	out	0x17, r24	; 23
PORTB|=0xF8;
 30c:	88 b3       	in	r24, 0x18	; 24
 30e:	88 6f       	ori	r24, 0xF8	; 248
 310:	88 bb       	out	0x18, r24	; 24
// SPI Type: Master
// SPI Clock Rate: 2*1843.200 kHz
// SPI Clock Phase: Cycle Half
// SPI Clock Polarity: Low
// SPI Data Order: MSB First
SPCR=0x50;
 312:	80 e5       	ldi	r24, 0x50	; 80
 314:	8d b9       	out	0x0d, r24	; 13
SPSR=0x01;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	8e b9       	out	0x0e, r24	; 14
sendCodeST7920(0x0C);//整体显示
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendCodeST7920>
sendCodeST7920(0x01);//清屏
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 6b 00 	call	0xd6	; 0xd6 <sendCodeST7920>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 326:	86 e6       	ldi	r24, 0x66	; 102
 328:	9e e0       	ldi	r25, 0x0E	; 14
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <st7920LcdInit+0x24>
_delay_ms(2);
memset(lcd_buffer,' ',sizeof(lcd_buffer));
 32e:	86 e2       	ldi	r24, 0x26	; 38
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	60 e2       	ldi	r22, 0x20	; 32
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	40 e4       	ldi	r20, 0x40	; 64
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	0e 94 87 02 	call	0x50e	; 0x50e <memset>
}
 33e:	08 95       	ret

00000340 <showLine>:
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 340:	af 92       	push	r10
 342:	bf 92       	push	r11
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	df 93       	push	r29
 350:	cf 93       	push	r28
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	0d 85       	ldd	r16, Y+13	; 0x0d
 358:	ae 84       	ldd	r10, Y+14	; 0x0e
 35a:	bf 84       	ldd	r11, Y+15	; 0x0f
 35c:	e8 88       	ldd	r14, Y+16	; 0x10
 35e:	f9 88       	ldd	r15, Y+17	; 0x11
	uint8_t coordinate = 16*y + x;
 360:	02 95       	swap	r16
 362:	00 7f       	andi	r16, 0xF0	; 240
 364:	8c 85       	ldd	r24, Y+12	; 0x0c
 366:	08 0f       	add	r16, r24
*	*str指向用于将要显示的内容
*
*-------------------------------------------------------------------------------------------------------
*/
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
 368:	de 01       	movw	r26, r28
 36a:	52 96       	adiw	r26, 0x12	; 18
 36c:	5d c0       	rjmp	.+186    	; 0x428 <showLine+0xe8>
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
	{
		if(coordinate>64) break;	/*防止堆栈溢出*/
 36e:	01 34       	cpi	r16, 0x41	; 65
 370:	08 f0       	brcs	.+2      	; 0x374 <showLine+0x34>
 372:	5f c0       	rjmp	.+190    	; 0x432 <showLine+0xf2>

		if(*str == '\\')
 374:	8c 35       	cpi	r24, 0x5C	; 92
 376:	51 f4       	brne	.+20     	; 0x38c <showLine+0x4c>
		{
			str++;
 378:	08 94       	sec
 37a:	e1 1c       	adc	r14, r1
 37c:	f1 1c       	adc	r15, r1
			lcd_stack[coordinate] = *str;
 37e:	95 01       	movw	r18, r10
 380:	20 0f       	add	r18, r16
 382:	31 1d       	adc	r19, r1
 384:	f7 01       	movw	r30, r14
 386:	80 81       	ld	r24, Z
 388:	f9 01       	movw	r30, r18
 38a:	49 c0       	rjmp	.+146    	; 0x41e <showLine+0xde>
		}
		else if(*str == '%')
 38c:	85 32       	cpi	r24, 0x25	; 37
 38e:	09 f0       	breq	.+2      	; 0x392 <showLine+0x52>
 390:	43 c0       	rjmp	.+134    	; 0x418 <showLine+0xd8>
		{
			str++;
 392:	08 94       	sec
 394:	e1 1c       	adc	r14, r1
 396:	f1 1c       	adc	r15, r1
			if (*str=='d'||*str=='D')
 398:	f7 01       	movw	r30, r14
 39a:	80 81       	ld	r24, Z
 39c:	84 36       	cpi	r24, 0x64	; 100
 39e:	11 f0       	breq	.+4      	; 0x3a4 <showLine+0x64>
 3a0:	84 34       	cpi	r24, 0x44	; 68
 3a2:	99 f4       	brne	.+38     	; 0x3ca <showLine+0x8a>
			{
				str++;
 3a4:	08 94       	sec
 3a6:	e1 1c       	adc	r14, r1
 3a8:	f1 1c       	adc	r15, r1
				decToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3aa:	52 e0       	ldi	r21, 0x02	; 2
 3ac:	c5 2e       	mov	r12, r21
 3ae:	d1 2c       	mov	r13, r1
 3b0:	ca 0e       	add	r12, r26
 3b2:	db 1e       	adc	r13, r27
 3b4:	6d 91       	ld	r22, X+
 3b6:	7c 91       	ld	r23, X
 3b8:	f7 01       	movw	r30, r14
 3ba:	40 81       	ld	r20, Z
 3bc:	40 53       	subi	r20, 0x30	; 48
 3be:	c5 01       	movw	r24, r10
 3c0:	80 0f       	add	r24, r16
 3c2:	91 1d       	adc	r25, r1
 3c4:	0e 94 cf 00 	call	0x19e	; 0x19e <decToAscii>
 3c8:	21 c0       	rjmp	.+66     	; 0x40c <showLine+0xcc>
				coordinate+=(*str-'0'-1);
			}
			else if(*str=='c'||*str=='C')
 3ca:	83 36       	cpi	r24, 0x63	; 99
 3cc:	11 f0       	breq	.+4      	; 0x3d2 <showLine+0x92>
 3ce:	83 34       	cpi	r24, 0x43	; 67
 3d0:	39 f4       	brne	.+14     	; 0x3e0 <showLine+0xa0>
			{
				lcd_stack[coordinate] = va_arg(marker,uint16_t);
 3d2:	f5 01       	movw	r30, r10
 3d4:	e0 0f       	add	r30, r16
 3d6:	f1 1d       	adc	r31, r1
 3d8:	8c 91       	ld	r24, X
 3da:	80 83       	st	Z, r24
 3dc:	12 96       	adiw	r26, 0x02	; 2
 3de:	20 c0       	rjmp	.+64     	; 0x420 <showLine+0xe0>
			}
			else if(*str=='x'||*str=='X')
 3e0:	88 37       	cpi	r24, 0x78	; 120
 3e2:	11 f0       	breq	.+4      	; 0x3e8 <showLine+0xa8>
 3e4:	88 35       	cpi	r24, 0x58	; 88
 3e6:	e1 f4       	brne	.+56     	; 0x420 <showLine+0xe0>
			{
				str++;
 3e8:	08 94       	sec
 3ea:	e1 1c       	adc	r14, r1
 3ec:	f1 1c       	adc	r15, r1
				hexToAscii(&lcd_stack[coordinate],va_arg(marker,uint16_t),(*str-'0'));
 3ee:	42 e0       	ldi	r20, 0x02	; 2
 3f0:	c4 2e       	mov	r12, r20
 3f2:	d1 2c       	mov	r13, r1
 3f4:	ca 0e       	add	r12, r26
 3f6:	db 1e       	adc	r13, r27
 3f8:	6d 91       	ld	r22, X+
 3fa:	7c 91       	ld	r23, X
 3fc:	f7 01       	movw	r30, r14
 3fe:	40 81       	ld	r20, Z
 400:	40 53       	subi	r20, 0x30	; 48
 402:	c5 01       	movw	r24, r10
 404:	80 0f       	add	r24, r16
 406:	91 1d       	adc	r25, r1
 408:	0e 94 1c 01 	call	0x238	; 0x238 <hexToAscii>
				coordinate+=(*str-'0'-1);
 40c:	01 53       	subi	r16, 0x31	; 49
 40e:	f7 01       	movw	r30, r14
 410:	80 81       	ld	r24, Z
 412:	08 0f       	add	r16, r24
 414:	d6 01       	movw	r26, r12
 416:	04 c0       	rjmp	.+8      	; 0x420 <showLine+0xe0>
			}
		}
		/*如有新的转义符指令请添加在这里*/
		else
		{
			lcd_stack[coordinate] = *str;
 418:	f5 01       	movw	r30, r10
 41a:	e0 0f       	add	r30, r16
 41c:	f1 1d       	adc	r31, r1
 41e:	80 83       	st	Z, r24
		}
		str++;
 420:	08 94       	sec
 422:	e1 1c       	adc	r14, r1
 424:	f1 1c       	adc	r15, r1
		coordinate++;
 426:	0f 5f       	subi	r16, 0xFF	; 255
void showLine(const uint8_t x,const uint8_t y,uint8_t* lcd_stack,char * str,...)
{
	uint8_t coordinate = 16*y + x;
	va_list marker;
	va_start(marker,str); /* Initialize variable arguments. */ 
	while(*str!='\0')
 428:	f7 01       	movw	r30, r14
 42a:	80 81       	ld	r24, Z
 42c:	88 23       	and	r24, r24
 42e:	09 f0       	breq	.+2      	; 0x432 <showLine+0xf2>
 430:	9e cf       	rjmp	.-196    	; 0x36e <showLine+0x2e>
		}
		str++;
		coordinate++;
	}
	va_end( marker ); /* Reset variable arguments. */ 
}
 432:	cf 91       	pop	r28
 434:	df 91       	pop	r29
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	ef 90       	pop	r14
 43c:	df 90       	pop	r13
 43e:	cf 90       	pop	r12
 440:	bf 90       	pop	r11
 442:	af 90       	pop	r10
 444:	08 95       	ret

00000446 <main>:
#define _DVK501_M128_EX_ 1
#include <avr/io.h>
#include "ws_lcd_ST7920_port.h"

int main(void)
{
 446:	bf 92       	push	r11
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	0f 93       	push	r16
 452:	1f 93       	push	r17
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
	st7920LcdInit(); /*LCD init*/
 458:	0e 94 83 01 	call	0x306	; 0x306 <st7920LcdInit>

	showLine(3,2,lcd_buffer,"waveshare");
 45c:	00 d0       	rcall	.+0      	; 0x45e <main+0x18>
 45e:	00 d0       	rcall	.+0      	; 0x460 <main+0x1a>
 460:	00 d0       	rcall	.+0      	; 0x462 <main+0x1c>
 462:	ed b7       	in	r30, 0x3d	; 61
 464:	fe b7       	in	r31, 0x3e	; 62
 466:	31 96       	adiw	r30, 0x01	; 1
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	ad b7       	in	r26, 0x3d	; 61
 46c:	be b7       	in	r27, 0x3e	; 62
 46e:	11 96       	adiw	r26, 0x01	; 1
 470:	8c 93       	st	X, r24
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	81 83       	std	Z+1, r24	; 0x01
 476:	06 e2       	ldi	r16, 0x26	; 38
 478:	11 e0       	ldi	r17, 0x01	; 1
 47a:	13 83       	std	Z+3, r17	; 0x03
 47c:	02 83       	std	Z+2, r16	; 0x02
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	95 83       	std	Z+5, r25	; 0x05
 484:	84 83       	std	Z+4, r24	; 0x04
 486:	0e 94 a0 01 	call	0x340	; 0x340 <showLine>
//	showLine(2,1,lcd_buffer,"深圳微雪电子");
//	showLine(2,2,lcd_buffer,"waveshare.net");

	refreshLCD(lcd_buffer); /*刷新LCD*/
 48a:	8d b7       	in	r24, 0x3d	; 61
 48c:	9e b7       	in	r25, 0x3e	; 62
 48e:	06 96       	adiw	r24, 0x06	; 6
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	9e bf       	out	0x3e, r25	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	8d bf       	out	0x3d, r24	; 61
 49a:	c8 01       	movw	r24, r16
 49c:	0e 94 91 00 	call	0x122	; 0x122 <refreshLCD>
	while(1)
	{
			showLine(2,1,lcd_buffer,"深圳微雪电子");
 4a0:	72 e0       	ldi	r23, 0x02	; 2
 4a2:	f7 2e       	mov	r15, r23
 4a4:	bb 24       	eor	r11, r11
 4a6:	b3 94       	inc	r11
 4a8:	e0 2e       	mov	r14, r16
 4aa:	01 2f       	mov	r16, r17
 4ac:	6a e0       	ldi	r22, 0x0A	; 10
 4ae:	c6 2e       	mov	r12, r22
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	d6 2e       	mov	r13, r22
			showLine(2,2,lcd_buffer,"waveshare.net");		
 4b4:	c7 e1       	ldi	r28, 0x17	; 23
 4b6:	d1 e0       	ldi	r29, 0x01	; 1
//	showLine(2,2,lcd_buffer,"waveshare.net");

	refreshLCD(lcd_buffer); /*刷新LCD*/
	while(1)
	{
			showLine(2,1,lcd_buffer,"深圳微雪电子");
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <main+0x74>
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <main+0x76>
 4bc:	00 d0       	rcall	.+0      	; 0x4be <main+0x78>
 4be:	ed b7       	in	r30, 0x3d	; 61
 4c0:	fe b7       	in	r31, 0x3e	; 62
 4c2:	31 96       	adiw	r30, 0x01	; 1
 4c4:	ad b7       	in	r26, 0x3d	; 61
 4c6:	be b7       	in	r27, 0x3e	; 62
 4c8:	11 96       	adiw	r26, 0x01	; 1
 4ca:	fc 92       	st	X, r15
 4cc:	b1 82       	std	Z+1, r11	; 0x01
 4ce:	e2 82       	std	Z+2, r14	; 0x02
 4d0:	03 83       	std	Z+3, r16	; 0x03
 4d2:	d5 82       	std	Z+5, r13	; 0x05
 4d4:	c4 82       	std	Z+4, r12	; 0x04
 4d6:	0e 94 a0 01 	call	0x340	; 0x340 <showLine>
			showLine(2,2,lcd_buffer,"waveshare.net");		
 4da:	ed b7       	in	r30, 0x3d	; 61
 4dc:	fe b7       	in	r31, 0x3e	; 62
 4de:	31 96       	adiw	r30, 0x01	; 1
 4e0:	ad b7       	in	r26, 0x3d	; 61
 4e2:	be b7       	in	r27, 0x3e	; 62
 4e4:	11 96       	adiw	r26, 0x01	; 1
 4e6:	fc 92       	st	X, r15
 4e8:	f1 82       	std	Z+1, r15	; 0x01
 4ea:	e2 82       	std	Z+2, r14	; 0x02
 4ec:	03 83       	std	Z+3, r16	; 0x03
 4ee:	d5 83       	std	Z+5, r29	; 0x05
 4f0:	c4 83       	std	Z+4, r28	; 0x04
 4f2:	0e 94 a0 01 	call	0x340	; 0x340 <showLine>
 4f6:	8d b7       	in	r24, 0x3d	; 61
 4f8:	9e b7       	in	r25, 0x3e	; 62
 4fa:	06 96       	adiw	r24, 0x06	; 6
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	9e bf       	out	0x3e, r25	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	8d bf       	out	0x3d, r24	; 61
 506:	d8 cf       	rjmp	.-80     	; 0x4b8 <main+0x72>

00000508 <exit>:
 508:	f8 94       	cli
 50a:	0c 94 a2 02 	jmp	0x544	; 0x544 <_exit>

0000050e <memset>:
 50e:	dc 01       	movw	r26, r24
 510:	01 c0       	rjmp	.+2      	; 0x514 <memset+0x6>
 512:	6d 93       	st	X+, r22
 514:	41 50       	subi	r20, 0x01	; 1
 516:	50 40       	sbci	r21, 0x00	; 0
 518:	e0 f7       	brcc	.-8      	; 0x512 <memset+0x4>
 51a:	08 95       	ret

0000051c <__udivmodhi4>:
 51c:	aa 1b       	sub	r26, r26
 51e:	bb 1b       	sub	r27, r27
 520:	51 e1       	ldi	r21, 0x11	; 17
 522:	07 c0       	rjmp	.+14     	; 0x532 <__udivmodhi4_ep>

00000524 <__udivmodhi4_loop>:
 524:	aa 1f       	adc	r26, r26
 526:	bb 1f       	adc	r27, r27
 528:	a6 17       	cp	r26, r22
 52a:	b7 07       	cpc	r27, r23
 52c:	10 f0       	brcs	.+4      	; 0x532 <__udivmodhi4_ep>
 52e:	a6 1b       	sub	r26, r22
 530:	b7 0b       	sbc	r27, r23

00000532 <__udivmodhi4_ep>:
 532:	88 1f       	adc	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	5a 95       	dec	r21
 538:	a9 f7       	brne	.-22     	; 0x524 <__udivmodhi4_loop>
 53a:	80 95       	com	r24
 53c:	90 95       	com	r25
 53e:	bc 01       	movw	r22, r24
 540:	cd 01       	movw	r24, r26
 542:	08 95       	ret

00000544 <_exit>:
 544:	f8 94       	cli

00000546 <__stop_program>:
 546:	ff cf       	rjmp	.-2      	; 0x546 <__stop_program>
