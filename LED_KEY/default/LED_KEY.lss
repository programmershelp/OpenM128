
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008a  00000000  00000000  000001cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000056  00000000  00000000  00000259  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ca  00000000  00000000  000002af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000088  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 88 00 	call	0x110	; 0x110 <main>
  b6:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <key_press>:
#include <util/delay.h>


void key_press(void)
{
	PINB &=0x80;
  be:	86 b3       	in	r24, 0x16	; 22
  c0:	80 78       	andi	r24, 0x80	; 128
  c2:	86 bb       	out	0x16, r24	; 22
	if((PINB&0x80)==0)
  c4:	b7 99       	sbic	0x16, 7	; 22
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <key_press+0x12>
	{
		
    	PORTA =0x01; while((PINB&0x80)==0); 
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	b7 9b       	sbis	0x16, 7	; 22
  ce:	fe cf       	rjmp	.-4      	; 0xcc <key_press+0xe>
	}

	PING &=0x18;
  d0:	80 91 63 00 	lds	r24, 0x0063
  d4:	88 71       	andi	r24, 0x18	; 24
  d6:	80 93 63 00 	sts	0x0063, r24
	switch((PING&0x18))
  da:	80 91 63 00 	lds	r24, 0x0063
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	88 71       	andi	r24, 0x18	; 24
  e2:	90 70       	andi	r25, 0x00	; 0
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	91 05       	cpc	r25, r1
  e8:	19 f0       	breq	.+6      	; 0xf0 <key_press+0x32>
  ea:	40 97       	sbiw	r24, 0x10	; 16
  ec:	81 f4       	brne	.+32     	; 0x10e <key_press+0x50>
  ee:	08 c0       	rjmp	.+16     	; 0x100 <key_press+0x42>
	{	
		case 0x08:  while((PING&0x18)==0x08);PORTA =0x02;break;
  f0:	80 91 63 00 	lds	r24, 0x0063
  f4:	88 71       	andi	r24, 0x18	; 24
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	d9 f3       	breq	.-10     	; 0xf0 <key_press+0x32>
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	08 95       	ret
		case 0x10:  while((PING&0x18)==0x10);PORTA =0x08;break;	       
 100:	80 91 63 00 	lds	r24, 0x0063
 104:	88 71       	andi	r24, 0x18	; 24
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	d9 f3       	breq	.-10     	; 0x100 <key_press+0x42>
 10a:	88 e0       	ldi	r24, 0x08	; 8
 10c:	8b bb       	out	0x1b, r24	; 27
 10e:	08 95       	ret

00000110 <main>:

}
int main(void)
{

	DDRB =0X00;
 110:	17 ba       	out	0x17, r1	; 23
	DDRG =0X00;
 112:	10 92 64 00 	sts	0x0064, r1
	PORTB |= 0xff;	
 116:	88 b3       	in	r24, 0x18	; 24
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	88 bb       	out	0x18, r24	; 24
	PORTG |= 0xff;
 11c:	90 91 65 00 	lds	r25, 0x0065
 120:	80 93 65 00 	sts	0x0065, r24
	DDRA = 0xff;
 124:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 126:	1b ba       	out	0x1b, r1	; 27
	while(1)
    {
     key_press();//°´¼ü¼ì²â
 128:	0e 94 5f 00 	call	0xbe	; 0xbe <key_press>
 12c:	fd cf       	rjmp	.-6      	; 0x128 <main+0x18>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
