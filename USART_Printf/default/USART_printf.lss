
USART_printf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  000001d2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800170  00800170  000002d6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000066  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002e6  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000204  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000203  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000114  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 37       	cpi	r26, 0x70	; 112
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e7       	ldi	r26, 0x70	; 112
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 37       	cpi	r26, 0x76	; 118
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#include"USART.H"


int main(void)
{
	usartInit();
  ce:	0e 94 a1 00 	call	0x142	; 0x142 <usartInit>
	printf("*--------------------------------------------* \r\n");
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	0e 94 b2 00 	call	0x164	; 0x164 <puts>
	printf("www.waveshare.net \r\n");
  da:	81 e3       	ldi	r24, 0x31	; 49
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 b2 00 	call	0x164	; 0x164 <puts>
	printf("OpenM128 Development board\r\n");
  e2:	85 e4       	ldi	r24, 0x45	; 69
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 b2 00 	call	0x164	; 0x164 <puts>
	printf("*--------------------------------------------* \r\n");
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 b2 00 	call	0x164	; 0x164 <puts>
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x24>

000000f4 <uart_putchar>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE); 


//From RS232 sends a byte
static int uart_putchar(char c, FILE *stream)    
{ 
  f4:	1f 93       	push	r17
  f6:	18 2f       	mov	r17, r24
  if (c == '\n')        
  f8:	8a 30       	cpi	r24, 0x0A	; 10
  fa:	19 f4       	brne	.+6      	; 0x102 <uart_putchar+0xe>
  uart_putchar('\r', stream);      
  fc:	8d e0       	ldi	r24, 0x0D	; 13
  fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);      
 102:	5d 9b       	sbis	0x0b, 5	; 11
 104:	fe cf       	rjmp	.-4      	; 0x102 <uart_putchar+0xe>
  UDR0 = c;      
 106:	1c b9       	out	0x0c, r17	; 12
  return 0;    
} 
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	1f 91       	pop	r17
 10e:	08 95       	ret

00000110 <putUsart0>:

void putUsart0(unsigned char c)
{ 
	while(!(WS_UCSR0A & 0x20));
 110:	5d 9b       	sbis	0x0b, 5	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <putUsart0>
	WS_UDR0 = c;
 114:	8c b9       	out	0x0c, r24	; 12
}
 116:	08 95       	ret

00000118 <getUsart0>:
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 118:	5f 9b       	sbis	0x0b, 7	; 11
 11a:	07 c0       	rjmp	.+14     	; 0x12a <getUsart0+0x12>
    status = WS_UCSR0A;
 11c:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 11e:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 120:	8c 71       	andi	r24, 0x1C	; 28
 122:	19 f4       	brne	.+6      	; 0x12a <getUsart0+0x12>
    return res;
 124:	29 2f       	mov	r18, r25
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <getUsart0+0x16>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	3f ef       	ldi	r19, 0xFF	; 255
}
 12e:	c9 01       	movw	r24, r18
 130:	08 95       	ret

00000132 <waitUsart0>:
}
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 132:	5f 9b       	sbis	0x0b, 7	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <waitUsart0>
    status = WS_UCSR0A;
 136:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
 138:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 13a:	8c 71       	andi	r24, 0x1C	; 28
 13c:	d1 f7       	brne	.-12     	; 0x132 <waitUsart0>
unsigned char waitUsart0(void)
{
    unsigned int c;
    while((c=getUsart0())==0xFFFF);
    return (unsigned char)c;
}
 13e:	89 2f       	mov	r24, r25
 140:	08 95       	ret

00000142 <usartInit>:
	// USART0 Receiver: On
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud Rate: 9600
	//
	UCSR0A=0x00;
 142:	1b b8       	out	0x0b, r1	; 11
	UCSR0B=0x98;
 144:	88 e9       	ldi	r24, 0x98	; 152
 146:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=0x06;
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 95 00 	sts	0x0095, r24
	UBRR0H=0x00;
 14e:	10 92 90 00 	sts	0x0090, r1
	UBRR0L=0x2F;
 152:	8f e2       	ldi	r24, 0x2F	; 47
 154:	89 b9       	out	0x09, r24	; 9
	stdout = &mystdout;       //Must add 
 156:	81 e6       	ldi	r24, 0x61	; 97
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	90 93 73 01 	sts	0x0173, r25
 15e:	80 93 72 01 	sts	0x0172, r24
}
 162:	08 95       	ret

00000164 <puts>:
 164:	0f 93       	push	r16
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	8c 01       	movw	r16, r24
 16e:	e0 91 72 01 	lds	r30, 0x0172
 172:	f0 91 73 01 	lds	r31, 0x0173
 176:	83 81       	ldd	r24, Z+3	; 0x03
 178:	81 ff       	sbrs	r24, 1
 17a:	21 c0       	rjmp	.+66     	; 0x1be <puts+0x5a>
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	0d c0       	rjmp	.+26     	; 0x19c <puts+0x38>
 182:	e0 91 72 01 	lds	r30, 0x0172
 186:	f0 91 73 01 	lds	r31, 0x0173
 18a:	20 85       	ldd	r18, Z+8	; 0x08
 18c:	31 85       	ldd	r19, Z+9	; 0x09
 18e:	bf 01       	movw	r22, r30
 190:	f9 01       	movw	r30, r18
 192:	09 95       	icall
 194:	89 2b       	or	r24, r25
 196:	11 f0       	breq	.+4      	; 0x19c <puts+0x38>
 198:	cf ef       	ldi	r28, 0xFF	; 255
 19a:	df ef       	ldi	r29, 0xFF	; 255
 19c:	f8 01       	movw	r30, r16
 19e:	81 91       	ld	r24, Z+
 1a0:	8f 01       	movw	r16, r30
 1a2:	88 23       	and	r24, r24
 1a4:	71 f7       	brne	.-36     	; 0x182 <puts+0x1e>
 1a6:	e0 91 72 01 	lds	r30, 0x0172
 1aa:	f0 91 73 01 	lds	r31, 0x0173
 1ae:	20 85       	ldd	r18, Z+8	; 0x08
 1b0:	31 85       	ldd	r19, Z+9	; 0x09
 1b2:	8a e0       	ldi	r24, 0x0A	; 10
 1b4:	bf 01       	movw	r22, r30
 1b6:	f9 01       	movw	r30, r18
 1b8:	09 95       	icall
 1ba:	89 2b       	or	r24, r25
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <puts+0x5e>
 1be:	cf ef       	ldi	r28, 0xFF	; 255
 1c0:	df ef       	ldi	r29, 0xFF	; 255
 1c2:	ce 01       	movw	r24, r28
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
