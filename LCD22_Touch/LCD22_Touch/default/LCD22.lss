
LCD22.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000760  00800100  000037cc  00003860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000037cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800860  00800860  00003fc0  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  00003fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000471  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005c99  00000000  00000000  00004671  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b2e  00000000  00000000  0000a30a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004b30  00000000  00000000  0000be38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00010968  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007b5  00000000  00000000  00010d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014fa  00000000  00000000  000114ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000129e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	18 e0       	ldi	r17, 0x08	; 8
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ec       	ldi	r30, 0xCC	; 204
      a0:	f7 e3       	ldi	r31, 0x37	; 55
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 36       	cpi	r26, 0x60	; 96
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	18 e0       	ldi	r17, 0x08	; 8
      b4:	a0 e6       	ldi	r26, 0x60	; 96
      b6:	b8 e0       	ldi	r27, 0x08	; 8
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 39       	cpi	r26, 0x9C	; 156
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 e4 1b 	jmp	0x37c8	; 0x37c8 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
 Coordinate  display ;
double Data;
Coordinate  *touch_dot ;

int main()
{	
      ce:	cf 92       	push	r12
      d0:	df 92       	push	r13
      d2:	ef 92       	push	r14
      d4:	ff 92       	push	r15
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
	LCD_Initializtion();
      da:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_Initializtion>
  //DrawGrids();
  //TouchPanel_Calibrate(White,Red);
  //TouchPanel_Calibrate2();
	GUI_Text(0,0,"Touchpad:",White,Red);
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	70 e0       	ldi	r23, 0x00	; 0
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	51 e0       	ldi	r21, 0x01	; 1
      ea:	2f ef       	ldi	r18, 0xFF	; 255
      ec:	3f ef       	ldi	r19, 0xFF	; 255
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	18 ef       	ldi	r17, 0xF8	; 248
      f2:	0e 94 a6 0a 	call	0x154c	; 0x154c <GUI_Text>
	while (1)
	{		
	  getDisplayPoint(&display, Read_Ads7846(), &matrix ); 	
      f6:	0e 94 34 10 	call	0x2068	; 0x2068 <Read_Ads7846>
      fa:	bc 01       	movw	r22, r24
      fc:	84 e6       	ldi	r24, 0x64	; 100
      fe:	98 e0       	ldi	r25, 0x08	; 8
     100:	4a e7       	ldi	r20, 0x7A	; 122
     102:	58 e0       	ldi	r21, 0x08	; 8
     104:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <getDisplayPoint>
	  
	  
	touch_dot= Read_Ads7846();
     108:	0e 94 34 10 	call	0x2068	; 0x2068 <Read_Ads7846>
     10c:	8c 01       	movw	r16, r24
     10e:	90 93 6d 08 	sts	0x086D, r25
     112:	80 93 6c 08 	sts	0x086C, r24
	
	display.x=((touch_dot->x-80)/5.500); // 把读到的X_ADC值转换成TFT X坐标值(The read value is converted X_ADC TFT X coordinate value)
     116:	fc 01       	movw	r30, r24
     118:	60 81       	ld	r22, Z
     11a:	71 81       	ldd	r23, Z+1	; 0x01
     11c:	60 55       	subi	r22, 0x50	; 80
     11e:	70 40       	sbci	r23, 0x00	; 0
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	40 eb       	ldi	r20, 0xB0	; 176
     12e:	50 e4       	ldi	r21, 0x40	; 64
     130:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__divsf3>
     134:	0e 94 00 12 	call	0x2400	; 0x2400 <__fixunssfsi>
     138:	6b 01       	movw	r12, r22
     13a:	7c 01       	movw	r14, r24
     13c:	70 93 65 08 	sts	0x0865, r23
     140:	60 93 64 08 	sts	0x0864, r22
	//display.y=((touch_dot->y-115)/4.205); // 把读到的Y_ADC值转换成TFT Y坐标值//    touch_dot.x = (((touch_dot.x_ad_val * 240)>>12)-110)*2;
	display.y=(touch_dot->y)*(0.1448)-13.1644;	  // 把读到的Y_ADC值转换成TFT Y坐标值//
     144:	f8 01       	movw	r30, r16
     146:	62 81       	ldd	r22, Z+2	; 0x02
     148:	73 81       	ldd	r23, Z+3	; 0x03
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
     152:	24 e7       	ldi	r18, 0x74	; 116
     154:	36 e4       	ldi	r19, 0x46	; 70
     156:	44 e1       	ldi	r20, 0x14	; 20
     158:	5e e3       	ldi	r21, 0x3E	; 62
     15a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
     15e:	22 e6       	ldi	r18, 0x62	; 98
     160:	31 ea       	ldi	r19, 0xA1	; 161
     162:	42 e5       	ldi	r20, 0x52	; 82
     164:	51 e4       	ldi	r21, 0x41	; 65
     166:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__subsf3>
     16a:	0e 94 00 12 	call	0x2400	; 0x2400 <__fixunssfsi>
     16e:	dc 01       	movw	r26, r24
     170:	cb 01       	movw	r24, r22
     172:	90 93 67 08 	sts	0x0867, r25
     176:	80 93 66 08 	sts	0x0866, r24
	  
	  	
 	TP_DrawPoint(display.y,display.x);
     17a:	b6 01       	movw	r22, r12
     17c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <TP_DrawPoint>
     180:	ba cf       	rjmp	.-140    	; 0xf6 <main+0x28>

00000182 <GetASCIICode>:
* Return         : None
* Attention		 : None
*******************************************************************************/
void GetASCIICode(unsigned char* pBuffer,unsigned char ASCII)
{  
   memcpy(pBuffer,AsciiLib[(ASCII - 32)] ,16);
     182:	e6 2f       	mov	r30, r22
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	24 e0       	ldi	r18, 0x04	; 4
     188:	ee 0f       	add	r30, r30
     18a:	ff 1f       	adc	r31, r31
     18c:	2a 95       	dec	r18
     18e:	e1 f7       	brne	.-8      	; 0x188 <GetASCIICode+0x6>
     190:	dc 01       	movw	r26, r24
     192:	e6 5f       	subi	r30, 0xF6	; 246
     194:	f0 40       	sbci	r31, 0x00	; 0
     196:	80 e1       	ldi	r24, 0x10	; 16
     198:	01 90       	ld	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	81 50       	subi	r24, 0x01	; 1
     19e:	e1 f7       	brne	.-8      	; 0x198 <GetASCIICode+0x16>
}
     1a0:	08 95       	ret

000001a2 <SPI0_Init>:
* Attention		 : None
*******************************************************************************/
void SPI0_Init(void)
{

	DDRB=0xff;
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	87 bb       	out	0x17, r24	; 23
	PORTB=0X00;
     1a6:	18 ba       	out	0x18, r1	; 24

	SPCR=0x50;          //使能SPI ， 设置SPI为主模式，空闲时CLI为1，第一个上升沿采集数据，时钟    FOSC/16
     1a8:	80 e5       	ldi	r24, 0x50	; 80
     1aa:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x00;			//setup SPI
     1ac:	1e b8       	out	0x0e, r1	; 14

//	SPI_RxHead = 0; 
//	SPI_TxHead = 0; 
	
}
     1ae:	08 95       	ret

000001b0 <SPI0_communication>:
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     1b0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     1b2:	77 9b       	sbis	0x0e, 7	; 14
     1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <SPI0_communication+0x2>
	return SPDR;
     1b6:	8f b1       	in	r24, 0x0f	; 15
}
     1b8:	08 95       	ret

000001ba <LCD_Clear>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void LCD_Clear(uint16_t Color)
{
     1ba:	68 2f       	mov	r22, r24
	uint16_t i,j;
	TOUCH_nCS_H();
     1bc:	c4 9a       	sbi	0x18, 4	; 24
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     1be:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     1c0:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     1c2:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     1c4:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     1c6:	77 9b       	sbis	0x0e, 7	; 14
     1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <LCD_Clear+0xc>
	return SPDR;
     1ca:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     1cc:	83 e0       	ldi	r24, 0x03	; 3
     1ce:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     1d0:	77 9b       	sbis	0x0e, 7	; 14
     1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <LCD_Clear+0x16>
	return SPDR;
     1d4:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     1d6:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     1d8:	82 e1       	ldi	r24, 0x12	; 18
     1da:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     1dc:	77 9b       	sbis	0x0e, 7	; 14
     1de:	fe cf       	rjmp	.-4      	; 0x1dc <LCD_Clear+0x22>
	return SPDR;
     1e0:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     1e2:	80 e3       	ldi	r24, 0x30	; 48
     1e4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     1e6:	77 9b       	sbis	0x0e, 7	; 14
     1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <LCD_Clear+0x2c>
	return SPDR;
     1ea:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     1ec:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     1ee:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     1f0:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     1f2:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     1f8:	77 9b       	sbis	0x0e, 7	; 14
     1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <LCD_Clear+0x3e>
	return SPDR;
     1fc:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     1fe:	80 e1       	ldi	r24, 0x10	; 16
     200:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     202:	77 9b       	sbis	0x0e, 7	; 14
     204:	fe cf       	rjmp	.-4      	; 0x202 <LCD_Clear+0x48>
	return SPDR;
     206:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     208:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     20a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     20c:	77 9b       	sbis	0x0e, 7	; 14
     20e:	fe cf       	rjmp	.-4      	; 0x20c <LCD_Clear+0x52>
	return SPDR;
     210:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     212:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     214:	77 9b       	sbis	0x0e, 7	; 14
     216:	fe cf       	rjmp	.-4      	; 0x214 <LCD_Clear+0x5a>
	return SPDR;
     218:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     21a:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     21c:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     21e:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     220:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     226:	77 9b       	sbis	0x0e, 7	; 14
     228:	fe cf       	rjmp	.-4      	; 0x226 <LCD_Clear+0x6c>
	return SPDR;
     22a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     22c:	82 e1       	ldi	r24, 0x12	; 18
     22e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     230:	77 9b       	sbis	0x0e, 7	; 14
     232:	fe cf       	rjmp	.-4      	; 0x230 <LCD_Clear+0x76>
	return SPDR;
     234:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     236:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     238:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     23a:	77 9b       	sbis	0x0e, 7	; 14
     23c:	fe cf       	rjmp	.-4      	; 0x23a <LCD_Clear+0x80>
	return SPDR;
     23e:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     240:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     242:	77 9b       	sbis	0x0e, 7	; 14
     244:	fe cf       	rjmp	.-4      	; 0x242 <LCD_Clear+0x88>
	return SPDR;
     246:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     248:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     24a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     24c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     24e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     254:	77 9b       	sbis	0x0e, 7	; 14
     256:	fe cf       	rjmp	.-4      	; 0x254 <LCD_Clear+0x9a>
	return SPDR;
     258:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     25a:	81 e1       	ldi	r24, 0x11	; 17
     25c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     25e:	77 9b       	sbis	0x0e, 7	; 14
     260:	fe cf       	rjmp	.-4      	; 0x25e <LCD_Clear+0xa4>
	return SPDR;
     262:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     264:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     266:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     268:	77 9b       	sbis	0x0e, 7	; 14
     26a:	fe cf       	rjmp	.-4      	; 0x268 <LCD_Clear+0xae>
	return SPDR;
     26c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     26e:	8f ee       	ldi	r24, 0xEF	; 239
     270:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     272:	77 9b       	sbis	0x0e, 7	; 14
     274:	fe cf       	rjmp	.-4      	; 0x272 <LCD_Clear+0xb8>
	return SPDR;
     276:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     278:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     27a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     27c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     27e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     284:	77 9b       	sbis	0x0e, 7	; 14
     286:	fe cf       	rjmp	.-4      	; 0x284 <LCD_Clear+0xca>
	return SPDR;
     288:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     28a:	83 e1       	ldi	r24, 0x13	; 19
     28c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     28e:	77 9b       	sbis	0x0e, 7	; 14
     290:	fe cf       	rjmp	.-4      	; 0x28e <LCD_Clear+0xd4>
	return SPDR;
     292:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     294:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     29a:	77 9b       	sbis	0x0e, 7	; 14
     29c:	fe cf       	rjmp	.-4      	; 0x29a <LCD_Clear+0xe0>
	return SPDR;
     29e:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2a0:	8f e3       	ldi	r24, 0x3F	; 63
     2a2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2a4:	77 9b       	sbis	0x0e, 7	; 14
     2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <LCD_Clear+0xea>
	return SPDR;
     2a8:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     2aa:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     2ac:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     2ae:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     2b0:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2b6:	77 9b       	sbis	0x0e, 7	; 14
     2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <LCD_Clear+0xfc>
	return SPDR;
     2ba:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2bc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2be:	77 9b       	sbis	0x0e, 7	; 14
     2c0:	fe cf       	rjmp	.-4      	; 0x2be <LCD_Clear+0x104>
	return SPDR;
     2c2:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     2c4:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2c6:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2c8:	77 9b       	sbis	0x0e, 7	; 14
     2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <LCD_Clear+0x10e>
	return SPDR;
     2cc:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2ce:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2d0:	77 9b       	sbis	0x0e, 7	; 14
     2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <LCD_Clear+0x116>
	return SPDR;
     2d4:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     2d6:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     2d8:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     2da:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     2dc:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2e2:	77 9b       	sbis	0x0e, 7	; 14
     2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <LCD_Clear+0x128>
	return SPDR;
     2e6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2ec:	77 9b       	sbis	0x0e, 7	; 14
     2ee:	fe cf       	rjmp	.-4      	; 0x2ec <LCD_Clear+0x132>
	return SPDR;
     2f0:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     2f2:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2f4:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2f6:	77 9b       	sbis	0x0e, 7	; 14
     2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <LCD_Clear+0x13c>
	return SPDR;
     2fa:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     2fc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     2fe:	77 9b       	sbis	0x0e, 7	; 14
     300:	fe cf       	rjmp	.-4      	; 0x2fe <LCD_Clear+0x144>
	return SPDR;
     302:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     304:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteIndex(uint16_t index)
{
	//select command register
	TOUCH_nCS_H();
     306:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     308:	96 98       	cbi	0x12, 6	; 18
//	_delay_ms(1);
	LCD_RS_L();
     30a:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     310:	77 9b       	sbis	0x0e, 7	; 14
     312:	fe cf       	rjmp	.-4      	; 0x310 <LCD_Clear+0x156>
	return SPDR;
     314:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     31a:	77 9b       	sbis	0x0e, 7	; 14
     31c:	fe cf       	rjmp	.-4      	; 0x31a <LCD_Clear+0x160>
	return SPDR;
     31e:	8f b1       	in	r24, 0x0f	; 15
	LCD_RS_L();
	
	SPI0_communication((uint8_t)(index>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(index));

	LCD_RS_H();
     320:	c5 9a       	sbi	0x18, 5	; 24
//	_delay_ms(1);
	LCD_CS_H();
     322:	96 9a       	sbi	0x12, 6	; 18
	
	LCD_WriteReg(0x200,0x0000);
	LCD_WriteReg(0x201,0x0000);
	
	LCD_WriteIndex(0x202);	//RAM Write index
	LCD_CS_L();
     324:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_H();
     326:	c5 9a       	sbi	0x18, 5	; 24
	//send data
	TOUCH_nCS_H();
	LCD_CS_L();
//	_delay_ms(1);
	LCD_RS_H();
	SPI0_communication((uint8_t)(data>>8));    //00000000 000000000
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	17 c0       	rjmp	.+46     	; 0x35c <LCD_Clear+0x1a2>
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteData(uint16_t data)
{
	//send data
	TOUCH_nCS_H();
     32e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     330:	96 98       	cbi	0x12, 6	; 18
//	_delay_ms(1);
	LCD_RS_H();
     332:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     334:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     336:	77 9b       	sbis	0x0e, 7	; 14
     338:	fe cf       	rjmp	.-4      	; 0x336 <LCD_Clear+0x17c>
	return SPDR;
     33a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     33c:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     33e:	77 9b       	sbis	0x0e, 7	; 14
     340:	fe cf       	rjmp	.-4      	; 0x33e <LCD_Clear+0x184>
	return SPDR;
     342:	8f b1       	in	r24, 0x0f	; 15
	LCD_CS_L();
//	_delay_ms(1);
	LCD_RS_H();
	SPI0_communication((uint8_t)(data>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(data));
	LCD_CS_H();
     344:	96 9a       	sbi	0x12, 6	; 18
	LCD_CS_L();
	LCD_RS_H();

	for(i=0;i<MAX_X;i++)
	{
		for(j=0;j<MAX_Y;j++)
     346:	2f 5f       	subi	r18, 0xFF	; 255
     348:	3f 4f       	sbci	r19, 0xFF	; 255
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	20 34       	cpi	r18, 0x40	; 64
     34e:	38 07       	cpc	r19, r24
     350:	71 f7       	brne	.-36     	; 0x32e <LCD_Clear+0x174>
	
	LCD_WriteIndex(0x202);	//RAM Write index
	LCD_CS_L();
	LCD_RS_H();

	for(i=0;i<MAX_X;i++)
     352:	4f 5f       	subi	r20, 0xFF	; 255
     354:	5f 4f       	sbci	r21, 0xFF	; 255
     356:	40 3f       	cpi	r20, 0xF0	; 240
     358:	51 05       	cpc	r21, r1
     35a:	19 f0       	breq	.+6      	; 0x362 <LCD_Clear+0x1a8>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	e6 cf       	rjmp	.-52     	; 0x32e <LCD_Clear+0x174>
//	for( index = 0; index < MAX_X * MAX_Y; index++ )
//	{
//		LCD_WriteData(Color);
//	}
	
	LCD_CS_H();
     362:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     364:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     366:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     368:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     36a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     36c:	77 9b       	sbis	0x0e, 7	; 14
     36e:	fe cf       	rjmp	.-4      	; 0x36c <LCD_Clear+0x1b2>
	return SPDR;
     370:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     376:	77 9b       	sbis	0x0e, 7	; 14
     378:	fe cf       	rjmp	.-4      	; 0x376 <LCD_Clear+0x1bc>
	return SPDR;
     37a:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     37c:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     37e:	80 e1       	ldi	r24, 0x10	; 16
     380:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     382:	77 9b       	sbis	0x0e, 7	; 14
     384:	fe cf       	rjmp	.-4      	; 0x382 <LCD_Clear+0x1c8>
	return SPDR;
     386:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     388:	80 e3       	ldi	r24, 0x30	; 48
     38a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     38c:	77 9b       	sbis	0x0e, 7	; 14
     38e:	fe cf       	rjmp	.-4      	; 0x38c <LCD_Clear+0x1d2>
	return SPDR;
     390:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     392:	96 9a       	sbi	0x12, 6	; 18
//	}
	
	LCD_CS_H();
	LCD_WriteReg( 0x003, 0x1030 );    //μí?ù?￡ê?
	
}
     394:	08 95       	ret

00000396 <LCD_Initializtion>:
* Return         : None
* Attention		 : None
*******************************************************************************/
static void LCD_Configuration(void)
{
	DDRA=0XFF;
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	9a bb       	out	0x1a, r25	; 26
	PORTA=0XFF;
     39a:	9b bb       	out	0x1b, r25	; 27
	DDRD=0X40;
     39c:	80 e4       	ldi	r24, 0x40	; 64
     39e:	81 bb       	out	0x11, r24	; 17

    DDRD=0XFF;
     3a0:	91 bb       	out	0x11, r25	; 17
* Attention		 : None
*******************************************************************************/
void SPI0_Init(void)
{

	DDRB=0xff;
     3a2:	97 bb       	out	0x17, r25	; 23
	PORTB=0X00;
     3a4:	18 ba       	out	0x18, r1	; 24

	SPCR=0x50;          //使能SPI ， 设置SPI为主模式，空闲时CLI为1，第一个上升沿采集数据，时钟    FOSC/16
     3a6:	80 e5       	ldi	r24, 0x50	; 80
     3a8:	8d b9       	out	0x0d, r24	; 13
	SPSR=0x00;			//setup SPI
     3aa:	1e b8       	out	0x0e, r1	; 14
* Attention		 : None
*******************************************************************************/
void LCD_Initializtion(void)
{
	LCD_Configuration();
	LCD_RST_L();
     3ac:	c6 98       	cbi	0x18, 6	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ae:	80 e4       	ldi	r24, 0x40	; 64
     3b0:	9c e9       	ldi	r25, 0x9C	; 156
     3b2:	fc 01       	movw	r30, r24
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_Initializtion+0x1e>
	_delay_ms(20);
	LCD_RST_H();
     3b8:	c6 9a       	sbi	0x18, 6	; 24
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_Initializtion+0x24>
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     3be:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     3c0:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     3c2:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     3c4:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     3c6:	77 9b       	sbis	0x0e, 7	; 14
     3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <LCD_Initializtion+0x30>
	return SPDR;
     3ca:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     3cc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     3ce:	77 9b       	sbis	0x0e, 7	; 14
     3d0:	fe cf       	rjmp	.-4      	; 0x3ce <LCD_Initializtion+0x38>
	return SPDR;
     3d2:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     3d4:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     3d6:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     3d8:	77 9b       	sbis	0x0e, 7	; 14
     3da:	fe cf       	rjmp	.-4      	; 0x3d8 <LCD_Initializtion+0x42>
	return SPDR;
     3dc:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     3e2:	77 9b       	sbis	0x0e, 7	; 14
     3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <LCD_Initializtion+0x4c>
	return SPDR;
     3e6:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     3e8:	96 9a       	sbi	0x12, 6	; 18
     3ea:	80 e2       	ldi	r24, 0x20	; 32
     3ec:	9e e4       	ldi	r25, 0x4E	; 78
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_Initializtion+0x58>
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     3f2:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     3f4:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     3f6:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     3fc:	77 9b       	sbis	0x0e, 7	; 14
     3fe:	fe cf       	rjmp	.-4      	; 0x3fc <LCD_Initializtion+0x66>
	return SPDR;
     400:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     402:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     404:	77 9b       	sbis	0x0e, 7	; 14
     406:	fe cf       	rjmp	.-4      	; 0x404 <LCD_Initializtion+0x6e>
	return SPDR;
     408:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     40a:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     40c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     40e:	77 9b       	sbis	0x0e, 7	; 14
     410:	fe cf       	rjmp	.-4      	; 0x40e <LCD_Initializtion+0x78>
	return SPDR;
     412:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     414:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     416:	77 9b       	sbis	0x0e, 7	; 14
     418:	fe cf       	rjmp	.-4      	; 0x416 <LCD_Initializtion+0x80>
	return SPDR;
     41a:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     41c:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     41e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     420:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     422:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     428:	77 9b       	sbis	0x0e, 7	; 14
     42a:	fe cf       	rjmp	.-4      	; 0x428 <LCD_Initializtion+0x92>
	return SPDR;
     42c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     432:	77 9b       	sbis	0x0e, 7	; 14
     434:	fe cf       	rjmp	.-4      	; 0x432 <LCD_Initializtion+0x9c>
	return SPDR;
     436:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     438:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     43a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     43c:	77 9b       	sbis	0x0e, 7	; 14
     43e:	fe cf       	rjmp	.-4      	; 0x43c <LCD_Initializtion+0xa6>
	return SPDR;
     440:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     442:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     444:	77 9b       	sbis	0x0e, 7	; 14
     446:	fe cf       	rjmp	.-4      	; 0x444 <LCD_Initializtion+0xae>
	return SPDR;
     448:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     44a:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     44c:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     44e:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     450:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     456:	77 9b       	sbis	0x0e, 7	; 14
     458:	fe cf       	rjmp	.-4      	; 0x456 <LCD_Initializtion+0xc0>
	return SPDR;
     45a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     460:	77 9b       	sbis	0x0e, 7	; 14
     462:	fe cf       	rjmp	.-4      	; 0x460 <LCD_Initializtion+0xca>
	return SPDR;
     464:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     466:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     468:	81 e3       	ldi	r24, 0x31	; 49
     46a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     46c:	77 9b       	sbis	0x0e, 7	; 14
     46e:	fe cf       	rjmp	.-4      	; 0x46c <LCD_Initializtion+0xd6>
	return SPDR;
     470:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     476:	77 9b       	sbis	0x0e, 7	; 14
     478:	fe cf       	rjmp	.-4      	; 0x476 <LCD_Initializtion+0xe0>
	return SPDR;
     47a:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     47c:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     47e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     480:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     482:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     488:	77 9b       	sbis	0x0e, 7	; 14
     48a:	fe cf       	rjmp	.-4      	; 0x488 <LCD_Initializtion+0xf2>
	return SPDR;
     48c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     492:	77 9b       	sbis	0x0e, 7	; 14
     494:	fe cf       	rjmp	.-4      	; 0x492 <LCD_Initializtion+0xfc>
	return SPDR;
     496:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     498:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     49a:	82 ee       	ldi	r24, 0xE2	; 226
     49c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     49e:	77 9b       	sbis	0x0e, 7	; 14
     4a0:	fe cf       	rjmp	.-4      	; 0x49e <LCD_Initializtion+0x108>
	return SPDR;
     4a2:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     4a4:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     4a6:	77 9b       	sbis	0x0e, 7	; 14
     4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <LCD_Initializtion+0x110>
	return SPDR;
     4aa:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     4ac:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     4ae:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     4b0:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     4b2:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     4b8:	77 9b       	sbis	0x0e, 7	; 14
     4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <LCD_Initializtion+0x122>
	return SPDR;
     4bc:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     4be:	80 e1       	ldi	r24, 0x10	; 16
     4c0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     4c2:	77 9b       	sbis	0x0e, 7	; 14
     4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <LCD_Initializtion+0x12c>
	return SPDR;
     4c6:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     4c8:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     4ca:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     4cc:	77 9b       	sbis	0x0e, 7	; 14
     4ce:	fe cf       	rjmp	.-4      	; 0x4cc <LCD_Initializtion+0x136>
	return SPDR;
     4d0:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     4d2:	8d e9       	ldi	r24, 0x9D	; 157
     4d4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     4d6:	77 9b       	sbis	0x0e, 7	; 14
     4d8:	fe cf       	rjmp	.-4      	; 0x4d6 <LCD_Initializtion+0x140>
	return SPDR;
     4da:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     4dc:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     4de:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     4e0:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     4e2:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     4e8:	77 9b       	sbis	0x0e, 7	; 14
     4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <LCD_Initializtion+0x152>
	return SPDR;
     4ec:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     4ee:	81 e1       	ldi	r24, 0x11	; 17
     4f0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     4f2:	77 9b       	sbis	0x0e, 7	; 14
     4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <LCD_Initializtion+0x15c>
	return SPDR;
     4f6:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     4f8:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     4fa:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     4fc:	77 9b       	sbis	0x0e, 7	; 14
     4fe:	fe cf       	rjmp	.-4      	; 0x4fc <LCD_Initializtion+0x166>
	return SPDR;
     500:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     502:	82 e2       	ldi	r24, 0x22	; 34
     504:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     506:	77 9b       	sbis	0x0e, 7	; 14
     508:	fe cf       	rjmp	.-4      	; 0x506 <LCD_Initializtion+0x170>
	return SPDR;
     50a:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     50c:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     50e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     510:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     512:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     518:	77 9b       	sbis	0x0e, 7	; 14
     51a:	fe cf       	rjmp	.-4      	; 0x518 <LCD_Initializtion+0x182>
	return SPDR;
     51c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     51e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     520:	77 9b       	sbis	0x0e, 7	; 14
     522:	fe cf       	rjmp	.-4      	; 0x520 <LCD_Initializtion+0x18a>
	return SPDR;
     524:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     526:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     52c:	77 9b       	sbis	0x0e, 7	; 14
     52e:	fe cf       	rjmp	.-4      	; 0x52c <LCD_Initializtion+0x196>
	return SPDR;
     530:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     532:	80 e2       	ldi	r24, 0x20	; 32
     534:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     536:	77 9b       	sbis	0x0e, 7	; 14
     538:	fe cf       	rjmp	.-4      	; 0x536 <LCD_Initializtion+0x1a0>
	return SPDR;
     53a:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     53c:	96 9a       	sbi	0x12, 6	; 18
     53e:	80 e4       	ldi	r24, 0x40	; 64
     540:	9c e9       	ldi	r25, 0x9C	; 156
     542:	01 97       	sbiw	r24, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <LCD_Initializtion+0x1ac>
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     546:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     548:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     54a:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     550:	77 9b       	sbis	0x0e, 7	; 14
     552:	fe cf       	rjmp	.-4      	; 0x550 <LCD_Initializtion+0x1ba>
	return SPDR;
     554:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     556:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     558:	77 9b       	sbis	0x0e, 7	; 14
     55a:	fe cf       	rjmp	.-4      	; 0x558 <LCD_Initializtion+0x1c2>
	return SPDR;
     55c:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     55e:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     560:	81 e3       	ldi	r24, 0x31	; 49
     562:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     564:	77 9b       	sbis	0x0e, 7	; 14
     566:	fe cf       	rjmp	.-4      	; 0x564 <LCD_Initializtion+0x1ce>
	return SPDR;
     568:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     56a:	80 e2       	ldi	r24, 0x20	; 32
     56c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     56e:	77 9b       	sbis	0x0e, 7	; 14
     570:	fe cf       	rjmp	.-4      	; 0x56e <LCD_Initializtion+0x1d8>
	return SPDR;
     572:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     574:	96 9a       	sbi	0x12, 6	; 18
     576:	80 e2       	ldi	r24, 0x20	; 32
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	28 ec       	ldi	r18, 0xC8	; 200
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	f9 01       	movw	r30, r18
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <LCD_Initializtion+0x1ea>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     584:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     586:	d9 f7       	brne	.-10     	; 0x57e <LCD_Initializtion+0x1e8>
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     588:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     58a:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     58c:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     58e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     590:	77 9b       	sbis	0x0e, 7	; 14
     592:	fe cf       	rjmp	.-4      	; 0x590 <LCD_Initializtion+0x1fa>
	return SPDR;
     594:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     59a:	77 9b       	sbis	0x0e, 7	; 14
     59c:	fe cf       	rjmp	.-4      	; 0x59a <LCD_Initializtion+0x204>
	return SPDR;
     59e:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     5a0:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5a2:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     5a4:	77 9b       	sbis	0x0e, 7	; 14
     5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <LCD_Initializtion+0x20e>
	return SPDR;
     5a8:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5aa:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     5ac:	77 9b       	sbis	0x0e, 7	; 14
     5ae:	fe cf       	rjmp	.-4      	; 0x5ac <LCD_Initializtion+0x216>
	return SPDR;
     5b0:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     5b2:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     5b4:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     5b6:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     5b8:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5ba:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     5bc:	77 9b       	sbis	0x0e, 7	; 14
     5be:	fe cf       	rjmp	.-4      	; 0x5bc <LCD_Initializtion+0x226>
	return SPDR;
     5c0:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     5c6:	77 9b       	sbis	0x0e, 7	; 14
     5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <LCD_Initializtion+0x230>
	return SPDR;
     5ca:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     5cc:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     5d2:	77 9b       	sbis	0x0e, 7	; 14
     5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <LCD_Initializtion+0x23c>
	return SPDR;
     5d6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5d8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     5da:	77 9b       	sbis	0x0e, 7	; 14
     5dc:	fe cf       	rjmp	.-4      	; 0x5da <LCD_Initializtion+0x244>
	return SPDR;
     5de:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     5e0:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     5e2:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     5e4:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     5e6:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5e8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     5ea:	77 9b       	sbis	0x0e, 7	; 14
     5ec:	fe cf       	rjmp	.-4      	; 0x5ea <LCD_Initializtion+0x254>
	return SPDR;
     5ee:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     5f4:	77 9b       	sbis	0x0e, 7	; 14
     5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <LCD_Initializtion+0x25e>
	return SPDR;
     5f8:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     5fa:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     5fc:	80 e1       	ldi	r24, 0x10	; 16
     5fe:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     600:	77 9b       	sbis	0x0e, 7	; 14
     602:	fe cf       	rjmp	.-4      	; 0x600 <LCD_Initializtion+0x26a>
	return SPDR;
     604:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     606:	80 e3       	ldi	r24, 0x30	; 48
     608:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     60a:	77 9b       	sbis	0x0e, 7	; 14
     60c:	fe cf       	rjmp	.-4      	; 0x60a <LCD_Initializtion+0x274>
	return SPDR;
     60e:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     610:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     612:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     614:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     616:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     618:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     61a:	77 9b       	sbis	0x0e, 7	; 14
     61c:	fe cf       	rjmp	.-4      	; 0x61a <LCD_Initializtion+0x284>
	return SPDR;
     61e:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     620:	86 e0       	ldi	r24, 0x06	; 6
     622:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     624:	77 9b       	sbis	0x0e, 7	; 14
     626:	fe cf       	rjmp	.-4      	; 0x624 <LCD_Initializtion+0x28e>
	return SPDR;
     628:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     62a:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     62c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     62e:	77 9b       	sbis	0x0e, 7	; 14
     630:	fe cf       	rjmp	.-4      	; 0x62e <LCD_Initializtion+0x298>
	return SPDR;
     632:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     634:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     636:	77 9b       	sbis	0x0e, 7	; 14
     638:	fe cf       	rjmp	.-4      	; 0x636 <LCD_Initializtion+0x2a0>
	return SPDR;
     63a:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     63c:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     63e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     640:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     642:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     644:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     646:	77 9b       	sbis	0x0e, 7	; 14
     648:	fe cf       	rjmp	.-4      	; 0x646 <LCD_Initializtion+0x2b0>
	return SPDR;
     64a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     64c:	87 e0       	ldi	r24, 0x07	; 7
     64e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     650:	77 9b       	sbis	0x0e, 7	; 14
     652:	fe cf       	rjmp	.-4      	; 0x650 <LCD_Initializtion+0x2ba>
	return SPDR;
     654:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     656:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     65c:	77 9b       	sbis	0x0e, 7	; 14
     65e:	fe cf       	rjmp	.-4      	; 0x65c <LCD_Initializtion+0x2c6>
	return SPDR;
     660:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     666:	77 9b       	sbis	0x0e, 7	; 14
     668:	fe cf       	rjmp	.-4      	; 0x666 <LCD_Initializtion+0x2d0>
	return SPDR;
     66a:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     66c:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     66e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     670:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     672:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     674:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     676:	77 9b       	sbis	0x0e, 7	; 14
     678:	fe cf       	rjmp	.-4      	; 0x676 <LCD_Initializtion+0x2e0>
	return SPDR;
     67a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     680:	77 9b       	sbis	0x0e, 7	; 14
     682:	fe cf       	rjmp	.-4      	; 0x680 <LCD_Initializtion+0x2ea>
	return SPDR;
     684:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     686:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     688:	88 e0       	ldi	r24, 0x08	; 8
     68a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     68c:	77 9b       	sbis	0x0e, 7	; 14
     68e:	fe cf       	rjmp	.-4      	; 0x68c <LCD_Initializtion+0x2f6>
	return SPDR;
     690:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     692:	88 e0       	ldi	r24, 0x08	; 8
     694:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     696:	77 9b       	sbis	0x0e, 7	; 14
     698:	fe cf       	rjmp	.-4      	; 0x696 <LCD_Initializtion+0x300>
	return SPDR;
     69a:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     69c:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     69e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     6a0:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     6a2:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6a4:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6a6:	77 9b       	sbis	0x0e, 7	; 14
     6a8:	fe cf       	rjmp	.-4      	; 0x6a6 <LCD_Initializtion+0x310>
	return SPDR;
     6aa:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6ac:	89 e0       	ldi	r24, 0x09	; 9
     6ae:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6b0:	77 9b       	sbis	0x0e, 7	; 14
     6b2:	fe cf       	rjmp	.-4      	; 0x6b0 <LCD_Initializtion+0x31a>
	return SPDR;
     6b4:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     6b6:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6b8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6ba:	77 9b       	sbis	0x0e, 7	; 14
     6bc:	fe cf       	rjmp	.-4      	; 0x6ba <LCD_Initializtion+0x324>
	return SPDR;
     6be:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6c0:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6c2:	77 9b       	sbis	0x0e, 7	; 14
     6c4:	fe cf       	rjmp	.-4      	; 0x6c2 <LCD_Initializtion+0x32c>
	return SPDR;
     6c6:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     6c8:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     6ca:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     6cc:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     6ce:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6d0:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6d2:	77 9b       	sbis	0x0e, 7	; 14
     6d4:	fe cf       	rjmp	.-4      	; 0x6d2 <LCD_Initializtion+0x33c>
	return SPDR;
     6d6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6d8:	8b e0       	ldi	r24, 0x0B	; 11
     6da:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6dc:	77 9b       	sbis	0x0e, 7	; 14
     6de:	fe cf       	rjmp	.-4      	; 0x6dc <LCD_Initializtion+0x346>
	return SPDR;
     6e0:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     6e2:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6e4:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6e6:	77 9b       	sbis	0x0e, 7	; 14
     6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <LCD_Initializtion+0x350>
	return SPDR;
     6ea:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6ec:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6ee:	77 9b       	sbis	0x0e, 7	; 14
     6f0:	fe cf       	rjmp	.-4      	; 0x6ee <LCD_Initializtion+0x358>
	return SPDR;
     6f2:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     6f4:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     6f6:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     6f8:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     6fa:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     6fc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     6fe:	77 9b       	sbis	0x0e, 7	; 14
     700:	fe cf       	rjmp	.-4      	; 0x6fe <LCD_Initializtion+0x368>
	return SPDR;
     702:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     704:	8c e0       	ldi	r24, 0x0C	; 12
     706:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     708:	77 9b       	sbis	0x0e, 7	; 14
     70a:	fe cf       	rjmp	.-4      	; 0x708 <LCD_Initializtion+0x372>
	return SPDR;
     70c:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     70e:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     710:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     712:	77 9b       	sbis	0x0e, 7	; 14
     714:	fe cf       	rjmp	.-4      	; 0x712 <LCD_Initializtion+0x37c>
	return SPDR;
     716:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     718:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     71a:	77 9b       	sbis	0x0e, 7	; 14
     71c:	fe cf       	rjmp	.-4      	; 0x71a <LCD_Initializtion+0x384>
	return SPDR;
     71e:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     720:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     722:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     724:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     726:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     728:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     72a:	77 9b       	sbis	0x0e, 7	; 14
     72c:	fe cf       	rjmp	.-4      	; 0x72a <LCD_Initializtion+0x394>
	return SPDR;
     72e:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     730:	8d e0       	ldi	r24, 0x0D	; 13
     732:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     734:	77 9b       	sbis	0x0e, 7	; 14
     736:	fe cf       	rjmp	.-4      	; 0x734 <LCD_Initializtion+0x39e>
	return SPDR;
     738:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     73a:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     73c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     73e:	77 9b       	sbis	0x0e, 7	; 14
     740:	fe cf       	rjmp	.-4      	; 0x73e <LCD_Initializtion+0x3a8>
	return SPDR;
     742:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     744:	88 e1       	ldi	r24, 0x18	; 24
     746:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     748:	77 9b       	sbis	0x0e, 7	; 14
     74a:	fe cf       	rjmp	.-4      	; 0x748 <LCD_Initializtion+0x3b2>
	return SPDR;
     74c:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     74e:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     750:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     752:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     754:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     756:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     758:	77 9b       	sbis	0x0e, 7	; 14
     75a:	fe cf       	rjmp	.-4      	; 0x758 <LCD_Initializtion+0x3c2>
	return SPDR;
     75c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     75e:	82 e1       	ldi	r24, 0x12	; 18
     760:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     762:	77 9b       	sbis	0x0e, 7	; 14
     764:	fe cf       	rjmp	.-4      	; 0x762 <LCD_Initializtion+0x3cc>
	return SPDR;
     766:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     768:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     76a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     76c:	77 9b       	sbis	0x0e, 7	; 14
     76e:	fe cf       	rjmp	.-4      	; 0x76c <LCD_Initializtion+0x3d6>
	return SPDR;
     770:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     772:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     774:	77 9b       	sbis	0x0e, 7	; 14
     776:	fe cf       	rjmp	.-4      	; 0x774 <LCD_Initializtion+0x3de>
	return SPDR;
     778:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     77a:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     77c:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     77e:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     780:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     782:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     784:	77 9b       	sbis	0x0e, 7	; 14
     786:	fe cf       	rjmp	.-4      	; 0x784 <LCD_Initializtion+0x3ee>
	return SPDR;
     788:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     78a:	83 e1       	ldi	r24, 0x13	; 19
     78c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     78e:	77 9b       	sbis	0x0e, 7	; 14
     790:	fe cf       	rjmp	.-4      	; 0x78e <LCD_Initializtion+0x3f8>
	return SPDR;
     792:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     794:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     796:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     798:	77 9b       	sbis	0x0e, 7	; 14
     79a:	fe cf       	rjmp	.-4      	; 0x798 <LCD_Initializtion+0x402>
	return SPDR;
     79c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     79e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7a0:	77 9b       	sbis	0x0e, 7	; 14
     7a2:	fe cf       	rjmp	.-4      	; 0x7a0 <LCD_Initializtion+0x40a>
	return SPDR;
     7a4:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     7a6:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     7a8:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     7aa:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     7ac:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     7ae:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7b0:	77 9b       	sbis	0x0e, 7	; 14
     7b2:	fe cf       	rjmp	.-4      	; 0x7b0 <LCD_Initializtion+0x41a>
	return SPDR;
     7b4:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     7b6:	88 e1       	ldi	r24, 0x18	; 24
     7b8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7ba:	77 9b       	sbis	0x0e, 7	; 14
     7bc:	fe cf       	rjmp	.-4      	; 0x7ba <LCD_Initializtion+0x424>
	return SPDR;
     7be:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     7c0:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     7c2:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7c4:	77 9b       	sbis	0x0e, 7	; 14
     7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <LCD_Initializtion+0x42e>
	return SPDR;
     7c8:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     7ca:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7cc:	77 9b       	sbis	0x0e, 7	; 14
     7ce:	fe cf       	rjmp	.-4      	; 0x7cc <LCD_Initializtion+0x436>
	return SPDR;
     7d0:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     7d2:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     7d4:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     7d6:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     7d8:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     7da:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7dc:	77 9b       	sbis	0x0e, 7	; 14
     7de:	fe cf       	rjmp	.-4      	; 0x7dc <LCD_Initializtion+0x446>
	return SPDR;
     7e0:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     7e2:	89 e1       	ldi	r24, 0x19	; 25
     7e4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7e6:	77 9b       	sbis	0x0e, 7	; 14
     7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <LCD_Initializtion+0x450>
	return SPDR;
     7ea:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     7ec:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     7ee:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7f0:	77 9b       	sbis	0x0e, 7	; 14
     7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <LCD_Initializtion+0x45a>
	return SPDR;
     7f4:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     7f6:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     7f8:	77 9b       	sbis	0x0e, 7	; 14
     7fa:	fe cf       	rjmp	.-4      	; 0x7f8 <LCD_Initializtion+0x462>
	return SPDR;
     7fc:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     7fe:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     800:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     802:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     804:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     80a:	77 9b       	sbis	0x0e, 7	; 14
     80c:	fe cf       	rjmp	.-4      	; 0x80a <LCD_Initializtion+0x474>
	return SPDR;
     80e:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     814:	77 9b       	sbis	0x0e, 7	; 14
     816:	fe cf       	rjmp	.-4      	; 0x814 <LCD_Initializtion+0x47e>
	return SPDR;
     818:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     81a:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     81c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     81e:	77 9b       	sbis	0x0e, 7	; 14
     820:	fe cf       	rjmp	.-4      	; 0x81e <LCD_Initializtion+0x488>
	return SPDR;
     822:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     824:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     826:	77 9b       	sbis	0x0e, 7	; 14
     828:	fe cf       	rjmp	.-4      	; 0x826 <LCD_Initializtion+0x490>
	return SPDR;
     82a:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     82c:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     82e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     830:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     832:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     838:	77 9b       	sbis	0x0e, 7	; 14
     83a:	fe cf       	rjmp	.-4      	; 0x838 <LCD_Initializtion+0x4a2>
	return SPDR;
     83c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     83e:	84 e0       	ldi	r24, 0x04	; 4
     840:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     842:	77 9b       	sbis	0x0e, 7	; 14
     844:	fe cf       	rjmp	.-4      	; 0x842 <LCD_Initializtion+0x4ac>
	return SPDR;
     846:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     848:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     84a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     84c:	77 9b       	sbis	0x0e, 7	; 14
     84e:	fe cf       	rjmp	.-4      	; 0x84c <LCD_Initializtion+0x4b6>
	return SPDR;
     850:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     852:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     854:	77 9b       	sbis	0x0e, 7	; 14
     856:	fe cf       	rjmp	.-4      	; 0x854 <LCD_Initializtion+0x4be>
	return SPDR;
     858:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     85a:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     85c:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     85e:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     860:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     866:	77 9b       	sbis	0x0e, 7	; 14
     868:	fe cf       	rjmp	.-4      	; 0x866 <LCD_Initializtion+0x4d0>
	return SPDR;
     86a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     86c:	80 e1       	ldi	r24, 0x10	; 16
     86e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     870:	77 9b       	sbis	0x0e, 7	; 14
     872:	fe cf       	rjmp	.-4      	; 0x870 <LCD_Initializtion+0x4da>
	return SPDR;
     874:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     876:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     878:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     87a:	77 9b       	sbis	0x0e, 7	; 14
     87c:	fe cf       	rjmp	.-4      	; 0x87a <LCD_Initializtion+0x4e4>
	return SPDR;
     87e:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     880:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     882:	77 9b       	sbis	0x0e, 7	; 14
     884:	fe cf       	rjmp	.-4      	; 0x882 <LCD_Initializtion+0x4ec>
	return SPDR;
     886:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     888:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     88a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     88c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     88e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     894:	77 9b       	sbis	0x0e, 7	; 14
     896:	fe cf       	rjmp	.-4      	; 0x894 <LCD_Initializtion+0x4fe>
	return SPDR;
     898:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     89a:	81 e1       	ldi	r24, 0x11	; 17
     89c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     89e:	77 9b       	sbis	0x0e, 7	; 14
     8a0:	fe cf       	rjmp	.-4      	; 0x89e <LCD_Initializtion+0x508>
	return SPDR;
     8a2:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     8a4:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     8a6:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     8a8:	77 9b       	sbis	0x0e, 7	; 14
     8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <LCD_Initializtion+0x512>
	return SPDR;
     8ac:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     8ae:	8f ee       	ldi	r24, 0xEF	; 239
     8b0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     8b2:	77 9b       	sbis	0x0e, 7	; 14
     8b4:	fe cf       	rjmp	.-4      	; 0x8b2 <LCD_Initializtion+0x51c>
	return SPDR;
     8b6:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     8b8:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     8ba:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     8bc:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     8be:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     8c4:	77 9b       	sbis	0x0e, 7	; 14
     8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <LCD_Initializtion+0x52e>
	return SPDR;
     8c8:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     8ca:	82 e1       	ldi	r24, 0x12	; 18
     8cc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     8ce:	77 9b       	sbis	0x0e, 7	; 14
     8d0:	fe cf       	rjmp	.-4      	; 0x8ce <LCD_Initializtion+0x538>
	return SPDR;
     8d2:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     8d4:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     8d6:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     8d8:	77 9b       	sbis	0x0e, 7	; 14
     8da:	fe cf       	rjmp	.-4      	; 0x8d8 <LCD_Initializtion+0x542>
	return SPDR;
     8dc:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     8de:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     8e0:	77 9b       	sbis	0x0e, 7	; 14
     8e2:	fe cf       	rjmp	.-4      	; 0x8e0 <LCD_Initializtion+0x54a>
	return SPDR;
     8e4:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     8e6:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     8e8:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     8ea:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     8ec:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     8f2:	77 9b       	sbis	0x0e, 7	; 14
     8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <LCD_Initializtion+0x55c>
	return SPDR;
     8f6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     8f8:	83 e1       	ldi	r24, 0x13	; 19
     8fa:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     8fc:	77 9b       	sbis	0x0e, 7	; 14
     8fe:	fe cf       	rjmp	.-4      	; 0x8fc <LCD_Initializtion+0x566>
	return SPDR;
     900:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     902:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     908:	77 9b       	sbis	0x0e, 7	; 14
     90a:	fe cf       	rjmp	.-4      	; 0x908 <LCD_Initializtion+0x572>
	return SPDR;
     90c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     90e:	8f e3       	ldi	r24, 0x3F	; 63
     910:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     912:	77 9b       	sbis	0x0e, 7	; 14
     914:	fe cf       	rjmp	.-4      	; 0x912 <LCD_Initializtion+0x57c>
	return SPDR;
     916:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     918:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     91a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     91c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     91e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     924:	77 9b       	sbis	0x0e, 7	; 14
     926:	fe cf       	rjmp	.-4      	; 0x924 <LCD_Initializtion+0x58e>
	return SPDR;
     928:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     92a:	84 e1       	ldi	r24, 0x14	; 20
     92c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     92e:	77 9b       	sbis	0x0e, 7	; 14
     930:	fe cf       	rjmp	.-4      	; 0x92e <LCD_Initializtion+0x598>
	return SPDR;
     932:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     934:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     936:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     938:	77 9b       	sbis	0x0e, 7	; 14
     93a:	fe cf       	rjmp	.-4      	; 0x938 <LCD_Initializtion+0x5a2>
	return SPDR;
     93c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     93e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     940:	77 9b       	sbis	0x0e, 7	; 14
     942:	fe cf       	rjmp	.-4      	; 0x940 <LCD_Initializtion+0x5aa>
	return SPDR;
     944:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     946:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     948:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     94a:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     94c:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     952:	77 9b       	sbis	0x0e, 7	; 14
     954:	fe cf       	rjmp	.-4      	; 0x952 <LCD_Initializtion+0x5bc>
	return SPDR;
     956:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     958:	85 e1       	ldi	r24, 0x15	; 21
     95a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     95c:	77 9b       	sbis	0x0e, 7	; 14
     95e:	fe cf       	rjmp	.-4      	; 0x95c <LCD_Initializtion+0x5c6>
	return SPDR;
     960:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     962:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     964:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     966:	77 9b       	sbis	0x0e, 7	; 14
     968:	fe cf       	rjmp	.-4      	; 0x966 <LCD_Initializtion+0x5d0>
	return SPDR;
     96a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     96c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     96e:	77 9b       	sbis	0x0e, 7	; 14
     970:	fe cf       	rjmp	.-4      	; 0x96e <LCD_Initializtion+0x5d8>
	return SPDR;
     972:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     974:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     976:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     978:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     97a:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     980:	77 9b       	sbis	0x0e, 7	; 14
     982:	fe cf       	rjmp	.-4      	; 0x980 <LCD_Initializtion+0x5ea>
	return SPDR;
     984:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     986:	86 e1       	ldi	r24, 0x16	; 22
     988:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     98a:	77 9b       	sbis	0x0e, 7	; 14
     98c:	fe cf       	rjmp	.-4      	; 0x98a <LCD_Initializtion+0x5f4>
	return SPDR;
     98e:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     990:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     992:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     994:	77 9b       	sbis	0x0e, 7	; 14
     996:	fe cf       	rjmp	.-4      	; 0x994 <LCD_Initializtion+0x5fe>
	return SPDR;
     998:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     99a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     99c:	77 9b       	sbis	0x0e, 7	; 14
     99e:	fe cf       	rjmp	.-4      	; 0x99c <LCD_Initializtion+0x606>
	return SPDR;
     9a0:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     9a2:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     9a4:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     9a6:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     9a8:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     9ae:	77 9b       	sbis	0x0e, 7	; 14
     9b0:	fe cf       	rjmp	.-4      	; 0x9ae <LCD_Initializtion+0x618>
	return SPDR;
     9b2:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     9b4:	87 e1       	ldi	r24, 0x17	; 23
     9b6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     9b8:	77 9b       	sbis	0x0e, 7	; 14
     9ba:	fe cf       	rjmp	.-4      	; 0x9b8 <LCD_Initializtion+0x622>
	return SPDR;
     9bc:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     9be:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     9c0:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     9c2:	77 9b       	sbis	0x0e, 7	; 14
     9c4:	fe cf       	rjmp	.-4      	; 0x9c2 <LCD_Initializtion+0x62c>
	return SPDR;
     9c6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     9c8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     9ca:	77 9b       	sbis	0x0e, 7	; 14
     9cc:	fe cf       	rjmp	.-4      	; 0x9ca <LCD_Initializtion+0x634>
	return SPDR;
     9ce:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     9d0:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     9d2:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     9d4:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     9d6:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     9dc:	77 9b       	sbis	0x0e, 7	; 14
     9de:	fe cf       	rjmp	.-4      	; 0x9dc <LCD_Initializtion+0x646>
	return SPDR;
     9e0:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     9e2:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     9e4:	77 9b       	sbis	0x0e, 7	; 14
     9e6:	fe cf       	rjmp	.-4      	; 0x9e4 <LCD_Initializtion+0x64e>
	return SPDR;
     9e8:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     9ea:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     9ec:	83 e5       	ldi	r24, 0x53	; 83
     9ee:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     9f0:	77 9b       	sbis	0x0e, 7	; 14
     9f2:	fe cf       	rjmp	.-4      	; 0x9f0 <LCD_Initializtion+0x65a>
	return SPDR;
     9f4:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     9f6:	83 e4       	ldi	r24, 0x43	; 67
     9f8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     9fa:	77 9b       	sbis	0x0e, 7	; 14
     9fc:	fe cf       	rjmp	.-4      	; 0x9fa <LCD_Initializtion+0x664>
	return SPDR;
     9fe:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     a00:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     a02:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     a04:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     a06:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a0c:	77 9b       	sbis	0x0e, 7	; 14
     a0e:	fe cf       	rjmp	.-4      	; 0xa0c <LCD_Initializtion+0x676>
	return SPDR;
     a10:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a16:	77 9b       	sbis	0x0e, 7	; 14
     a18:	fe cf       	rjmp	.-4      	; 0xa16 <LCD_Initializtion+0x680>
	return SPDR;
     a1a:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     a1c:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a1e:	80 e1       	ldi	r24, 0x10	; 16
     a20:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a22:	77 9b       	sbis	0x0e, 7	; 14
     a24:	fe cf       	rjmp	.-4      	; 0xa22 <LCD_Initializtion+0x68c>
	return SPDR;
     a26:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a28:	81 e2       	ldi	r24, 0x21	; 33
     a2a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a2c:	77 9b       	sbis	0x0e, 7	; 14
     a2e:	fe cf       	rjmp	.-4      	; 0xa2c <LCD_Initializtion+0x696>
	return SPDR;
     a30:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     a32:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     a34:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     a36:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     a38:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a3e:	77 9b       	sbis	0x0e, 7	; 14
     a40:	fe cf       	rjmp	.-4      	; 0xa3e <LCD_Initializtion+0x6a8>
	return SPDR;
     a42:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a48:	77 9b       	sbis	0x0e, 7	; 14
     a4a:	fe cf       	rjmp	.-4      	; 0xa48 <LCD_Initializtion+0x6b2>
	return SPDR;
     a4c:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     a4e:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a50:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a52:	77 9b       	sbis	0x0e, 7	; 14
     a54:	fe cf       	rjmp	.-4      	; 0xa52 <LCD_Initializtion+0x6bc>
	return SPDR;
     a56:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a5c:	77 9b       	sbis	0x0e, 7	; 14
     a5e:	fe cf       	rjmp	.-4      	; 0xa5c <LCD_Initializtion+0x6c6>
	return SPDR;
     a60:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     a62:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     a64:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     a66:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     a68:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a6e:	77 9b       	sbis	0x0e, 7	; 14
     a70:	fe cf       	rjmp	.-4      	; 0xa6e <LCD_Initializtion+0x6d8>
	return SPDR;
     a72:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a78:	77 9b       	sbis	0x0e, 7	; 14
     a7a:	fe cf       	rjmp	.-4      	; 0xa78 <LCD_Initializtion+0x6e2>
	return SPDR;
     a7c:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     a7e:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a80:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a82:	77 9b       	sbis	0x0e, 7	; 14
     a84:	fe cf       	rjmp	.-4      	; 0xa82 <LCD_Initializtion+0x6ec>
	return SPDR;
     a86:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a88:	81 e1       	ldi	r24, 0x11	; 17
     a8a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a8c:	77 9b       	sbis	0x0e, 7	; 14
     a8e:	fe cf       	rjmp	.-4      	; 0xa8c <LCD_Initializtion+0x6f6>
	return SPDR;
     a90:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     a92:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     a94:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     a96:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     a98:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     a9e:	77 9b       	sbis	0x0e, 7	; 14
     aa0:	fe cf       	rjmp	.-4      	; 0xa9e <LCD_Initializtion+0x708>
	return SPDR;
     aa2:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     aa4:	84 e0       	ldi	r24, 0x04	; 4
     aa6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     aa8:	77 9b       	sbis	0x0e, 7	; 14
     aaa:	fe cf       	rjmp	.-4      	; 0xaa8 <LCD_Initializtion+0x712>
	return SPDR;
     aac:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     aae:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ab0:	85 e0       	ldi	r24, 0x05	; 5
     ab2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ab4:	77 9b       	sbis	0x0e, 7	; 14
     ab6:	fe cf       	rjmp	.-4      	; 0xab4 <LCD_Initializtion+0x71e>
	return SPDR;
     ab8:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     aba:	8a e0       	ldi	r24, 0x0A	; 10
     abc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     abe:	77 9b       	sbis	0x0e, 7	; 14
     ac0:	fe cf       	rjmp	.-4      	; 0xabe <LCD_Initializtion+0x728>
	return SPDR;
     ac2:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     ac4:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     ac6:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     ac8:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     aca:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ad0:	77 9b       	sbis	0x0e, 7	; 14
     ad2:	fe cf       	rjmp	.-4      	; 0xad0 <LCD_Initializtion+0x73a>
	return SPDR;
     ad4:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ad6:	85 e0       	ldi	r24, 0x05	; 5
     ad8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ada:	77 9b       	sbis	0x0e, 7	; 14
     adc:	fe cf       	rjmp	.-4      	; 0xada <LCD_Initializtion+0x744>
	return SPDR;
     ade:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     ae0:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ae2:	83 e4       	ldi	r24, 0x43	; 67
     ae4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ae6:	77 9b       	sbis	0x0e, 7	; 14
     ae8:	fe cf       	rjmp	.-4      	; 0xae6 <LCD_Initializtion+0x750>
	return SPDR;
     aea:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     aec:	82 e4       	ldi	r24, 0x42	; 66
     aee:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     af0:	77 9b       	sbis	0x0e, 7	; 14
     af2:	fe cf       	rjmp	.-4      	; 0xaf0 <LCD_Initializtion+0x75a>
	return SPDR;
     af4:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     af6:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     af8:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     afa:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     afc:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b02:	77 9b       	sbis	0x0e, 7	; 14
     b04:	fe cf       	rjmp	.-4      	; 0xb02 <LCD_Initializtion+0x76c>
	return SPDR;
     b06:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b08:	86 e0       	ldi	r24, 0x06	; 6
     b0a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b0c:	77 9b       	sbis	0x0e, 7	; 14
     b0e:	fe cf       	rjmp	.-4      	; 0xb0c <LCD_Initializtion+0x776>
	return SPDR;
     b10:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     b12:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b14:	81 e1       	ldi	r24, 0x11	; 17
     b16:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b18:	77 9b       	sbis	0x0e, 7	; 14
     b1a:	fe cf       	rjmp	.-4      	; 0xb18 <LCD_Initializtion+0x782>
	return SPDR;
     b1c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b1e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b20:	77 9b       	sbis	0x0e, 7	; 14
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <LCD_Initializtion+0x78a>
	return SPDR;
     b24:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     b26:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     b28:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     b2a:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     b2c:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b32:	77 9b       	sbis	0x0e, 7	; 14
     b34:	fe cf       	rjmp	.-4      	; 0xb32 <LCD_Initializtion+0x79c>
	return SPDR;
     b36:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b38:	87 e0       	ldi	r24, 0x07	; 7
     b3a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b3c:	77 9b       	sbis	0x0e, 7	; 14
     b3e:	fe cf       	rjmp	.-4      	; 0xb3c <LCD_Initializtion+0x7a6>
	return SPDR;
     b40:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     b42:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b44:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b46:	77 9b       	sbis	0x0e, 7	; 14
     b48:	fe cf       	rjmp	.-4      	; 0xb46 <LCD_Initializtion+0x7b0>
	return SPDR;
     b4a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b50:	77 9b       	sbis	0x0e, 7	; 14
     b52:	fe cf       	rjmp	.-4      	; 0xb50 <LCD_Initializtion+0x7ba>
	return SPDR;
     b54:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     b56:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     b58:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     b5a:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     b5c:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b62:	77 9b       	sbis	0x0e, 7	; 14
     b64:	fe cf       	rjmp	.-4      	; 0xb62 <LCD_Initializtion+0x7cc>
	return SPDR;
     b66:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b6c:	77 9b       	sbis	0x0e, 7	; 14
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <LCD_Initializtion+0x7d6>
	return SPDR;
     b70:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     b72:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b74:	82 e1       	ldi	r24, 0x12	; 18
     b76:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b78:	77 9b       	sbis	0x0e, 7	; 14
     b7a:	fe cf       	rjmp	.-4      	; 0xb78 <LCD_Initializtion+0x7e2>
	return SPDR;
     b7c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b82:	77 9b       	sbis	0x0e, 7	; 14
     b84:	fe cf       	rjmp	.-4      	; 0xb82 <LCD_Initializtion+0x7ec>
	return SPDR;
     b86:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     b88:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     b8a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     b8c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     b8e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b90:	83 e0       	ldi	r24, 0x03	; 3
     b92:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b94:	77 9b       	sbis	0x0e, 7	; 14
     b96:	fe cf       	rjmp	.-4      	; 0xb94 <LCD_Initializtion+0x7fe>
	return SPDR;
     b98:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     b9a:	89 e0       	ldi	r24, 0x09	; 9
     b9c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     b9e:	77 9b       	sbis	0x0e, 7	; 14
     ba0:	fe cf       	rjmp	.-4      	; 0xb9e <LCD_Initializtion+0x808>
	return SPDR;
     ba2:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     ba4:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ba6:	85 e0       	ldi	r24, 0x05	; 5
     ba8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     baa:	77 9b       	sbis	0x0e, 7	; 14
     bac:	fe cf       	rjmp	.-4      	; 0xbaa <LCD_Initializtion+0x814>
	return SPDR;
     bae:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     bb0:	8a e0       	ldi	r24, 0x0A	; 10
     bb2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     bb4:	77 9b       	sbis	0x0e, 7	; 14
     bb6:	fe cf       	rjmp	.-4      	; 0xbb4 <LCD_Initializtion+0x81e>
	return SPDR;
     bb8:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     bba:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     bbc:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     bbe:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     bc0:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     bc2:	84 e0       	ldi	r24, 0x04	; 4
     bc4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     bc6:	77 9b       	sbis	0x0e, 7	; 14
     bc8:	fe cf       	rjmp	.-4      	; 0xbc6 <LCD_Initializtion+0x830>
	return SPDR;
     bca:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     bcc:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     bce:	77 9b       	sbis	0x0e, 7	; 14
     bd0:	fe cf       	rjmp	.-4      	; 0xbce <LCD_Initializtion+0x838>
	return SPDR;
     bd2:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     bd4:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     bda:	77 9b       	sbis	0x0e, 7	; 14
     bdc:	fe cf       	rjmp	.-4      	; 0xbda <LCD_Initializtion+0x844>
	return SPDR;
     bde:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     be0:	87 e2       	ldi	r24, 0x27	; 39
     be2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     be4:	77 9b       	sbis	0x0e, 7	; 14
     be6:	fe cf       	rjmp	.-4      	; 0xbe4 <LCD_Initializtion+0x84e>
	return SPDR;
     be8:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     bea:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     bec:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     bee:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     bf0:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     bf6:	77 9b       	sbis	0x0e, 7	; 14
     bf8:	fe cf       	rjmp	.-4      	; 0xbf6 <LCD_Initializtion+0x860>
	return SPDR;
     bfa:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c00:	77 9b       	sbis	0x0e, 7	; 14
     c02:	fe cf       	rjmp	.-4      	; 0xc00 <LCD_Initializtion+0x86a>
	return SPDR;
     c04:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     c06:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c08:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c0a:	77 9b       	sbis	0x0e, 7	; 14
     c0c:	fe cf       	rjmp	.-4      	; 0xc0a <LCD_Initializtion+0x874>
	return SPDR;
     c0e:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c10:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c12:	77 9b       	sbis	0x0e, 7	; 14
     c14:	fe cf       	rjmp	.-4      	; 0xc12 <LCD_Initializtion+0x87c>
	return SPDR;
     c16:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     c18:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     c1a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     c1c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     c1e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c20:	84 e0       	ldi	r24, 0x04	; 4
     c22:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c24:	77 9b       	sbis	0x0e, 7	; 14
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <LCD_Initializtion+0x88e>
	return SPDR;
     c28:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c2e:	77 9b       	sbis	0x0e, 7	; 14
     c30:	fe cf       	rjmp	.-4      	; 0xc2e <LCD_Initializtion+0x898>
	return SPDR;
     c32:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     c34:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c36:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c38:	77 9b       	sbis	0x0e, 7	; 14
     c3a:	fe cf       	rjmp	.-4      	; 0xc38 <LCD_Initializtion+0x8a2>
	return SPDR;
     c3c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c3e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c40:	77 9b       	sbis	0x0e, 7	; 14
     c42:	fe cf       	rjmp	.-4      	; 0xc40 <LCD_Initializtion+0x8aa>
	return SPDR;
     c44:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     c46:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     c48:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     c4a:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     c4c:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c4e:	84 e0       	ldi	r24, 0x04	; 4
     c50:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c52:	77 9b       	sbis	0x0e, 7	; 14
     c54:	fe cf       	rjmp	.-4      	; 0xc52 <LCD_Initializtion+0x8bc>
	return SPDR;
     c56:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c5c:	77 9b       	sbis	0x0e, 7	; 14
     c5e:	fe cf       	rjmp	.-4      	; 0xc5c <LCD_Initializtion+0x8c6>
	return SPDR;
     c60:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     c62:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c68:	77 9b       	sbis	0x0e, 7	; 14
     c6a:	fe cf       	rjmp	.-4      	; 0xc68 <LCD_Initializtion+0x8d2>
	return SPDR;
     c6c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c6e:	8f e3       	ldi	r24, 0x3F	; 63
     c70:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c72:	77 9b       	sbis	0x0e, 7	; 14
     c74:	fe cf       	rjmp	.-4      	; 0xc72 <LCD_Initializtion+0x8dc>
	return SPDR;
     c76:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     c78:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     c7a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     c7c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     c7e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c80:	84 e0       	ldi	r24, 0x04	; 4
     c82:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c84:	77 9b       	sbis	0x0e, 7	; 14
     c86:	fe cf       	rjmp	.-4      	; 0xc84 <LCD_Initializtion+0x8ee>
	return SPDR;
     c88:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c8e:	77 9b       	sbis	0x0e, 7	; 14
     c90:	fe cf       	rjmp	.-4      	; 0xc8e <LCD_Initializtion+0x8f8>
	return SPDR;
     c92:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     c94:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c96:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     c98:	77 9b       	sbis	0x0e, 7	; 14
     c9a:	fe cf       	rjmp	.-4      	; 0xc98 <LCD_Initializtion+0x902>
	return SPDR;
     c9c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     c9e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ca0:	77 9b       	sbis	0x0e, 7	; 14
     ca2:	fe cf       	rjmp	.-4      	; 0xca0 <LCD_Initializtion+0x90a>
	return SPDR;
     ca4:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     ca6:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     ca8:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     caa:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     cac:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     cb2:	77 9b       	sbis	0x0e, 7	; 14
     cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <LCD_Initializtion+0x91c>
	return SPDR;
     cb6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     cb8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     cba:	77 9b       	sbis	0x0e, 7	; 14
     cbc:	fe cf       	rjmp	.-4      	; 0xcba <LCD_Initializtion+0x924>
	return SPDR;
     cbe:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     cc0:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     cc2:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     cc4:	77 9b       	sbis	0x0e, 7	; 14
     cc6:	fe cf       	rjmp	.-4      	; 0xcc4 <LCD_Initializtion+0x92e>
	return SPDR;
     cc8:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     cca:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ccc:	77 9b       	sbis	0x0e, 7	; 14
     cce:	fe cf       	rjmp	.-4      	; 0xccc <LCD_Initializtion+0x936>
	return SPDR;
     cd0:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     cd2:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     cd4:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     cd6:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     cd8:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     cde:	77 9b       	sbis	0x0e, 7	; 14
     ce0:	fe cf       	rjmp	.-4      	; 0xcde <LCD_Initializtion+0x948>
	return SPDR;
     ce2:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ce8:	77 9b       	sbis	0x0e, 7	; 14
     cea:	fe cf       	rjmp	.-4      	; 0xce8 <LCD_Initializtion+0x952>
	return SPDR;
     cec:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     cee:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     cf0:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     cf2:	77 9b       	sbis	0x0e, 7	; 14
     cf4:	fe cf       	rjmp	.-4      	; 0xcf2 <LCD_Initializtion+0x95c>
	return SPDR;
     cf6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     cf8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     cfa:	77 9b       	sbis	0x0e, 7	; 14
     cfc:	fe cf       	rjmp	.-4      	; 0xcfa <LCD_Initializtion+0x964>
	return SPDR;
     cfe:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     d00:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     d02:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     d04:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     d06:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d0c:	77 9b       	sbis	0x0e, 7	; 14
     d0e:	fe cf       	rjmp	.-4      	; 0xd0c <LCD_Initializtion+0x976>
	return SPDR;
     d10:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d12:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d14:	77 9b       	sbis	0x0e, 7	; 14
     d16:	fe cf       	rjmp	.-4      	; 0xd14 <LCD_Initializtion+0x97e>
	return SPDR;
     d18:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     d1a:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d1c:	81 e7       	ldi	r24, 0x71	; 113
     d1e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d20:	77 9b       	sbis	0x0e, 7	; 14
     d22:	fe cf       	rjmp	.-4      	; 0xd20 <LCD_Initializtion+0x98a>
	return SPDR;
     d24:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d26:	80 e2       	ldi	r24, 0x20	; 32
     d28:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d2a:	77 9b       	sbis	0x0e, 7	; 14
     d2c:	fe cf       	rjmp	.-4      	; 0xd2a <LCD_Initializtion+0x994>
	return SPDR;
     d2e:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     d30:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     d32:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     d34:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     d36:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d38:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d3a:	77 9b       	sbis	0x0e, 7	; 14
     d3c:	fe cf       	rjmp	.-4      	; 0xd3a <LCD_Initializtion+0x9a4>
	return SPDR;
     d3e:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d44:	77 9b       	sbis	0x0e, 7	; 14
     d46:	fe cf       	rjmp	.-4      	; 0xd44 <LCD_Initializtion+0x9ae>
	return SPDR;
     d48:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     d4a:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d50:	77 9b       	sbis	0x0e, 7	; 14
     d52:	fe cf       	rjmp	.-4      	; 0xd50 <LCD_Initializtion+0x9ba>
	return SPDR;
     d54:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d5a:	77 9b       	sbis	0x0e, 7	; 14
     d5c:	fe cf       	rjmp	.-4      	; 0xd5a <LCD_Initializtion+0x9c4>
	return SPDR;
     d5e:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     d60:	96 9a       	sbi	0x12, 6	; 18
     d62:	80 e2       	ldi	r24, 0x20	; 32
     d64:	9e e4       	ldi	r25, 0x4E	; 78
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	f1 f7       	brne	.-4      	; 0xd66 <LCD_Initializtion+0x9d0>
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     d6a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     d6c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     d6e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d70:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d72:	77 9b       	sbis	0x0e, 7	; 14
     d74:	fe cf       	rjmp	.-4      	; 0xd72 <LCD_Initializtion+0x9dc>
	return SPDR;
     d76:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d7c:	77 9b       	sbis	0x0e, 7	; 14
     d7e:	fe cf       	rjmp	.-4      	; 0xd7c <LCD_Initializtion+0x9e6>
	return SPDR;
     d80:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     d82:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d88:	77 9b       	sbis	0x0e, 7	; 14
     d8a:	fe cf       	rjmp	.-4      	; 0xd88 <LCD_Initializtion+0x9f2>
	return SPDR;
     d8c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     d8e:	83 e1       	ldi	r24, 0x13	; 19
     d90:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     d92:	77 9b       	sbis	0x0e, 7	; 14
     d94:	fe cf       	rjmp	.-4      	; 0xd92 <LCD_Initializtion+0x9fc>
	return SPDR;
     d96:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     d98:	96 9a       	sbi	0x12, 6	; 18
	LCD_WriteReg( 0x100, 0x7120 );
	LCD_WriteReg( 0x007, 0x0103 );
	_delay_ms( 10 );
	LCD_WriteReg( 0x007, 0x0113 );	
	
	LCD_Clear(Red);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	98 ef       	ldi	r25, 0xF8	; 248
     d9e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Clear>
	
}
     da2:	08 95       	ret

00000da4 <LCD_GetPoint>:
* Attention		 : None
*******************************************************************************/
uint16_t LCD_GetPoint(uint16_t Xpos,uint16_t Ypos)
{

}
     da4:	08 95       	ret

00000da6 <LCD_SetPoint>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void LCD_SetPoint(uint16_t Xpos,uint16_t Ypos,uint16_t point)
{
     da6:	9c 01       	movw	r18, r24

	if( Xpos >= MAX_X || Ypos >= MAX_Y )
     da8:	80 3f       	cpi	r24, 0xF0	; 240
     daa:	91 05       	cpc	r25, r1
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <LCD_SetPoint+0xa>
     dae:	a9 c0       	rjmp	.+338    	; 0xf02 <LCD_SetPoint+0x15c>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	60 34       	cpi	r22, 0x40	; 64
     db4:	78 07       	cpc	r23, r24
     db6:	08 f0       	brcs	.+2      	; 0xdba <LCD_SetPoint+0x14>
     db8:	a4 c0       	rjmp	.+328    	; 0xf02 <LCD_SetPoint+0x15c>
	{
		return;
	}
	TOUCH_nCS_H();
     dba:	c4 9a       	sbi	0x18, 4	; 24
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     dbc:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     dbe:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     dc0:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     dc6:	77 9b       	sbis	0x0e, 7	; 14
     dc8:	fe cf       	rjmp	.-4      	; 0xdc6 <LCD_SetPoint+0x20>
	return SPDR;
     dca:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     dcc:	80 e1       	ldi	r24, 0x10	; 16
     dce:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     dd0:	77 9b       	sbis	0x0e, 7	; 14
     dd2:	fe cf       	rjmp	.-4      	; 0xdd0 <LCD_SetPoint+0x2a>
	return SPDR;
     dd4:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     dd6:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     dd8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     dda:	77 9b       	sbis	0x0e, 7	; 14
     ddc:	fe cf       	rjmp	.-4      	; 0xdda <LCD_SetPoint+0x34>
	return SPDR;
     dde:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     de0:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     de2:	77 9b       	sbis	0x0e, 7	; 14
     de4:	fe cf       	rjmp	.-4      	; 0xde2 <LCD_SetPoint+0x3c>
	return SPDR;
     de6:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     de8:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     dea:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     dec:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     dee:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     df4:	77 9b       	sbis	0x0e, 7	; 14
     df6:	fe cf       	rjmp	.-4      	; 0xdf4 <LCD_SetPoint+0x4e>
	return SPDR;
     df8:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     dfa:	82 e1       	ldi	r24, 0x12	; 18
     dfc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     dfe:	77 9b       	sbis	0x0e, 7	; 14
     e00:	fe cf       	rjmp	.-4      	; 0xdfe <LCD_SetPoint+0x58>
	return SPDR;
     e02:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     e04:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e06:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e08:	77 9b       	sbis	0x0e, 7	; 14
     e0a:	fe cf       	rjmp	.-4      	; 0xe08 <LCD_SetPoint+0x62>
	return SPDR;
     e0c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e0e:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e10:	77 9b       	sbis	0x0e, 7	; 14
     e12:	fe cf       	rjmp	.-4      	; 0xe10 <LCD_SetPoint+0x6a>
	return SPDR;
     e14:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     e16:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     e18:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     e1a:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     e1c:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e22:	77 9b       	sbis	0x0e, 7	; 14
     e24:	fe cf       	rjmp	.-4      	; 0xe22 <LCD_SetPoint+0x7c>
	return SPDR;
     e26:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e28:	81 e1       	ldi	r24, 0x11	; 17
     e2a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e2c:	77 9b       	sbis	0x0e, 7	; 14
     e2e:	fe cf       	rjmp	.-4      	; 0xe2c <LCD_SetPoint+0x86>
	return SPDR;
     e30:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     e32:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e34:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e36:	77 9b       	sbis	0x0e, 7	; 14
     e38:	fe cf       	rjmp	.-4      	; 0xe36 <LCD_SetPoint+0x90>
	return SPDR;
     e3a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e3c:	80 ef       	ldi	r24, 0xF0	; 240
     e3e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e40:	77 9b       	sbis	0x0e, 7	; 14
     e42:	fe cf       	rjmp	.-4      	; 0xe40 <LCD_SetPoint+0x9a>
	return SPDR;
     e44:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     e46:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     e48:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     e4a:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     e4c:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e52:	77 9b       	sbis	0x0e, 7	; 14
     e54:	fe cf       	rjmp	.-4      	; 0xe52 <LCD_SetPoint+0xac>
	return SPDR;
     e56:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e58:	83 e1       	ldi	r24, 0x13	; 19
     e5a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e5c:	77 9b       	sbis	0x0e, 7	; 14
     e5e:	fe cf       	rjmp	.-4      	; 0xe5c <LCD_SetPoint+0xb6>
	return SPDR;
     e60:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     e62:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e68:	77 9b       	sbis	0x0e, 7	; 14
     e6a:	fe cf       	rjmp	.-4      	; 0xe68 <LCD_SetPoint+0xc2>
	return SPDR;
     e6c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e6e:	80 e4       	ldi	r24, 0x40	; 64
     e70:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e72:	77 9b       	sbis	0x0e, 7	; 14
     e74:	fe cf       	rjmp	.-4      	; 0xe72 <LCD_SetPoint+0xcc>
	return SPDR;
     e76:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     e78:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     e7a:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     e7c:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     e7e:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e84:	77 9b       	sbis	0x0e, 7	; 14
     e86:	fe cf       	rjmp	.-4      	; 0xe84 <LCD_SetPoint+0xde>
	return SPDR;
     e88:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e8a:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e8c:	77 9b       	sbis	0x0e, 7	; 14
     e8e:	fe cf       	rjmp	.-4      	; 0xe8c <LCD_SetPoint+0xe6>
	return SPDR;
     e90:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     e92:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e94:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e96:	77 9b       	sbis	0x0e, 7	; 14
     e98:	fe cf       	rjmp	.-4      	; 0xe96 <LCD_SetPoint+0xf0>
	return SPDR;
     e9a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     e9c:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     e9e:	77 9b       	sbis	0x0e, 7	; 14
     ea0:	fe cf       	rjmp	.-4      	; 0xe9e <LCD_SetPoint+0xf8>
	return SPDR;
     ea2:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     ea4:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     ea6:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     ea8:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     eaa:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     eb0:	77 9b       	sbis	0x0e, 7	; 14
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <LCD_SetPoint+0x10a>
	return SPDR;
     eb4:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     eba:	77 9b       	sbis	0x0e, 7	; 14
     ebc:	fe cf       	rjmp	.-4      	; 0xeba <LCD_SetPoint+0x114>
	return SPDR;
     ebe:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     ec0:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ec2:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ec4:	77 9b       	sbis	0x0e, 7	; 14
     ec6:	fe cf       	rjmp	.-4      	; 0xec4 <LCD_SetPoint+0x11e>
	return SPDR;
     ec8:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     eca:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ecc:	77 9b       	sbis	0x0e, 7	; 14
     ece:	fe cf       	rjmp	.-4      	; 0xecc <LCD_SetPoint+0x126>
	return SPDR;
     ed0:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     ed2:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
     ed4:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
     ed6:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
     ed8:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ede:	77 9b       	sbis	0x0e, 7	; 14
     ee0:	fe cf       	rjmp	.-4      	; 0xede <LCD_SetPoint+0x138>
	return SPDR;
     ee2:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ee8:	77 9b       	sbis	0x0e, 7	; 14
     eea:	fe cf       	rjmp	.-4      	; 0xee8 <LCD_SetPoint+0x142>
	return SPDR;
     eec:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
     eee:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ef0:	5f b9       	out	0x0f, r21	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     ef2:	77 9b       	sbis	0x0e, 7	; 14
     ef4:	fe cf       	rjmp	.-4      	; 0xef2 <LCD_SetPoint+0x14c>
	return SPDR;
     ef6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
     ef8:	4f b9       	out	0x0f, r20	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
     efa:	77 9b       	sbis	0x0e, 7	; 14
     efc:	fe cf       	rjmp	.-4      	; 0xefa <LCD_SetPoint+0x154>
	return SPDR;
     efe:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
     f00:	96 9a       	sbi	0x12, 6	; 18
     f02:	08 95       	ret

00000f04 <LCD_DrawLine>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/	 
void LCD_DrawLine( uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1 , uint16_t color )
{
     f04:	6f 92       	push	r6
     f06:	7f 92       	push	r7
     f08:	8f 92       	push	r8
     f0a:	9f 92       	push	r9
     f0c:	af 92       	push	r10
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	6c 01       	movw	r12, r24
     f22:	7b 01       	movw	r14, r22
     f24:	4a 01       	movw	r8, r20
     f26:	59 01       	movw	r10, r18
     f28:	38 01       	movw	r6, r16
  short dx,dy;
  short temp;

  if( x0 > x1 )
     f2a:	48 17       	cp	r20, r24
     f2c:	59 07       	cpc	r21, r25
     f2e:	10 f4       	brcc	.+4      	; 0xf34 <LCD_DrawLine+0x30>
     f30:	6a 01       	movw	r12, r20
     f32:	4c 01       	movw	r8, r24
  {
    temp = x1;
    x1 = x0;
    x0 = temp;   
  }
  if( y0 > y1 )
     f34:	ae 14       	cp	r10, r14
     f36:	bf 04       	cpc	r11, r15
     f38:	18 f4       	brcc	.+6      	; 0xf40 <LCD_DrawLine+0x3c>
     f3a:	c5 01       	movw	r24, r10
     f3c:	57 01       	movw	r10, r14
     f3e:	7c 01       	movw	r14, r24
    temp = y1;
    y1 = y0;
    y0 = temp;   
  }

  dx = x1-x0;
     f40:	94 01       	movw	r18, r8
     f42:	2c 19       	sub	r18, r12
     f44:	3d 09       	sbc	r19, r13
  dy = y1-y0;

  if( dx == 0 )
     f46:	61 f4       	brne	.+24     	; 0xf60 <LCD_DrawLine+0x5c>
  {
    do
    { 
      LCD_SetPoint(x0, y0, color);
     f48:	c6 01       	movw	r24, r12
     f4a:	b7 01       	movw	r22, r14
     f4c:	a3 01       	movw	r20, r6
     f4e:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
      y0++;
     f52:	08 94       	sec
     f54:	e1 1c       	adc	r14, r1
     f56:	f1 1c       	adc	r15, r1
    }
    while( y1 >= y0 ); 
     f58:	ae 14       	cp	r10, r14
     f5a:	bf 04       	cpc	r11, r15
     f5c:	a8 f7       	brcc	.-22     	; 0xf48 <LCD_DrawLine+0x44>
     f5e:	5b c0       	rjmp	.+182    	; 0x1016 <LCD_DrawLine+0x112>
    y1 = y0;
    y0 = temp;   
  }

  dx = x1-x0;
  dy = y1-y0;
     f60:	c5 01       	movw	r24, r10
     f62:	8e 19       	sub	r24, r14
     f64:	9f 09       	sbc	r25, r15
      y0++;
    }
    while( y1 >= y0 ); 
    return; 
  }
  if( dy == 0 )
     f66:	61 f4       	brne	.+24     	; 0xf80 <LCD_DrawLine+0x7c>
  {
    do
    {
      LCD_SetPoint(x0, y0, color);
     f68:	c6 01       	movw	r24, r12
     f6a:	b7 01       	movw	r22, r14
     f6c:	a3 01       	movw	r20, r6
     f6e:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
      x0++;
     f72:	08 94       	sec
     f74:	c1 1c       	adc	r12, r1
     f76:	d1 1c       	adc	r13, r1
    }
    while( x1 >= x0 ); 
     f78:	8c 14       	cp	r8, r12
     f7a:	9d 04       	cpc	r9, r13
     f7c:	a8 f7       	brcc	.-22     	; 0xf68 <LCD_DrawLine+0x64>
     f7e:	4b c0       	rjmp	.+150    	; 0x1016 <LCD_DrawLine+0x112>
     f80:	8c 01       	movw	r16, r24
     f82:	00 0f       	add	r16, r16
     f84:	11 1f       	adc	r17, r17
     f86:	ac 01       	movw	r20, r24
     f88:	42 1b       	sub	r20, r18
     f8a:	53 0b       	sbc	r21, r19
		return;
  }

	/* Bresenham's line algorithm  */
  if( dx > dy )
     f8c:	82 17       	cp	r24, r18
     f8e:	93 07       	cpc	r25, r19
     f90:	f4 f4       	brge	.+60     	; 0xfce <LCD_DrawLine+0xca>
  {
    temp = 2 * dy - dx;
     f92:	e8 01       	movw	r28, r16
     f94:	c2 1b       	sub	r28, r18
     f96:	d3 0b       	sbc	r29, r19
	    LCD_SetPoint(x0,y0,color);
	    x0++;
	    if( temp > 0 )
	    {
	      y0++;
	      temp += 2 * dy - 2 * dx; 
     f98:	5a 01       	movw	r10, r20
     f9a:	aa 0c       	add	r10, r10
     f9c:	bb 1c       	adc	r11, r11
     f9e:	13 c0       	rjmp	.+38     	; 0xfc6 <LCD_DrawLine+0xc2>
  if( dx > dy )
  {
    temp = 2 * dy - dx;
    while( x0 != x1 )
    {
	    LCD_SetPoint(x0,y0,color);
     fa0:	c6 01       	movw	r24, r12
     fa2:	b7 01       	movw	r22, r14
     fa4:	a3 01       	movw	r20, r6
     fa6:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
	    x0++;
	    if( temp > 0 )
     faa:	1c 16       	cp	r1, r28
     fac:	1d 06       	cpc	r1, r29
     fae:	34 f4       	brge	.+12     	; 0xfbc <LCD_DrawLine+0xb8>
	    {
	      y0++;
     fb0:	08 94       	sec
     fb2:	e1 1c       	adc	r14, r1
     fb4:	f1 1c       	adc	r15, r1
	      temp += 2 * dy - 2 * dx; 
     fb6:	ca 0d       	add	r28, r10
     fb8:	db 1d       	adc	r29, r11
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <LCD_DrawLine+0xbc>
	 	  }
      else         
      {
			  temp += 2 * dy;
     fbc:	c0 0f       	add	r28, r16
     fbe:	d1 1f       	adc	r29, r17
  {
    temp = 2 * dy - dx;
    while( x0 != x1 )
    {
	    LCD_SetPoint(x0,y0,color);
	    x0++;
     fc0:	08 94       	sec
     fc2:	c1 1c       	adc	r12, r1
     fc4:	d1 1c       	adc	r13, r1

	/* Bresenham's line algorithm  */
  if( dx > dy )
  {
    temp = 2 * dy - dx;
    while( x0 != x1 )
     fc6:	c8 14       	cp	r12, r8
     fc8:	d9 04       	cpc	r13, r9
     fca:	51 f7       	brne	.-44     	; 0xfa0 <LCD_DrawLine+0x9c>
     fcc:	1f c0       	rjmp	.+62     	; 0x100c <LCD_DrawLine+0x108>
    }
    LCD_SetPoint(x0,y0,color);
  }  
  else
  {
    temp = 2 * dx - dy;
     fce:	e9 01       	movw	r28, r18
     fd0:	cc 0f       	add	r28, r28
     fd2:	dd 1f       	adc	r29, r29
     fd4:	c8 1b       	sub	r28, r24
     fd6:	d9 0b       	sbc	r29, r25
	 	  LCD_SetPoint(x0,y0,color);     
      y0++;                 
      if( temp > 0 )           
      {
        x0++;               
        temp+=2*dy-2*dx; 
     fd8:	4a 01       	movw	r8, r20
     fda:	88 0c       	add	r8, r8
     fdc:	99 1c       	adc	r9, r9
     fde:	13 c0       	rjmp	.+38     	; 0x1006 <LCD_DrawLine+0x102>
  else
  {
    temp = 2 * dx - dy;
    while( y0 != y1 )
    {
	 	  LCD_SetPoint(x0,y0,color);     
     fe0:	c6 01       	movw	r24, r12
     fe2:	b7 01       	movw	r22, r14
     fe4:	a3 01       	movw	r20, r6
     fe6:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
      y0++;                 
      if( temp > 0 )           
     fea:	1c 16       	cp	r1, r28
     fec:	1d 06       	cpc	r1, r29
     fee:	34 f4       	brge	.+12     	; 0xffc <LCD_DrawLine+0xf8>
      {
        x0++;               
     ff0:	08 94       	sec
     ff2:	c1 1c       	adc	r12, r1
     ff4:	d1 1c       	adc	r13, r1
        temp+=2*dy-2*dx; 
     ff6:	c8 0d       	add	r28, r8
     ff8:	d9 1d       	adc	r29, r9
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <LCD_DrawLine+0xfc>
      }
      else
			{
        temp += 2 * dy;
     ffc:	c0 0f       	add	r28, r16
     ffe:	d1 1f       	adc	r29, r17
  {
    temp = 2 * dx - dy;
    while( y0 != y1 )
    {
	 	  LCD_SetPoint(x0,y0,color);     
      y0++;                 
    1000:	08 94       	sec
    1002:	e1 1c       	adc	r14, r1
    1004:	f1 1c       	adc	r15, r1
    LCD_SetPoint(x0,y0,color);
  }  
  else
  {
    temp = 2 * dx - dy;
    while( y0 != y1 )
    1006:	ea 14       	cp	r14, r10
    1008:	fb 04       	cpc	r15, r11
    100a:	51 f7       	brne	.-44     	; 0xfe0 <LCD_DrawLine+0xdc>
      else
			{
        temp += 2 * dy;
			}
    } 
    LCD_SetPoint(x0,y0,color);
    100c:	c6 01       	movw	r24, r12
    100e:	b7 01       	movw	r22, r14
    1010:	a3 01       	movw	r20, r6
    1012:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
	}
} 
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	bf 90       	pop	r11
    1028:	af 90       	pop	r10
    102a:	9f 90       	pop	r9
    102c:	8f 90       	pop	r8
    102e:	7f 90       	pop	r7
    1030:	6f 90       	pop	r6
    1032:	08 95       	ret

00001034 <LCD_Drawcircle>:
* Attention		 : None
*******************************************************************************/	 


void LCD_Drawcircle(int x0, int y0, int r, int color)
{
    1034:	2f 92       	push	r2
    1036:	3f 92       	push	r3
    1038:	4f 92       	push	r4
    103a:	5f 92       	push	r5
    103c:	6f 92       	push	r6
    103e:	7f 92       	push	r7
    1040:	8f 92       	push	r8
    1042:	9f 92       	push	r9
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	62 97       	sbiw	r28, 0x12	; 18
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	7c 01       	movw	r14, r24
    106a:	5b 01       	movw	r10, r22
    106c:	5a 8b       	std	Y+18, r21	; 0x12
    106e:	49 8b       	std	Y+17, r20	; 0x11
    1070:	69 01       	movw	r12, r18
    int  xx, yy;                                  

    int  di;                                           
   
 
   if(0==r) return;
    1072:	41 15       	cp	r20, r1
    1074:	51 05       	cpc	r21, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <LCD_Drawcircle+0x46>
    1078:	20 c1       	rjmp	.+576    	; 0x12ba <__stack+0x1bb>
   

   draw_x0 = draw_x1 = x0;
   draw_y0 = draw_y1 = y0 + r;
    107a:	9a 01       	movw	r18, r20
    107c:	26 0f       	add	r18, r22
    107e:	37 1f       	adc	r19, r23
    1080:	3c 87       	std	Y+12, r19	; 0x0c
    1082:	2b 87       	std	Y+11, r18	; 0x0b
   if(draw_y0<MAX_Y) LCD_SetPoint(draw_x0, draw_y0, color);        // 90?¨¨
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	20 34       	cpi	r18, 0x40	; 64
    1088:	38 07       	cpc	r19, r24
    108a:	2c f4       	brge	.+10     	; 0x1096 <LCD_Drawcircle+0x62>
    108c:	c7 01       	movw	r24, r14
    108e:	b9 01       	movw	r22, r18
    1090:	a6 01       	movw	r20, r12
    1092:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
        
   draw_x2 = draw_x3 = x0;
   draw_y2 = draw_y3 = y0 - r;
    1096:	15 01       	movw	r2, r10
    1098:	e9 89       	ldd	r30, Y+17	; 0x11
    109a:	fa 89       	ldd	r31, Y+18	; 0x12
    109c:	2e 1a       	sub	r2, r30
    109e:	3f 0a       	sbc	r3, r31
   if(draw_y2>=0) LCD_SetPoint(draw_x2, draw_y2, color);                        // 270?¨¨
    10a0:	37 fc       	sbrc	r3, 7
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <LCD_Drawcircle+0x7a>
    10a4:	c7 01       	movw	r24, r14
    10a6:	b1 01       	movw	r22, r2
    10a8:	a6 01       	movw	r20, r12
    10aa:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
   
        
   draw_x4 = draw_x6 = x0 + r;
    10ae:	49 88       	ldd	r4, Y+17	; 0x11
    10b0:	5a 88       	ldd	r5, Y+18	; 0x12
    10b2:	4e 0c       	add	r4, r14
    10b4:	5f 1c       	adc	r5, r15
   draw_y4 = draw_y6 = y0;
   if(draw_x4<MAX_X) LCD_SetPoint(draw_x4, draw_y4, color);        // 0?¨¨
    10b6:	f0 ef       	ldi	r31, 0xF0	; 240
    10b8:	4f 16       	cp	r4, r31
    10ba:	51 04       	cpc	r5, r1
    10bc:	2c f4       	brge	.+10     	; 0x10c8 <LCD_Drawcircle+0x94>
    10be:	c2 01       	movw	r24, r4
    10c0:	b5 01       	movw	r22, r10
    10c2:	a6 01       	movw	r20, r12
    10c4:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
   
   draw_x5 = draw_x7 = x0 - r;
    10c8:	37 01       	movw	r6, r14
    10ca:	29 89       	ldd	r18, Y+17	; 0x11
    10cc:	3a 89       	ldd	r19, Y+18	; 0x12
    10ce:	62 1a       	sub	r6, r18
    10d0:	73 0a       	sbc	r7, r19
   draw_y5 = draw_y7 = y0;
   if(draw_x5>=0) LCD_SetPoint(draw_x5, draw_y5, color);                        // 180?¨¨   
    10d2:	77 fc       	sbrc	r7, 7
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <LCD_Drawcircle+0xac>
    10d6:	c3 01       	movw	r24, r6
    10d8:	b5 01       	movw	r22, r10
    10da:	a6 01       	movw	r20, r12
    10dc:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
   if(1==r) return;                                        // ¨¨???????a1?ê??¨°¨°??2?-¨a¨o
    10e0:	89 89       	ldd	r24, Y+17	; 0x11
    10e2:	9a 89       	ldd	r25, Y+18	; 0x12
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	91 05       	cpc	r25, r1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <LCD_Drawcircle+0xb8>
    10ea:	e7 c0       	rjmp	.+462    	; 0x12ba <__stack+0x1bb>
   
   
   /* ¨o1¨??Bresenham?¤?§??DD?-?2 */
   di = 3 - 2*r;                                        // 3?¨o???￥??2??à?¨￠?
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	00 27       	eor	r16, r16
    10f2:	11 27       	eor	r17, r17
    10f4:	08 1b       	sub	r16, r24
    10f6:	19 0b       	sbc	r17, r25
    10f8:	0d 5f       	subi	r16, 0xFD	; 253
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
    10fc:	47 01       	movw	r8, r14
    10fe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1100:	fc 85       	ldd	r31, Y+12	; 0x0c
    1102:	f8 8b       	std	Y+16, r31	; 0x10
    1104:	ef 87       	std	Y+15, r30	; 0x0f
    1106:	fe 86       	std	Y+14, r15	; 0x0e
    1108:	ed 86       	std	Y+13, r14	; 0x0d
    110a:	3a 86       	std	Y+10, r3	; 0x0a
    110c:	29 86       	std	Y+9, r2	; 0x09
    110e:	58 86       	std	Y+8, r5	; 0x08
    1110:	4f 82       	std	Y+7, r4	; 0x07
    1112:	75 01       	movw	r14, r10
    1114:	7e 82       	std	Y+6, r7	; 0x06
    1116:	6d 82       	std	Y+5, r6	; 0x05
    1118:	29 89       	ldd	r18, Y+17	; 0x11
    111a:	3a 89       	ldd	r19, Y+18	; 0x12
    111c:	3c 83       	std	Y+4, r19	; 0x04
    111e:	2b 83       	std	Y+3, r18	; 0x03
    1120:	1a 8a       	std	Y+18, r1	; 0x12
    1122:	19 8a       	std	Y+17, r1	; 0x11
    1124:	1a 82       	std	Y+2, r1	; 0x02
    1126:	19 82       	std	Y+1, r1	; 0x01
    1128:	c0 c0       	rjmp	.+384    	; 0x12aa <__stack+0x1ab>
   
   xx = 0;
   yy = r;        
   while(xx<yy)
   {  if(di<0)
    112a:	17 ff       	sbrs	r17, 7
    112c:	07 c0       	rjmp	.+14     	; 0x113c <__stack+0x3d>
          {  di += 4*xx + 6;              
    112e:	0a 5f       	subi	r16, 0xFA	; 250
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	08 0f       	add	r16, r24
    1138:	19 1f       	adc	r17, r25
    113a:	35 c0       	rjmp	.+106    	; 0x11a6 <__stack+0xa7>
          }
          else
          {  di += 4*(xx - yy) + 10;
    113c:	06 5f       	subi	r16, 0xF6	; 246
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	89 89       	ldd	r24, Y+17	; 0x11
    1142:	9a 89       	ldd	r25, Y+18	; 0x12
    1144:	eb 81       	ldd	r30, Y+3	; 0x03
    1146:	fc 81       	ldd	r31, Y+4	; 0x04
    1148:	8e 1b       	sub	r24, r30
    114a:	9f 0b       	sbc	r25, r31
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	08 0f       	add	r16, r24
    1156:	19 1f       	adc	r17, r25
          
             yy--;          
    1158:	31 97       	sbiw	r30, 0x01	; 1
    115a:	fc 83       	std	Y+4, r31	; 0x04
    115c:	eb 83       	std	Y+3, r30	; 0x03
                 draw_y0--;
    115e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1160:	38 89       	ldd	r19, Y+16	; 0x10
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	30 40       	sbci	r19, 0x00	; 0
    1166:	38 8b       	std	Y+16, r19	; 0x10
    1168:	2f 87       	std	Y+15, r18	; 0x0f
                 draw_y1--;
    116a:	8b 85       	ldd	r24, Y+11	; 0x0b
    116c:	9c 85       	ldd	r25, Y+12	; 0x0c
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9c 87       	std	Y+12, r25	; 0x0c
    1172:	8b 87       	std	Y+11, r24	; 0x0b
                 draw_y2++;
    1174:	e9 85       	ldd	r30, Y+9	; 0x09
    1176:	fa 85       	ldd	r31, Y+10	; 0x0a
    1178:	31 96       	adiw	r30, 0x01	; 1
    117a:	fa 87       	std	Y+10, r31	; 0x0a
    117c:	e9 87       	std	Y+9, r30	; 0x09
                 draw_y3++;
    117e:	08 94       	sec
    1180:	21 1c       	adc	r2, r1
    1182:	31 1c       	adc	r3, r1
                 draw_x4--;
    1184:	2f 81       	ldd	r18, Y+7	; 0x07
    1186:	38 85       	ldd	r19, Y+8	; 0x08
    1188:	21 50       	subi	r18, 0x01	; 1
    118a:	30 40       	sbci	r19, 0x00	; 0
    118c:	38 87       	std	Y+8, r19	; 0x08
    118e:	2f 83       	std	Y+7, r18	; 0x07
                 draw_x5++;
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
                 draw_x6--;
    119a:	08 94       	sec
    119c:	41 08       	sbc	r4, r1
    119e:	51 08       	sbc	r5, r1
                 draw_x7++;                 
    11a0:	08 94       	sec
    11a2:	61 1c       	adc	r6, r1
    11a4:	71 1c       	adc	r7, r1
          }
          
          xx++;   
    11a6:	e9 89       	ldd	r30, Y+17	; 0x11
    11a8:	fa 89       	ldd	r31, Y+18	; 0x12
    11aa:	31 96       	adiw	r30, 0x01	; 1
    11ac:	fa 8b       	std	Y+18, r31	; 0x12
    11ae:	e9 8b       	std	Y+17, r30	; 0x11
          draw_x0++;
    11b0:	08 94       	sec
    11b2:	81 1c       	adc	r8, r1
    11b4:	91 1c       	adc	r9, r1
          draw_x1--;
    11b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    11b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    11ba:	21 50       	subi	r18, 0x01	; 1
    11bc:	30 40       	sbci	r19, 0x00	; 0
    11be:	3e 87       	std	Y+14, r19	; 0x0e
    11c0:	2d 87       	std	Y+13, r18	; 0x0d
          draw_x2++;
          draw_x3--;
          draw_y4++;
    11c2:	08 94       	sec
    11c4:	e1 1c       	adc	r14, r1
    11c6:	f1 1c       	adc	r15, r1
          draw_y5++;
          draw_y6--;
    11c8:	08 94       	sec
    11ca:	a1 08       	sbc	r10, r1
    11cc:	b1 08       	sbc	r11, r1
          draw_y7--;
                
        
          /* ¨°a?D??|ì?à???|ì?¨o??¤??¨2¨?DD?ì?¤???ì?¨2 */
          if( (draw_x0<=MAX_X)&&(draw_y0>=0) )        
    11ce:	31 ef       	ldi	r19, 0xF1	; 241
    11d0:	83 16       	cp	r8, r19
    11d2:	91 04       	cpc	r9, r1
    11d4:	54 f4       	brge	.+20     	; 0x11ea <__stack+0xeb>
    11d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d8:	98 89       	ldd	r25, Y+16	; 0x10
    11da:	97 fd       	sbrc	r25, 7
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <__stack+0xeb>
          {  LCD_SetPoint(draw_x0, draw_y0, color);
    11de:	c4 01       	movw	r24, r8
    11e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    11e2:	78 89       	ldd	r23, Y+16	; 0x10
    11e4:	a6 01       	movw	r20, r12
    11e6:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
          }            
          if( (draw_x1>=0)&&(draw_y1>=0) )        
    11ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    11ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    11ee:	f7 fd       	sbrc	r31, 7
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <__stack+0x105>
    11f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    11f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    11f6:	37 fd       	sbrc	r19, 7
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <__stack+0x105>
          {  LCD_SetPoint(draw_x1, draw_y1, color);
    11fa:	cf 01       	movw	r24, r30
    11fc:	b9 01       	movw	r22, r18
    11fe:	a6 01       	movw	r20, r12
    1200:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
          }
          if( (draw_x2<=MAX_X)&&(draw_y2<=MAX_Y) )        
    1204:	31 ef       	ldi	r19, 0xF1	; 241
    1206:	83 16       	cp	r8, r19
    1208:	91 04       	cpc	r9, r1
    120a:	5c f4       	brge	.+22     	; 0x1222 <__stack+0x123>
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	81 54       	subi	r24, 0x41	; 65
    1212:	91 40       	sbci	r25, 0x01	; 1
    1214:	34 f4       	brge	.+12     	; 0x1222 <__stack+0x123>
          {  LCD_SetPoint(draw_x2, draw_y2, color);   
    1216:	c4 01       	movw	r24, r8
    1218:	69 85       	ldd	r22, Y+9	; 0x09
    121a:	7a 85       	ldd	r23, Y+10	; 0x0a
    121c:	a6 01       	movw	r20, r12
    121e:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
          }
          if( (draw_x3>=0)&&(draw_y3<=MAX_Y) )        
    1222:	2d 85       	ldd	r18, Y+13	; 0x0d
    1224:	3e 85       	ldd	r19, Y+14	; 0x0e
    1226:	37 fd       	sbrc	r19, 7
    1228:	0b c0       	rjmp	.+22     	; 0x1240 <__stack+0x141>
    122a:	31 e4       	ldi	r19, 0x41	; 65
    122c:	23 16       	cp	r2, r19
    122e:	31 e0       	ldi	r19, 0x01	; 1
    1230:	33 06       	cpc	r3, r19
    1232:	34 f4       	brge	.+12     	; 0x1240 <__stack+0x141>
          {  LCD_SetPoint(draw_x3, draw_y3, color);
    1234:	8d 85       	ldd	r24, Y+13	; 0x0d
    1236:	9e 85       	ldd	r25, Y+14	; 0x0e
    1238:	b1 01       	movw	r22, r2
    123a:	a6 01       	movw	r20, r12
    123c:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
          }
          if( (draw_x4<=MAX_X)&&(draw_y4>=0) )        
    1240:	8f 81       	ldd	r24, Y+7	; 0x07
    1242:	98 85       	ldd	r25, Y+8	; 0x08
    1244:	81 3f       	cpi	r24, 0xF1	; 241
    1246:	91 05       	cpc	r25, r1
    1248:	34 f4       	brge	.+12     	; 0x1256 <__stack+0x157>
    124a:	f7 fc       	sbrc	r15, 7
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <__stack+0x157>
          {  LCD_SetPoint(draw_x4, draw_y4, color);
    124e:	b7 01       	movw	r22, r14
    1250:	a6 01       	movw	r20, r12
    1252:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
          }
          if( (draw_x5>=0)&&(draw_y5>=0) )        
    1256:	ed 81       	ldd	r30, Y+5	; 0x05
    1258:	fe 81       	ldd	r31, Y+6	; 0x06
    125a:	f7 fd       	sbrc	r31, 7
    125c:	07 c0       	rjmp	.+14     	; 0x126c <__stack+0x16d>
    125e:	f7 fc       	sbrc	r15, 7
    1260:	05 c0       	rjmp	.+10     	; 0x126c <__stack+0x16d>
          {  LCD_SetPoint(draw_x5, draw_y5, color);
    1262:	cf 01       	movw	r24, r30
    1264:	b7 01       	movw	r22, r14
    1266:	a6 01       	movw	r20, r12
    1268:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
          }
          if( (draw_x6<=MAX_X)&&(draw_y6<=MAX_Y) )        
    126c:	f1 ef       	ldi	r31, 0xF1	; 241
    126e:	4f 16       	cp	r4, r31
    1270:	51 04       	cpc	r5, r1
    1272:	54 f4       	brge	.+20     	; 0x1288 <__stack+0x189>
    1274:	21 e4       	ldi	r18, 0x41	; 65
    1276:	a2 16       	cp	r10, r18
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	b2 06       	cpc	r11, r18
    127c:	2c f4       	brge	.+10     	; 0x1288 <__stack+0x189>
          {  LCD_SetPoint(draw_x6, draw_y6, color);
    127e:	c2 01       	movw	r24, r4
    1280:	b5 01       	movw	r22, r10
    1282:	a6 01       	movw	r20, r12
    1284:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
          }
          if( (draw_x7>=0)&&(draw_y7<=MAX_Y) )        
    1288:	77 fc       	sbrc	r7, 7
    128a:	0a c0       	rjmp	.+20     	; 0x12a0 <__stack+0x1a1>
    128c:	31 e4       	ldi	r19, 0x41	; 65
    128e:	a3 16       	cp	r10, r19
    1290:	31 e0       	ldi	r19, 0x01	; 1
    1292:	b3 06       	cpc	r11, r19
    1294:	2c f4       	brge	.+10     	; 0x12a0 <__stack+0x1a1>
          {  LCD_SetPoint(draw_x7, draw_y7, color);
    1296:	c3 01       	movw	r24, r6
    1298:	b5 01       	movw	r22, r10
    129a:	a6 01       	movw	r20, r12
    129c:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	9a 81       	ldd	r25, Y+2	; 0x02
    12a4:	04 96       	adiw	r24, 0x04	; 4
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
   /* ¨o1¨??Bresenham?¤?§??DD?-?2 */
   di = 3 - 2*r;                                        // 3?¨o???￥??2??à?¨￠?
   
   xx = 0;
   yy = r;        
   while(xx<yy)
    12aa:	e9 89       	ldd	r30, Y+17	; 0x11
    12ac:	fa 89       	ldd	r31, Y+18	; 0x12
    12ae:	2b 81       	ldd	r18, Y+3	; 0x03
    12b0:	3c 81       	ldd	r19, Y+4	; 0x04
    12b2:	e2 17       	cp	r30, r18
    12b4:	f3 07       	cpc	r31, r19
    12b6:	0c f4       	brge	.+2      	; 0x12ba <__stack+0x1bb>
    12b8:	38 cf       	rjmp	.-400    	; 0x112a <__stack+0x2b>
          }
          if( (draw_x7>=0)&&(draw_y7<=MAX_Y) )        
          {  LCD_SetPoint(draw_x7, draw_y7, color);
          }
   }
}
    12ba:	62 96       	adiw	r28, 0x12	; 18
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	7f 90       	pop	r7
    12e0:	6f 90       	pop	r6
    12e2:	5f 90       	pop	r5
    12e4:	4f 90       	pop	r4
    12e6:	3f 90       	pop	r3
    12e8:	2f 90       	pop	r2
    12ea:	08 95       	ret

000012ec <DrawGrids>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void DrawGrids(void)
{
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
	uint16_t i;
	LCD_Clear(Grey);	
    12f4:	8e ed       	ldi	r24, 0xDE	; 222
    12f6:	97 ef       	ldi	r25, 0xF7	; 247
    12f8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Clear>
    12fc:	c0 e0       	ldi	r28, 0x00	; 0
    12fe:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0;i<MAX_Y;i=i+10)
	LCD_DrawLine(0,i,MAX_X,i,Black);
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	be 01       	movw	r22, r28
    1306:	40 ef       	ldi	r20, 0xF0	; 240
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	9e 01       	movw	r18, r28
    130c:	00 e0       	ldi	r16, 0x00	; 0
    130e:	10 e0       	ldi	r17, 0x00	; 0
    1310:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
*******************************************************************************/
void DrawGrids(void)
{
	uint16_t i;
	LCD_Clear(Grey);	
	for(i=0;i<MAX_Y;i=i+10)
    1314:	2a 96       	adiw	r28, 0x0a	; 10
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	c0 34       	cpi	r28, 0x40	; 64
    131a:	d8 07       	cpc	r29, r24
    131c:	89 f7       	brne	.-30     	; 0x1300 <DrawGrids+0x14>
    131e:	c0 e0       	ldi	r28, 0x00	; 0
    1320:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_DrawLine(0,i,MAX_X,i,Black);

	for(i=0;i<MAX_X;i=i+10)
	LCD_DrawLine(i,0,i,MAX_Y,Black);
    1322:	ce 01       	movw	r24, r28
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	ae 01       	movw	r20, r28
    132a:	20 e4       	ldi	r18, 0x40	; 64
    132c:	31 e0       	ldi	r19, 0x01	; 1
    132e:	00 e0       	ldi	r16, 0x00	; 0
    1330:	10 e0       	ldi	r17, 0x00	; 0
    1332:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
	uint16_t i;
	LCD_Clear(Grey);	
	for(i=0;i<MAX_Y;i=i+10)
	LCD_DrawLine(0,i,MAX_X,i,Black);

	for(i=0;i<MAX_X;i=i+10)
    1336:	2a 96       	adiw	r28, 0x0a	; 10
    1338:	c0 3f       	cpi	r28, 0xF0	; 240
    133a:	d1 05       	cpc	r29, r1
    133c:	91 f7       	brne	.-28     	; 0x1322 <DrawGrids+0x36>
	LCD_DrawLine(i,0,i,MAX_Y,Black);
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	08 95       	ret

00001348 <PutChar>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void PutChar( uint16_t Xpos, uint16_t Ypos, uint8_t ASCI, uint16_t charColor, uint16_t bkColor )
{
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	60 97       	sbiw	r28, 0x10	; 16
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	fc 01       	movw	r30, r24
    136a:	c2 2e       	mov	r12, r18
    136c:	e3 2e       	mov	r14, r19
    136e:	d0 2e       	mov	r13, r16
    1370:	f1 2e       	mov	r15, r17
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
    1372:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    1374:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
    1376:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    137c:	77 9b       	sbis	0x0e, 7	; 14
    137e:	fe cf       	rjmp	.-4      	; 0x137c <PutChar+0x34>
	return SPDR;
    1380:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1382:	80 e1       	ldi	r24, 0x10	; 16
    1384:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1386:	77 9b       	sbis	0x0e, 7	; 14
    1388:	fe cf       	rjmp	.-4      	; 0x1386 <PutChar+0x3e>
	return SPDR;
    138a:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
    138c:	c5 9a       	sbi	0x18, 5	; 24
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
    138e:	bf 2f       	mov	r27, r31
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1390:	ff b9       	out	0x0f, r31	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1392:	77 9b       	sbis	0x0e, 7	; 14
    1394:	fe cf       	rjmp	.-4      	; 0x1392 <PutChar+0x4a>
	return SPDR;
    1396:	8f b1       	in	r24, 0x0f	; 15
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
    1398:	ae 2f       	mov	r26, r30
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    139a:	ef b9       	out	0x0f, r30	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    139c:	77 9b       	sbis	0x0e, 7	; 14
    139e:	fe cf       	rjmp	.-4      	; 0x139c <PutChar+0x54>
	return SPDR;
    13a0:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
    13a2:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
    13a4:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    13a6:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
    13a8:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    13ae:	77 9b       	sbis	0x0e, 7	; 14
    13b0:	fe cf       	rjmp	.-4      	; 0x13ae <PutChar+0x66>
	return SPDR;
    13b2:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    13b4:	82 e1       	ldi	r24, 0x12	; 18
    13b6:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    13b8:	77 9b       	sbis	0x0e, 7	; 14
    13ba:	fe cf       	rjmp	.-4      	; 0x13b8 <PutChar+0x70>
	return SPDR;
    13bc:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
    13be:	c5 9a       	sbi	0x18, 5	; 24
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
    13c0:	57 2f       	mov	r21, r23
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    13c2:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    13c4:	77 9b       	sbis	0x0e, 7	; 14
    13c6:	fe cf       	rjmp	.-4      	; 0x13c4 <PutChar+0x7c>
	return SPDR;
    13c8:	8f b1       	in	r24, 0x0f	; 15
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
    13ca:	96 2f       	mov	r25, r22
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    13cc:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    13ce:	77 9b       	sbis	0x0e, 7	; 14
    13d0:	fe cf       	rjmp	.-4      	; 0x13ce <PutChar+0x86>
	return SPDR;
    13d2:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
    13d4:	96 9a       	sbi	0x12, 6	; 18
	  uint16_t i, j;
    uint8_t buffer[16], tmp_char;
	
	LCD_WriteReg(0x210,Xpos); 	//x start point
	LCD_WriteReg(0x212,Ypos); 	//y start point
	LCD_WriteReg(0x211,Xpos+7);	//x end point
    13d6:	9f 01       	movw	r18, r30
    13d8:	29 5f       	subi	r18, 0xF9	; 249
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
    13dc:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    13de:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
    13e0:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    13e6:	77 9b       	sbis	0x0e, 7	; 14
    13e8:	fe cf       	rjmp	.-4      	; 0x13e6 <PutChar+0x9e>
	return SPDR;
    13ea:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    13ec:	81 e1       	ldi	r24, 0x11	; 17
    13ee:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    13f0:	77 9b       	sbis	0x0e, 7	; 14
    13f2:	fe cf       	rjmp	.-4      	; 0x13f0 <PutChar+0xa8>
	return SPDR;
    13f4:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
    13f6:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    13f8:	3f b9       	out	0x0f, r19	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    13fa:	77 9b       	sbis	0x0e, 7	; 14
    13fc:	fe cf       	rjmp	.-4      	; 0x13fa <PutChar+0xb2>
	return SPDR;
    13fe:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1400:	2f b9       	out	0x0f, r18	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1402:	77 9b       	sbis	0x0e, 7	; 14
    1404:	fe cf       	rjmp	.-4      	; 0x1402 <PutChar+0xba>
	return SPDR;
    1406:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
    1408:	96 9a       	sbi	0x12, 6	; 18
    uint8_t buffer[16], tmp_char;
	
	LCD_WriteReg(0x210,Xpos); 	//x start point
	LCD_WriteReg(0x212,Ypos); 	//y start point
	LCD_WriteReg(0x211,Xpos+7);	//x end point
	LCD_WriteReg(0x213,Ypos+15);	//y end point
    140a:	61 5f       	subi	r22, 0xF1	; 241
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
    140e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    1410:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
    1412:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1418:	77 9b       	sbis	0x0e, 7	; 14
    141a:	fe cf       	rjmp	.-4      	; 0x1418 <PutChar+0xd0>
	return SPDR;
    141c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    141e:	83 e1       	ldi	r24, 0x13	; 19
    1420:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1422:	77 9b       	sbis	0x0e, 7	; 14
    1424:	fe cf       	rjmp	.-4      	; 0x1422 <PutChar+0xda>
	return SPDR;
    1426:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
    1428:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    142a:	7f b9       	out	0x0f, r23	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    142c:	77 9b       	sbis	0x0e, 7	; 14
    142e:	fe cf       	rjmp	.-4      	; 0x142c <PutChar+0xe4>
	return SPDR;
    1430:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1432:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1434:	77 9b       	sbis	0x0e, 7	; 14
    1436:	fe cf       	rjmp	.-4      	; 0x1434 <PutChar+0xec>
	return SPDR;
    1438:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
    143a:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
    143c:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    143e:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
    1440:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1446:	77 9b       	sbis	0x0e, 7	; 14
    1448:	fe cf       	rjmp	.-4      	; 0x1446 <PutChar+0xfe>
	return SPDR;
    144a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    144c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    144e:	77 9b       	sbis	0x0e, 7	; 14
    1450:	fe cf       	rjmp	.-4      	; 0x144e <PutChar+0x106>
	return SPDR;
    1452:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
    1454:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1456:	bf b9       	out	0x0f, r27	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1458:	77 9b       	sbis	0x0e, 7	; 14
    145a:	fe cf       	rjmp	.-4      	; 0x1458 <PutChar+0x110>
	return SPDR;
    145c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    145e:	af b9       	out	0x0f, r26	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1460:	77 9b       	sbis	0x0e, 7	; 14
    1462:	fe cf       	rjmp	.-4      	; 0x1460 <PutChar+0x118>
	return SPDR;
    1464:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
    1466:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
	//select command register	
	TOUCH_nCS_H();	
    1468:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    146a:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_L();	
    146c:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1472:	77 9b       	sbis	0x0e, 7	; 14
    1474:	fe cf       	rjmp	.-4      	; 0x1472 <PutChar+0x12a>
	return SPDR;
    1476:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    147c:	77 9b       	sbis	0x0e, 7	; 14
    147e:	fe cf       	rjmp	.-4      	; 0x147c <PutChar+0x134>
	return SPDR;
    1480:	8f b1       	in	r24, 0x0f	; 15
	TOUCH_nCS_H();	
	LCD_CS_L();
	LCD_RS_L();	
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
    1482:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1484:	5f b9       	out	0x0f, r21	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1486:	77 9b       	sbis	0x0e, 7	; 14
    1488:	fe cf       	rjmp	.-4      	; 0x1486 <PutChar+0x13e>
	return SPDR;
    148a:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    148c:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    148e:	77 9b       	sbis	0x0e, 7	; 14
    1490:	fe cf       	rjmp	.-4      	; 0x148e <PutChar+0x146>
	return SPDR;
    1492:	8f b1       	in	r24, 0x0f	; 15
	SPI0_communication((uint8_t)(LCD_Reg>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_Reg));
	LCD_RS_H();
	SPI0_communication((uint8_t)(LCD_RegValue>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(LCD_RegValue));
	LCD_CS_H();
    1494:	96 9a       	sbi	0x12, 6	; 18
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteIndex(uint16_t index)
{
	//select command register
	TOUCH_nCS_H();
    1496:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    1498:	96 98       	cbi	0x12, 6	; 18
//	_delay_ms(1);
	LCD_RS_L();
    149a:	c5 98       	cbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    14a0:	77 9b       	sbis	0x0e, 7	; 14
    14a2:	fe cf       	rjmp	.-4      	; 0x14a0 <PutChar+0x158>
	return SPDR;
    14a4:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    14aa:	77 9b       	sbis	0x0e, 7	; 14
    14ac:	fe cf       	rjmp	.-4      	; 0x14aa <PutChar+0x162>
	return SPDR;
    14ae:	8f b1       	in	r24, 0x0f	; 15
	LCD_RS_L();
	
	SPI0_communication((uint8_t)(index>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(index));

	LCD_RS_H();
    14b0:	c5 9a       	sbi	0x18, 5	; 24
//	_delay_ms(1);
	LCD_CS_H();
    14b2:	96 9a       	sbi	0x12, 6	; 18
	LCD_WriteReg(0x200,Xpos);	//RAM X address(0 ~ FF, actually 0 ~ EF)	
	LCD_WriteReg(0x201,Ypos);	//RAM Y address(0 ~ 1FF, actually 0 ~ 13F)
	
	LCD_WriteIndex(0x202);	//RAM Write index	
	
	LCD_CS_L();
    14b4:	96 98       	cbi	0x12, 6	; 18
	LCD_RS_H();
    14b6:	c5 9a       	sbi	0x18, 5	; 24
	
	GetASCIICode(buffer,ASCI);
    14b8:	8e 01       	movw	r16, r28
    14ba:	0f 5f       	subi	r16, 0xFF	; 255
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	c8 01       	movw	r24, r16
    14c0:	64 2f       	mov	r22, r20
    14c2:	0e 94 c1 00 	call	0x182	; 0x182 <GetASCIICode>
	//send data
	TOUCH_nCS_H();
	LCD_CS_L();
//	_delay_ms(1);
	LCD_RS_H();
	SPI0_communication((uint8_t)(data>>8));    //00000000 000000000
    14c6:	f8 01       	movw	r30, r16
	
	LCD_CS_L();
	LCD_RS_H();
	
	GetASCIICode(buffer,ASCI);
	for(i=0;i<16;i++)
    14c8:	be 01       	movw	r22, r28
    14ca:	6f 5e       	subi	r22, 0xEF	; 239
    14cc:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		tmp_char = buffer[i];
    14ce:	80 81       	ld	r24, Z
    14d0:	27 e0       	ldi	r18, 0x07	; 7
    14d2:	30 e0       	ldi	r19, 0x00	; 0
		for(j=0;j<8;j++)
		{
			if( (tmp_char >> 7 - j) & 0x01 == 0x01 )
    14d4:	48 2f       	mov	r20, r24
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	ca 01       	movw	r24, r20
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <PutChar+0x19a>
    14de:	95 95       	asr	r25
    14e0:	87 95       	ror	r24
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <PutChar+0x196>
    14e6:	80 ff       	sbrs	r24, 0
    14e8:	0b c0       	rjmp	.+22     	; 0x1500 <PutChar+0x1b8>
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteData(uint16_t data)
{
	//send data
	TOUCH_nCS_H();
    14ea:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    14ec:	96 98       	cbi	0x12, 6	; 18
//	_delay_ms(1);
	LCD_RS_H();
    14ee:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    14f0:	ef b8       	out	0x0f, r14	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    14f2:	77 9b       	sbis	0x0e, 7	; 14
    14f4:	fe cf       	rjmp	.-4      	; 0x14f2 <PutChar+0x1aa>
	return SPDR;
    14f6:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    14f8:	cf b8       	out	0x0f, r12	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    14fa:	77 9b       	sbis	0x0e, 7	; 14
    14fc:	fe cf       	rjmp	.-4      	; 0x14fa <PutChar+0x1b2>
    14fe:	0a c0       	rjmp	.+20     	; 0x1514 <PutChar+0x1cc>
* Attention		 : None
*******************************************************************************/
__inline void LCD_WriteData(uint16_t data)
{
	//send data
	TOUCH_nCS_H();
    1500:	c4 9a       	sbi	0x18, 4	; 24
	LCD_CS_L();
    1502:	96 98       	cbi	0x12, 6	; 18
//	_delay_ms(1);
	LCD_RS_H();
    1504:	c5 9a       	sbi	0x18, 5	; 24
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    1506:	ff b8       	out	0x0f, r15	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1508:	77 9b       	sbis	0x0e, 7	; 14
    150a:	fe cf       	rjmp	.-4      	; 0x1508 <PutChar+0x1c0>
	return SPDR;
    150c:	8f b1       	in	r24, 0x0f	; 15
}


uint8_t SPI0_communication(uint8_t send_char)
{
	SPDR = send_char;               //启动数据传输
    150e:	df b8       	out	0x0f, r13	; 15
	while (!(SPSR & (1<<SPIF)));    //等待传输结束
    1510:	77 9b       	sbis	0x0e, 7	; 14
    1512:	fe cf       	rjmp	.-4      	; 0x1510 <PutChar+0x1c8>
	return SPDR;
    1514:	8f b1       	in	r24, 0x0f	; 15
	LCD_CS_L();
//	_delay_ms(1);
	LCD_RS_H();
	SPI0_communication((uint8_t)(data>>8));    //00000000 000000000
	SPI0_communication((uint8_t)(data));
	LCD_CS_H();
    1516:	96 9a       	sbi	0x12, 6	; 18
    1518:	21 50       	subi	r18, 0x01	; 1
    151a:	30 40       	sbci	r19, 0x00	; 0
	
	GetASCIICode(buffer,ASCI);
	for(i=0;i<16;i++)
	{
		tmp_char = buffer[i];
		for(j=0;j<8;j++)
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	2f 3f       	cpi	r18, 0xFF	; 255
    1520:	38 07       	cpc	r19, r24
    1522:	d1 f6       	brne	.-76     	; 0x14d8 <PutChar+0x190>
    1524:	31 96       	adiw	r30, 0x01	; 1
	
	LCD_CS_L();
	LCD_RS_H();
	
	GetASCIICode(buffer,ASCI);
	for(i=0;i<16;i++)
    1526:	e6 17       	cp	r30, r22
    1528:	f7 07       	cpc	r31, r23
    152a:	89 f6       	brne	.-94     	; 0x14ce <PutChar+0x186>
			LCD_WriteData(bkColor);

		}	
	}

	LCD_CS_H();
    152c:	96 9a       	sbi	0x12, 6	; 18
}
    152e:	60 96       	adiw	r28, 0x10	; 16
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	08 95       	ret

0000154c <GUI_Text>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void GUI_Text(uint16_t Xpos, uint16_t Ypos, uint8_t *str,uint16_t Color, uint16_t bkColor)
{
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ec 01       	movw	r28, r24
    1566:	7b 01       	movw	r14, r22
    1568:	6a 01       	movw	r12, r20
    156a:	49 01       	movw	r8, r18
    156c:	58 01       	movw	r10, r16
    uint8_t TempChar;
    do
    {
        TempChar = *str++;  
    156e:	f6 01       	movw	r30, r12
    1570:	41 91       	ld	r20, Z+
    1572:	6f 01       	movw	r12, r30
        PutChar( Xpos, Ypos, TempChar, Color, bkColor );    
    1574:	ce 01       	movw	r24, r28
    1576:	b7 01       	movw	r22, r14
    1578:	94 01       	movw	r18, r8
    157a:	85 01       	movw	r16, r10
    157c:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
        if( Xpos < MAX_X )
    1580:	c0 3f       	cpi	r28, 0xF0	; 240
    1582:	d1 05       	cpc	r29, r1
    1584:	10 f4       	brcc	.+4      	; 0x158a <GUI_Text+0x3e>
        {
            Xpos += 8;;
    1586:	28 96       	adiw	r28, 0x08	; 8
    1588:	10 c0       	rjmp	.+32     	; 0x15aa <GUI_Text+0x5e>
        } 
        else if ( Ypos < MAX_Y)
    158a:	f0 e4       	ldi	r31, 0x40	; 64
    158c:	ef 16       	cp	r14, r31
    158e:	f1 e0       	ldi	r31, 0x01	; 1
    1590:	ff 06       	cpc	r15, r31
    1592:	28 f0       	brcs	.+10     	; 0x159e <GUI_Text+0x52>
    1594:	c0 e0       	ldi	r28, 0x00	; 0
    1596:	d0 e0       	ldi	r29, 0x00	; 0
    1598:	ee 24       	eor	r14, r14
    159a:	ff 24       	eor	r15, r15
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <GUI_Text+0x5e>
        {
            Xpos = 0;
            Ypos += 16;
    159e:	80 e1       	ldi	r24, 0x10	; 16
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	e8 0e       	add	r14, r24
    15a4:	f9 1e       	adc	r15, r25
    15a6:	c0 e0       	ldi	r28, 0x00	; 0
    15a8:	d0 e0       	ldi	r29, 0x00	; 0
            Xpos = 0;
            Ypos = 0;
        }   
				
    }
    while ( *str != 0 );
    15aa:	f6 01       	movw	r30, r12
    15ac:	80 81       	ld	r24, Z
    15ae:	88 23       	and	r24, r24
    15b0:	f1 f6       	brne	.-68     	; 0x156e <GUI_Text+0x22>
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	08 95       	ret

000015cc <setCalibrationMatrix>:
* Attention		 : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
    15cc:	2f 92       	push	r2
    15ce:	3f 92       	push	r3
    15d0:	4f 92       	push	r4
    15d2:	5f 92       	push	r5
    15d4:	6f 92       	push	r6
    15d6:	7f 92       	push	r7
    15d8:	8f 92       	push	r8
    15da:	9f 92       	push	r9
    15dc:	af 92       	push	r10
    15de:	bf 92       	push	r11
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	64 97       	sbiw	r28, 0x14	; 20
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	9c 8b       	std	Y+20, r25	; 0x14
    1602:	8b 8b       	std	Y+19, r24	; 0x13
    1604:	fb 01       	movw	r30, r22
    1606:	2a 01       	movw	r4, r20

  FunctionalState retTHRESHOLD = ENABLE ;
  /* K＝(X0－X2) (Y1－Y2)－(X1－X2) (Y0－Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
    1608:	20 81       	ld	r18, Z
    160a:	31 81       	ldd	r19, Z+1	; 0x01
    160c:	3a 8b       	std	Y+18, r19	; 0x12
    160e:	29 8b       	std	Y+17, r18	; 0x11
    1610:	20 84       	ldd	r2, Z+8	; 0x08
    1612:	31 84       	ldd	r3, Z+9	; 0x09
    1614:	22 19       	sub	r18, r2
    1616:	33 09       	sbc	r19, r3
    1618:	38 8b       	std	Y+16, r19	; 0x10
    161a:	2f 87       	std	Y+15, r18	; 0x0f
    161c:	46 81       	ldd	r20, Z+6	; 0x06
    161e:	57 81       	ldd	r21, Z+7	; 0x07
    1620:	5e 87       	std	Y+14, r21	; 0x0e
    1622:	4d 87       	std	Y+13, r20	; 0x0d
    1624:	82 85       	ldd	r24, Z+10	; 0x0a
    1626:	93 85       	ldd	r25, Z+11	; 0x0b
    1628:	9c 87       	std	Y+12, r25	; 0x0c
    162a:	8b 87       	std	Y+11, r24	; 0x0b
    162c:	48 1b       	sub	r20, r24
    162e:	59 0b       	sbc	r21, r25
    1630:	5a 87       	std	Y+10, r21	; 0x0a
    1632:	49 87       	std	Y+9, r20	; 0x09
    1634:	a4 81       	ldd	r26, Z+4	; 0x04
    1636:	b5 81       	ldd	r27, Z+5	; 0x05
    1638:	b8 87       	std	Y+8, r27	; 0x08
    163a:	af 83       	std	Y+7, r26	; 0x07
    163c:	a2 19       	sub	r26, r2
    163e:	b3 09       	sbc	r27, r3
    1640:	be 83       	std	Y+6, r27	; 0x06
    1642:	ad 83       	std	Y+5, r26	; 0x05
    1644:	22 81       	ldd	r18, Z+2	; 0x02
    1646:	33 81       	ldd	r19, Z+3	; 0x03
    1648:	3c 83       	std	Y+4, r19	; 0x04
    164a:	2b 83       	std	Y+3, r18	; 0x03
    164c:	28 1b       	sub	r18, r24
    164e:	39 0b       	sbc	r19, r25
    1650:	3a 83       	std	Y+2, r19	; 0x02
    1652:	29 83       	std	Y+1, r18	; 0x01
    1654:	8f 85       	ldd	r24, Y+15	; 0x0f
    1656:	98 89       	ldd	r25, Y+16	; 0x10
    1658:	48 9f       	mul	r20, r24
    165a:	b0 01       	movw	r22, r0
    165c:	49 9f       	mul	r20, r25
    165e:	70 0d       	add	r23, r0
    1660:	58 9f       	mul	r21, r24
    1662:	70 0d       	add	r23, r0
    1664:	11 24       	eor	r1, r1
    1666:	f9 01       	movw	r30, r18
    1668:	ea 9f       	mul	r30, r26
    166a:	90 01       	movw	r18, r0
    166c:	eb 9f       	mul	r30, r27
    166e:	30 0d       	add	r19, r0
    1670:	fa 9f       	mul	r31, r26
    1672:	30 0d       	add	r19, r0
    1674:	11 24       	eor	r1, r1
    1676:	62 1b       	sub	r22, r18
    1678:	73 0b       	sbc	r23, r19
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1682:	d2 01       	movw	r26, r4
    1684:	58 96       	adiw	r26, 0x18	; 24
    1686:	6d 93       	st	X+, r22
    1688:	7d 93       	st	X+, r23
    168a:	8d 93       	st	X+, r24
    168c:	9c 93       	st	X, r25
    168e:	5b 97       	sbiw	r26, 0x1b	; 27
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
  if( matrixPtr->Divider == 0 )
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <__eqsf2>
    169c:	88 23       	and	r24, r24
    169e:	11 f4       	brne	.+4      	; 0x16a4 <setCalibrationMatrix+0xd8>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	65 c1       	rjmp	.+714    	; 0x196e <setCalibrationMatrix+0x3a2>
    retTHRESHOLD = DISABLE;
  }
  else
  {
    /* A＝((XD0－XD2) (Y1－Y2)－(XD1－XD2) (Y0－Y2))／K	*/
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
    16a4:	eb 89       	ldd	r30, Y+19	; 0x13
    16a6:	fc 89       	ldd	r31, Y+20	; 0x14
    16a8:	a0 80       	ld	r10, Z
    16aa:	b1 80       	ldd	r11, Z+1	; 0x01
    16ac:	00 85       	ldd	r16, Z+8	; 0x08
    16ae:	11 85       	ldd	r17, Z+9	; 0x09
    16b0:	45 01       	movw	r8, r10
    16b2:	80 1a       	sub	r8, r16
    16b4:	91 0a       	sbc	r9, r17
    16b6:	84 e0       	ldi	r24, 0x04	; 4
    16b8:	68 2e       	mov	r6, r24
    16ba:	71 2c       	mov	r7, r1
    16bc:	6e 0e       	add	r6, r30
    16be:	7f 1e       	adc	r7, r31
    16c0:	c4 80       	ldd	r12, Z+4	; 0x04
    16c2:	d5 80       	ldd	r13, Z+5	; 0x05
    16c4:	76 01       	movw	r14, r12
    16c6:	e0 1a       	sub	r14, r16
    16c8:	f1 0a       	sbc	r15, r17
    16ca:	29 85       	ldd	r18, Y+9	; 0x09
    16cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ce:	82 9e       	mul	r8, r18
    16d0:	b0 01       	movw	r22, r0
    16d2:	83 9e       	mul	r8, r19
    16d4:	70 0d       	add	r23, r0
    16d6:	92 9e       	mul	r9, r18
    16d8:	70 0d       	add	r23, r0
    16da:	11 24       	eor	r1, r1
    16dc:	49 81       	ldd	r20, Y+1	; 0x01
    16de:	5a 81       	ldd	r21, Y+2	; 0x02
    16e0:	e4 9e       	mul	r14, r20
    16e2:	90 01       	movw	r18, r0
    16e4:	e5 9e       	mul	r14, r21
    16e6:	30 0d       	add	r19, r0
    16e8:	f4 9e       	mul	r15, r20
    16ea:	30 0d       	add	r19, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	62 1b       	sub	r22, r18
    16f0:	73 0b       	sbc	r23, r19
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    16fa:	d2 01       	movw	r26, r4
    16fc:	6d 93       	st	X+, r22
    16fe:	7d 93       	st	X+, r23
    1700:	8d 93       	st	X+, r24
    1702:	9c 93       	st	X, r25
    1704:	13 97       	sbiw	r26, 0x03	; 3
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
	/* B＝((X0－X2) (XD1－XD2)－(XD0－XD2) (X1－X2))／K	*/
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
    1706:	ef 85       	ldd	r30, Y+15	; 0x0f
    1708:	f8 89       	ldd	r31, Y+16	; 0x10
    170a:	ee 9e       	mul	r14, r30
    170c:	b0 01       	movw	r22, r0
    170e:	ef 9e       	mul	r14, r31
    1710:	70 0d       	add	r23, r0
    1712:	fe 9e       	mul	r15, r30
    1714:	70 0d       	add	r23, r0
    1716:	11 24       	eor	r1, r1
    1718:	4d 81       	ldd	r20, Y+5	; 0x05
    171a:	5e 81       	ldd	r21, Y+6	; 0x06
    171c:	84 9e       	mul	r8, r20
    171e:	90 01       	movw	r18, r0
    1720:	85 9e       	mul	r8, r21
    1722:	30 0d       	add	r19, r0
    1724:	94 9e       	mul	r9, r20
    1726:	30 0d       	add	r19, r0
    1728:	11 24       	eor	r1, r1
    172a:	62 1b       	sub	r22, r18
    172c:	73 0b       	sbc	r23, r19
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1736:	d2 01       	movw	r26, r4
    1738:	14 96       	adiw	r26, 0x04	; 4
    173a:	6d 93       	st	X+, r22
    173c:	7d 93       	st	X+, r23
    173e:	8d 93       	st	X+, r24
    1740:	9c 93       	st	X, r25
    1742:	17 97       	sbiw	r26, 0x07	; 7
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
    /* C＝(Y0(X2XD1－X1XD2)+Y1(X0XD2－X2XD0)+Y2(X1XD0－X0XD1))／K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
    1744:	e9 89       	ldd	r30, Y+17	; 0x11
    1746:	fa 89       	ldd	r31, Y+18	; 0x12
    1748:	0e 9f       	mul	r16, r30
    174a:	c0 01       	movw	r24, r0
    174c:	0f 9f       	mul	r16, r31
    174e:	90 0d       	add	r25, r0
    1750:	1e 9f       	mul	r17, r30
    1752:	90 0d       	add	r25, r0
    1754:	11 24       	eor	r1, r1
    1756:	a2 9c       	mul	r10, r2
    1758:	90 01       	movw	r18, r0
    175a:	a3 9c       	mul	r10, r3
    175c:	30 0d       	add	r19, r0
    175e:	b2 9c       	mul	r11, r2
    1760:	30 0d       	add	r19, r0
    1762:	11 24       	eor	r1, r1
    1764:	82 1b       	sub	r24, r18
    1766:	93 0b       	sbc	r25, r19
    1768:	2d 85       	ldd	r18, Y+13	; 0x0d
    176a:	3e 85       	ldd	r19, Y+14	; 0x0e
    176c:	82 9f       	mul	r24, r18
    176e:	b0 01       	movw	r22, r0
    1770:	83 9f       	mul	r24, r19
    1772:	70 0d       	add	r23, r0
    1774:	92 9f       	mul	r25, r18
    1776:	70 0d       	add	r23, r0
    1778:	11 24       	eor	r1, r1
    177a:	c2 9c       	mul	r12, r2
    177c:	90 01       	movw	r18, r0
    177e:	c3 9c       	mul	r12, r3
    1780:	30 0d       	add	r19, r0
    1782:	d2 9c       	mul	r13, r2
    1784:	30 0d       	add	r19, r0
    1786:	11 24       	eor	r1, r1
    1788:	8f 81       	ldd	r24, Y+7	; 0x07
    178a:	98 85       	ldd	r25, Y+8	; 0x08
    178c:	08 9f       	mul	r16, r24
    178e:	a0 01       	movw	r20, r0
    1790:	09 9f       	mul	r16, r25
    1792:	50 0d       	add	r21, r0
    1794:	18 9f       	mul	r17, r24
    1796:	50 0d       	add	r21, r0
    1798:	11 24       	eor	r1, r1
    179a:	24 1b       	sub	r18, r20
    179c:	35 0b       	sbc	r19, r21
    179e:	d9 01       	movw	r26, r18
    17a0:	eb 81       	ldd	r30, Y+3	; 0x03
    17a2:	fc 81       	ldd	r31, Y+4	; 0x04
    17a4:	ae 9f       	mul	r26, r30
    17a6:	90 01       	movw	r18, r0
    17a8:	af 9f       	mul	r26, r31
    17aa:	30 0d       	add	r19, r0
    17ac:	be 9f       	mul	r27, r30
    17ae:	30 0d       	add	r19, r0
    17b0:	11 24       	eor	r1, r1
    17b2:	62 0f       	add	r22, r18
    17b4:	73 1f       	adc	r23, r19
    17b6:	a8 9e       	mul	r10, r24
    17b8:	90 01       	movw	r18, r0
    17ba:	a9 9e       	mul	r10, r25
    17bc:	30 0d       	add	r19, r0
    17be:	b8 9e       	mul	r11, r24
    17c0:	30 0d       	add	r19, r0
    17c2:	11 24       	eor	r1, r1
    17c4:	89 89       	ldd	r24, Y+17	; 0x11
    17c6:	9a 89       	ldd	r25, Y+18	; 0x12
    17c8:	c8 9e       	mul	r12, r24
    17ca:	a0 01       	movw	r20, r0
    17cc:	c9 9e       	mul	r12, r25
    17ce:	50 0d       	add	r21, r0
    17d0:	d8 9e       	mul	r13, r24
    17d2:	50 0d       	add	r21, r0
    17d4:	11 24       	eor	r1, r1
    17d6:	24 1b       	sub	r18, r20
    17d8:	35 0b       	sbc	r19, r21
    17da:	d9 01       	movw	r26, r18
    17dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    17de:	fc 85       	ldd	r31, Y+12	; 0x0c
    17e0:	ae 9f       	mul	r26, r30
    17e2:	90 01       	movw	r18, r0
    17e4:	af 9f       	mul	r26, r31
    17e6:	30 0d       	add	r19, r0
    17e8:	be 9f       	mul	r27, r30
    17ea:	30 0d       	add	r19, r0
    17ec:	11 24       	eor	r1, r1
    17ee:	62 0f       	add	r22, r18
    17f0:	73 1f       	adc	r23, r19
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    17fa:	d2 01       	movw	r26, r4
    17fc:	18 96       	adiw	r26, 0x08	; 8
    17fe:	6d 93       	st	X+, r22
    1800:	7d 93       	st	X+, r23
    1802:	8d 93       	st	X+, r24
    1804:	9c 93       	st	X, r25
    1806:	1b 97       	sbiw	r26, 0x0b	; 11
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
    /* D＝((YD0－YD2) (Y1－Y2)－(YD1－YD2) (Y0－Y2))／K	*/
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
    1808:	eb 89       	ldd	r30, Y+19	; 0x13
    180a:	fc 89       	ldd	r31, Y+20	; 0x14
    180c:	a2 80       	ldd	r10, Z+2	; 0x02
    180e:	b3 80       	ldd	r11, Z+3	; 0x03
    retTHRESHOLD = DISABLE;
  }
  else
  {
    /* A＝((XD0－XD2) (Y1－Y2)－(XD1－XD2) (Y0－Y2))／K	*/
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
    1810:	38 96       	adiw	r30, 0x08	; 8
    /* C＝(Y0(X2XD1－X1XD2)+Y1(X0XD2－X2XD0)+Y2(X1XD0－X0XD1))／K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
    /* D＝((YD0－YD2) (Y1－Y2)－(YD1－YD2) (Y0－Y2))／K	*/
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
    1812:	02 81       	ldd	r16, Z+2	; 0x02
    1814:	13 81       	ldd	r17, Z+3	; 0x03
    1816:	45 01       	movw	r8, r10
    1818:	80 1a       	sub	r8, r16
    181a:	91 0a       	sbc	r9, r17
    181c:	d3 01       	movw	r26, r6
    181e:	12 96       	adiw	r26, 0x02	; 2
    1820:	cd 90       	ld	r12, X+
    1822:	dc 90       	ld	r13, X
    1824:	13 97       	sbiw	r26, 0x03	; 3
    1826:	76 01       	movw	r14, r12
    1828:	e0 1a       	sub	r14, r16
    182a:	f1 0a       	sbc	r15, r17
    182c:	e9 85       	ldd	r30, Y+9	; 0x09
    182e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1830:	8e 9e       	mul	r8, r30
    1832:	b0 01       	movw	r22, r0
    1834:	8f 9e       	mul	r8, r31
    1836:	70 0d       	add	r23, r0
    1838:	9e 9e       	mul	r9, r30
    183a:	70 0d       	add	r23, r0
    183c:	11 24       	eor	r1, r1
    183e:	49 81       	ldd	r20, Y+1	; 0x01
    1840:	5a 81       	ldd	r21, Y+2	; 0x02
    1842:	e4 9e       	mul	r14, r20
    1844:	90 01       	movw	r18, r0
    1846:	e5 9e       	mul	r14, r21
    1848:	30 0d       	add	r19, r0
    184a:	f4 9e       	mul	r15, r20
    184c:	30 0d       	add	r19, r0
    184e:	11 24       	eor	r1, r1
    1850:	62 1b       	sub	r22, r18
    1852:	73 0b       	sbc	r23, r19
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    185c:	d2 01       	movw	r26, r4
    185e:	1c 96       	adiw	r26, 0x0c	; 12
    1860:	6d 93       	st	X+, r22
    1862:	7d 93       	st	X+, r23
    1864:	8d 93       	st	X+, r24
    1866:	9c 93       	st	X, r25
    1868:	1f 97       	sbiw	r26, 0x0f	; 15
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
    /* E＝((X0－X2) (YD1－YD2)－(YD0－YD2) (X1－X2))／K	*/
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
    186a:	ef 85       	ldd	r30, Y+15	; 0x0f
    186c:	f8 89       	ldd	r31, Y+16	; 0x10
    186e:	ee 9e       	mul	r14, r30
    1870:	b0 01       	movw	r22, r0
    1872:	ef 9e       	mul	r14, r31
    1874:	70 0d       	add	r23, r0
    1876:	fe 9e       	mul	r15, r30
    1878:	70 0d       	add	r23, r0
    187a:	11 24       	eor	r1, r1
    187c:	4d 81       	ldd	r20, Y+5	; 0x05
    187e:	5e 81       	ldd	r21, Y+6	; 0x06
    1880:	84 9e       	mul	r8, r20
    1882:	90 01       	movw	r18, r0
    1884:	85 9e       	mul	r8, r21
    1886:	30 0d       	add	r19, r0
    1888:	94 9e       	mul	r9, r20
    188a:	30 0d       	add	r19, r0
    188c:	11 24       	eor	r1, r1
    188e:	62 1b       	sub	r22, r18
    1890:	73 0b       	sbc	r23, r19
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    189a:	d2 01       	movw	r26, r4
    189c:	50 96       	adiw	r26, 0x10	; 16
    189e:	6d 93       	st	X+, r22
    18a0:	7d 93       	st	X+, r23
    18a2:	8d 93       	st	X+, r24
    18a4:	9c 93       	st	X, r25
    18a6:	53 97       	sbiw	r26, 0x13	; 19
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
    /* F＝(Y0(X2YD1－X1YD2)+Y1(X0YD2－X2YD0)+Y2(X1YD0－X0YD1))／K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
    18a8:	e9 89       	ldd	r30, Y+17	; 0x11
    18aa:	fa 89       	ldd	r31, Y+18	; 0x12
    18ac:	0e 9f       	mul	r16, r30
    18ae:	c0 01       	movw	r24, r0
    18b0:	0f 9f       	mul	r16, r31
    18b2:	90 0d       	add	r25, r0
    18b4:	1e 9f       	mul	r17, r30
    18b6:	90 0d       	add	r25, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	a2 9c       	mul	r10, r2
    18bc:	90 01       	movw	r18, r0
    18be:	a3 9c       	mul	r10, r3
    18c0:	30 0d       	add	r19, r0
    18c2:	b2 9c       	mul	r11, r2
    18c4:	30 0d       	add	r19, r0
    18c6:	11 24       	eor	r1, r1
    18c8:	82 1b       	sub	r24, r18
    18ca:	93 0b       	sbc	r25, r19
    18cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    18ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    18d0:	82 9f       	mul	r24, r18
    18d2:	b0 01       	movw	r22, r0
    18d4:	83 9f       	mul	r24, r19
    18d6:	70 0d       	add	r23, r0
    18d8:	92 9f       	mul	r25, r18
    18da:	70 0d       	add	r23, r0
    18dc:	11 24       	eor	r1, r1
    18de:	c2 9c       	mul	r12, r2
    18e0:	90 01       	movw	r18, r0
    18e2:	c3 9c       	mul	r12, r3
    18e4:	30 0d       	add	r19, r0
    18e6:	d2 9c       	mul	r13, r2
    18e8:	30 0d       	add	r19, r0
    18ea:	11 24       	eor	r1, r1
    18ec:	8f 81       	ldd	r24, Y+7	; 0x07
    18ee:	98 85       	ldd	r25, Y+8	; 0x08
    18f0:	08 9f       	mul	r16, r24
    18f2:	a0 01       	movw	r20, r0
    18f4:	09 9f       	mul	r16, r25
    18f6:	50 0d       	add	r21, r0
    18f8:	18 9f       	mul	r17, r24
    18fa:	50 0d       	add	r21, r0
    18fc:	11 24       	eor	r1, r1
    18fe:	24 1b       	sub	r18, r20
    1900:	35 0b       	sbc	r19, r21
    1902:	d9 01       	movw	r26, r18
    1904:	eb 81       	ldd	r30, Y+3	; 0x03
    1906:	fc 81       	ldd	r31, Y+4	; 0x04
    1908:	ae 9f       	mul	r26, r30
    190a:	90 01       	movw	r18, r0
    190c:	af 9f       	mul	r26, r31
    190e:	30 0d       	add	r19, r0
    1910:	be 9f       	mul	r27, r30
    1912:	30 0d       	add	r19, r0
    1914:	11 24       	eor	r1, r1
    1916:	62 0f       	add	r22, r18
    1918:	73 1f       	adc	r23, r19
    191a:	a8 9e       	mul	r10, r24
    191c:	90 01       	movw	r18, r0
    191e:	a9 9e       	mul	r10, r25
    1920:	30 0d       	add	r19, r0
    1922:	b8 9e       	mul	r11, r24
    1924:	30 0d       	add	r19, r0
    1926:	11 24       	eor	r1, r1
    1928:	89 89       	ldd	r24, Y+17	; 0x11
    192a:	9a 89       	ldd	r25, Y+18	; 0x12
    192c:	c8 9e       	mul	r12, r24
    192e:	a0 01       	movw	r20, r0
    1930:	c9 9e       	mul	r12, r25
    1932:	50 0d       	add	r21, r0
    1934:	d8 9e       	mul	r13, r24
    1936:	50 0d       	add	r21, r0
    1938:	11 24       	eor	r1, r1
    193a:	24 1b       	sub	r18, r20
    193c:	35 0b       	sbc	r19, r21
    193e:	d9 01       	movw	r26, r18
    1940:	eb 85       	ldd	r30, Y+11	; 0x0b
    1942:	fc 85       	ldd	r31, Y+12	; 0x0c
    1944:	ae 9f       	mul	r26, r30
    1946:	90 01       	movw	r18, r0
    1948:	af 9f       	mul	r26, r31
    194a:	30 0d       	add	r19, r0
    194c:	be 9f       	mul	r27, r30
    194e:	30 0d       	add	r19, r0
    1950:	11 24       	eor	r1, r1
    1952:	62 0f       	add	r22, r18
    1954:	73 1f       	adc	r23, r19
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    195e:	d2 01       	movw	r26, r4
    1960:	54 96       	adiw	r26, 0x14	; 20
    1962:	6d 93       	st	X+, r22
    1964:	7d 93       	st	X+, r23
    1966:	8d 93       	st	X+, r24
    1968:	9c 93       	st	X, r25
    196a:	57 97       	sbiw	r26, 0x17	; 23
    196c:	81 e0       	ldi	r24, 0x01	; 1
//	printf("matrixPtr->Dn=%ld\r\n",matrixPtr->Dn);
//	printf("matrixPtr->En=%ld\r\n",matrixPtr->En);
//	printf("matrixPtr->Fn=%ld\r\n",matrixPtr->Fn);
  }
  return( retTHRESHOLD ) ;
}
    196e:	64 96       	adiw	r28, 0x14	; 20
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	ff 90       	pop	r15
    1984:	ef 90       	pop	r14
    1986:	df 90       	pop	r13
    1988:	cf 90       	pop	r12
    198a:	bf 90       	pop	r11
    198c:	af 90       	pop	r10
    198e:	9f 90       	pop	r9
    1990:	8f 90       	pop	r8
    1992:	7f 90       	pop	r7
    1994:	6f 90       	pop	r6
    1996:	5f 90       	pop	r5
    1998:	4f 90       	pop	r4
    199a:	3f 90       	pop	r3
    199c:	2f 90       	pop	r2
    199e:	08 95       	ret

000019a0 <TouchPanel_Calibrate2>:
* Return         : None
* Attention		 : None
*******************************************************************************/
void TouchPanel_Calibrate2(void)
{	
  ScreenSample[0].x = 2418; ScreenSample[0].y= 3024;
    19a0:	82 e7       	ldi	r24, 0x72	; 114
    19a2:	99 e0       	ldi	r25, 0x09	; 9
    19a4:	90 93 6f 08 	sts	0x086F, r25
    19a8:	80 93 6e 08 	sts	0x086E, r24
    19ac:	80 ed       	ldi	r24, 0xD0	; 208
    19ae:	9b e0       	ldi	r25, 0x0B	; 11
    19b0:	90 93 71 08 	sts	0x0871, r25
    19b4:	80 93 70 08 	sts	0x0870, r24
  ScreenSample[1].x = 3264; ScreenSample[1].y= 2496;
    19b8:	80 ec       	ldi	r24, 0xC0	; 192
    19ba:	9c e0       	ldi	r25, 0x0C	; 12
    19bc:	90 93 73 08 	sts	0x0873, r25
    19c0:	80 93 72 08 	sts	0x0872, r24
    19c4:	80 ec       	ldi	r24, 0xC0	; 192
    19c6:	99 e0       	ldi	r25, 0x09	; 9
    19c8:	90 93 75 08 	sts	0x0875, r25
    19cc:	80 93 74 08 	sts	0x0874, r24
  ScreenSample[2].x = 3688; ScreenSample[2].y= 3664;   	
    19d0:	88 e6       	ldi	r24, 0x68	; 104
    19d2:	9e e0       	ldi	r25, 0x0E	; 14
    19d4:	90 93 77 08 	sts	0x0877, r25
    19d8:	80 93 76 08 	sts	0x0876, r24
    19dc:	80 e5       	ldi	r24, 0x50	; 80
    19de:	9e e0       	ldi	r25, 0x0E	; 14
    19e0:	90 93 79 08 	sts	0x0879, r25
    19e4:	80 93 78 08 	sts	0x0878, r24
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
    19e8:	8e e3       	ldi	r24, 0x3E	; 62
    19ea:	97 e0       	ldi	r25, 0x07	; 7
    19ec:	6e e6       	ldi	r22, 0x6E	; 110
    19ee:	78 e0       	ldi	r23, 0x08	; 8
    19f0:	4a e7       	ldi	r20, 0x7A	; 122
    19f2:	58 e0       	ldi	r21, 0x08	; 8
    19f4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <setCalibrationMatrix>

} 
    19f8:	08 95       	ret

000019fa <Touch_Debug>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void Touch_Debug(void)
{
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
//	GUI_Text(0,YAD,"Coordinate:",Red,Grey);
//	GUI_Text(0,YAD,"XAD=",Red,Grey);
//	GUI_Text(0,YAD,"yAD=",Red,Grey);
/* */
	//x坐标
	PutChar(XAD,YAD,48+display.x/1000,Black,Grey); 			XAD=XAD+8;
    19fe:	80 91 64 08 	lds	r24, 0x0864
    1a02:	90 91 65 08 	lds	r25, 0x0865
    1a06:	68 ee       	ldi	r22, 0xE8	; 232
    1a08:	73 e0       	ldi	r23, 0x03	; 3
    1a0a:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1a0e:	46 2f       	mov	r20, r22
    1a10:	40 5d       	subi	r20, 0xD0	; 208
    1a12:	80 e2       	ldi	r24, 0x20	; 32
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	6e e3       	ldi	r22, 0x3E	; 62
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	0e ed       	ldi	r16, 0xDE	; 222
    1a20:	17 ef       	ldi	r17, 0xF7	; 247
    1a22:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
	PutChar(XAD,YAD,48+display.x%1000/100,Black,Grey);  XAD=XAD+8; 
    1a26:	80 91 64 08 	lds	r24, 0x0864
    1a2a:	90 91 65 08 	lds	r25, 0x0865
    1a2e:	68 ee       	ldi	r22, 0xE8	; 232
    1a30:	73 e0       	ldi	r23, 0x03	; 3
    1a32:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1a36:	64 e6       	ldi	r22, 0x64	; 100
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1a3e:	46 2f       	mov	r20, r22
    1a40:	40 5d       	subi	r20, 0xD0	; 208
    1a42:	88 e2       	ldi	r24, 0x28	; 40
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	6e e3       	ldi	r22, 0x3E	; 62
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
	PutChar(XAD,YAD,48+display.x%100/10,Black,Grey); 	  XAD=XAD+8;
    1a52:	80 91 64 08 	lds	r24, 0x0864
    1a56:	90 91 65 08 	lds	r25, 0x0865
    1a5a:	64 e6       	ldi	r22, 0x64	; 100
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1a62:	6a e0       	ldi	r22, 0x0A	; 10
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1a6a:	46 2f       	mov	r20, r22
    1a6c:	40 5d       	subi	r20, 0xD0	; 208
    1a6e:	80 e3       	ldi	r24, 0x30	; 48
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	6e e3       	ldi	r22, 0x3E	; 62
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
	PutChar(XAD,YAD,48+display.x%10,Black,Grey);     		XAD=XAD+8;
    1a7e:	80 91 64 08 	lds	r24, 0x0864
    1a82:	90 91 65 08 	lds	r25, 0x0865
    1a86:	6a e0       	ldi	r22, 0x0A	; 10
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1a8e:	48 2f       	mov	r20, r24
    1a90:	40 5d       	subi	r20, 0xD0	; 208
    1a92:	88 e3       	ldi	r24, 0x38	; 56
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	6e e3       	ldi	r22, 0x3E	; 62
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
	//y坐标
	XAD=32;
	PutChar(XAD,YAD+16,48+display.y/1000,Black,Grey);   		 XAD=XAD+8;
    1aa2:	80 91 66 08 	lds	r24, 0x0866
    1aa6:	90 91 67 08 	lds	r25, 0x0867
    1aaa:	68 ee       	ldi	r22, 0xE8	; 232
    1aac:	73 e0       	ldi	r23, 0x03	; 3
    1aae:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1ab2:	46 2f       	mov	r20, r22
    1ab4:	40 5d       	subi	r20, 0xD0	; 208
    1ab6:	80 e2       	ldi	r24, 0x20	; 32
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	6e e4       	ldi	r22, 0x4E	; 78
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
	PutChar(XAD,YAD+16,48+display.y%1000/100,Black,Grey);   XAD=XAD+8;
    1ac6:	80 91 66 08 	lds	r24, 0x0866
    1aca:	90 91 67 08 	lds	r25, 0x0867
    1ace:	68 ee       	ldi	r22, 0xE8	; 232
    1ad0:	73 e0       	ldi	r23, 0x03	; 3
    1ad2:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1ad6:	64 e6       	ldi	r22, 0x64	; 100
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1ade:	46 2f       	mov	r20, r22
    1ae0:	40 5d       	subi	r20, 0xD0	; 208
    1ae2:	88 e2       	ldi	r24, 0x28	; 40
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	6e e4       	ldi	r22, 0x4E	; 78
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
	PutChar(XAD,YAD+16,48+display.y%100/10,Black,Grey);     XAD=XAD+8;
    1af2:	80 91 66 08 	lds	r24, 0x0866
    1af6:	90 91 67 08 	lds	r25, 0x0867
    1afa:	64 e6       	ldi	r22, 0x64	; 100
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1b02:	6a e0       	ldi	r22, 0x0A	; 10
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1b0a:	46 2f       	mov	r20, r22
    1b0c:	40 5d       	subi	r20, 0xD0	; 208
    1b0e:	80 e3       	ldi	r24, 0x30	; 48
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	6e e4       	ldi	r22, 0x4E	; 78
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
	PutChar(XAD,YAD+16,48+display.y%10,Black,Grey);         XAD=XAD+8;
    1b1e:	80 91 66 08 	lds	r24, 0x0866
    1b22:	90 91 67 08 	lds	r25, 0x0867
    1b26:	6a e0       	ldi	r22, 0x0A	; 10
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	0e 94 ce 18 	call	0x319c	; 0x319c <__udivmodhi4>
    1b2e:	48 2f       	mov	r20, r24
    1b30:	40 5d       	subi	r20, 0xD0	; 208
    1b32:	88 e3       	ldi	r24, 0x38	; 56
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	6e e4       	ldi	r22, 0x4E	; 78
    1b38:	70 e0       	ldi	r23, 0x00	; 0
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	0e 94 a4 09 	call	0x1348	; 0x1348 <PutChar>
	/**/

}
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	08 95       	ret

00001b48 <getDisplayPoint>:
* Attention		 : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
    1b48:	2f 92       	push	r2
    1b4a:	3f 92       	push	r3
    1b4c:	4f 92       	push	r4
    1b4e:	5f 92       	push	r5
    1b50:	6f 92       	push	r6
    1b52:	7f 92       	push	r7
    1b54:	8f 92       	push	r8
    1b56:	9f 92       	push	r9
    1b58:	af 92       	push	r10
    1b5a:	bf 92       	push	r11
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	2e 97       	sbiw	r28, 0x0e	; 14
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	9a 87       	std	Y+10, r25	; 0x0a
    1b7e:	89 87       	std	Y+9, r24	; 0x09
    1b80:	7c 87       	std	Y+12, r23	; 0x0c
    1b82:	6b 87       	std	Y+11, r22	; 0x0b
    1b84:	5e 87       	std	Y+14, r21	; 0x0e
    1b86:	4d 87       	std	Y+13, r20	; 0x0d
  FunctionalState retTHRESHOLD =ENABLE ;

  if( matrixPtr->Divider != 0 )
    1b88:	da 01       	movw	r26, r20
    1b8a:	58 96       	adiw	r26, 0x18	; 24
    1b8c:	8d 91       	ld	r24, X+
    1b8e:	9d 91       	ld	r25, X+
    1b90:	0d 90       	ld	r0, X+
    1b92:	bc 91       	ld	r27, X
    1b94:	a0 2d       	mov	r26, r0
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	af 83       	std	Y+7, r26	; 0x07
    1b9c:	b8 87       	std	Y+8, r27	; 0x08
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__nesf2>
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <getDisplayPoint+0x6c>
    1bb2:	13 c1       	rjmp	.+550    	; 0x1dda <getDisplayPoint+0x292>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
    1bb4:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bb6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1bc4:	ad 85       	ldd	r26, Y+13	; 0x0d
    1bc6:	be 85       	ldd	r27, Y+14	; 0x0e
    1bc8:	2d 91       	ld	r18, X+
    1bca:	3d 91       	ld	r19, X+
    1bcc:	4d 91       	ld	r20, X+
    1bce:	5c 91       	ld	r21, X
    1bd0:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
    1bd4:	7b 01       	movw	r14, r22
    1bd6:	8c 01       	movw	r16, r24
    1bd8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bda:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bdc:	62 81       	ldd	r22, Z+2	; 0x02
    1bde:	73 81       	ldd	r23, Z+3	; 0x03
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1be8:	5b 01       	movw	r10, r22
    1bea:	6c 01       	movw	r12, r24
    1bec:	ad 85       	ldd	r26, Y+13	; 0x0d
    1bee:	be 85       	ldd	r27, Y+14	; 0x0e
    1bf0:	14 96       	adiw	r26, 0x04	; 4
    1bf2:	2d 91       	ld	r18, X+
    1bf4:	3d 91       	ld	r19, X+
    1bf6:	4d 91       	ld	r20, X+
    1bf8:	5c 91       	ld	r21, X
    1bfa:	17 97       	sbiw	r26, 0x07	; 7
    1bfc:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
    1c00:	9b 01       	movw	r18, r22
    1c02:	ac 01       	movw	r20, r24
    1c04:	c8 01       	movw	r24, r16
    1c06:	b7 01       	movw	r22, r14
    1c08:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3>
    1c0c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1c0e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1c10:	20 85       	ldd	r18, Z+8	; 0x08
    1c12:	31 85       	ldd	r19, Z+9	; 0x09
    1c14:	42 85       	ldd	r20, Z+10	; 0x0a
    1c16:	53 85       	ldd	r21, Z+11	; 0x0b
    1c18:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3>
    1c1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c20:	4f 81       	ldd	r20, Y+7	; 0x07
    1c22:	58 85       	ldd	r21, Y+8	; 0x08
    1c24:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__divsf3>
    1c28:	0e 94 00 12 	call	0x2400	; 0x2400 <__fixunssfsi>
    1c2c:	a9 85       	ldd	r26, Y+9	; 0x09
    1c2e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1c30:	6d 93       	st	X+, r22
    1c32:	7c 93       	st	X, r23
                      (matrixPtr->Bn * screenPtr->y) + 
                       matrixPtr->Cn 
                    ) / matrixPtr->Divider ;

	/* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
    1c34:	ed 85       	ldd	r30, Y+13	; 0x0d
    1c36:	fe 85       	ldd	r31, Y+14	; 0x0e
    1c38:	64 84       	ldd	r6, Z+12	; 0x0c
    1c3a:	75 84       	ldd	r7, Z+13	; 0x0d
    1c3c:	86 84       	ldd	r8, Z+14	; 0x0e
    1c3e:	97 84       	ldd	r9, Z+15	; 0x0f
    1c40:	20 88       	ldd	r2, Z+16	; 0x10
    1c42:	31 88       	ldd	r3, Z+17	; 0x11
    1c44:	42 88       	ldd	r4, Z+18	; 0x12
    1c46:	53 88       	ldd	r5, Z+19	; 0x13
    1c48:	84 89       	ldd	r24, Z+20	; 0x14
    1c4a:	95 89       	ldd	r25, Z+21	; 0x15
    1c4c:	a6 89       	ldd	r26, Z+22	; 0x16
    1c4e:	b7 89       	ldd	r27, Z+23	; 0x17
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	ab 83       	std	Y+3, r26	; 0x03
    1c56:	bc 83       	std	Y+4, r27	; 0x04
    1c58:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c5a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1c68:	9b 01       	movw	r18, r22
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	c4 01       	movw	r24, r8
    1c6e:	b3 01       	movw	r22, r6
    1c70:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
    1c74:	7b 01       	movw	r14, r22
    1c76:	8c 01       	movw	r16, r24
    1c78:	c2 01       	movw	r24, r4
    1c7a:	b1 01       	movw	r22, r2
    1c7c:	a6 01       	movw	r20, r12
    1c7e:	95 01       	movw	r18, r10
    1c80:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
    1c84:	9b 01       	movw	r18, r22
    1c86:	ac 01       	movw	r20, r24
    1c88:	c8 01       	movw	r24, r16
    1c8a:	b7 01       	movw	r22, r14
    1c8c:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3>
    1c90:	29 81       	ldd	r18, Y+1	; 0x01
    1c92:	3a 81       	ldd	r19, Y+2	; 0x02
    1c94:	4b 81       	ldd	r20, Y+3	; 0x03
    1c96:	5c 81       	ldd	r21, Y+4	; 0x04
    1c98:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3>
    1c9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1ca0:	4f 81       	ldd	r20, Y+7	; 0x07
    1ca2:	58 85       	ldd	r21, Y+8	; 0x08
    1ca4:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <__divsf3>
    1ca8:	0e 94 00 12 	call	0x2400	; 0x2400 <__fixunssfsi>
    1cac:	a9 85       	ldd	r26, Y+9	; 0x09
    1cae:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cb0:	13 96       	adiw	r26, 0x03	; 3
    1cb2:	7c 93       	st	X, r23
    1cb4:	6e 93       	st	-X, r22
    1cb6:	12 97       	sbiw	r26, 0x02	; 2
                      (matrixPtr->En * screenPtr->y) + 
                       matrixPtr->Fn 
                    ) / matrixPtr->Divider ;


printf("displayPtr->x=%ld\r\n",( (matrixPtr->Dn * screenPtr->x) + 
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <getDisplayPoint+0x172>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <getDisplayPoint+0x174>
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <getDisplayPoint+0x176>
    1cbe:	cd b6       	in	r12, 0x3d	; 61
    1cc0:	de b6       	in	r13, 0x3e	; 62
    1cc2:	08 94       	sec
    1cc4:	c1 1c       	adc	r12, r1
    1cc6:	d1 1c       	adc	r13, r1
    1cc8:	8a ef       	ldi	r24, 0xFA	; 250
    1cca:	96 e0       	ldi	r25, 0x06	; 6
    1ccc:	ed b7       	in	r30, 0x3d	; 61
    1cce:	fe b7       	in	r31, 0x3e	; 62
    1cd0:	92 83       	std	Z+2, r25	; 0x02
    1cd2:	81 83       	std	Z+1, r24	; 0x01
    1cd4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1cd6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1cd8:	6d 91       	ld	r22, X+
    1cda:	7c 91       	ld	r23, X
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1ce4:	9b 01       	movw	r18, r22
    1ce6:	ac 01       	movw	r20, r24
    1ce8:	c4 01       	movw	r24, r8
    1cea:	b3 01       	movw	r22, r6
    1cec:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
    1cf0:	7b 01       	movw	r14, r22
    1cf2:	8c 01       	movw	r16, r24
    1cf4:	eb 85       	ldd	r30, Y+11	; 0x0b
    1cf6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1cf8:	62 81       	ldd	r22, Z+2	; 0x02
    1cfa:	73 81       	ldd	r23, Z+3	; 0x03
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1d04:	9b 01       	movw	r18, r22
    1d06:	ac 01       	movw	r20, r24
    1d08:	c2 01       	movw	r24, r4
    1d0a:	b1 01       	movw	r22, r2
    1d0c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
    1d10:	9b 01       	movw	r18, r22
    1d12:	ac 01       	movw	r20, r24
    1d14:	c8 01       	movw	r24, r16
    1d16:	b7 01       	movw	r22, r14
    1d18:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3>
    1d1c:	29 81       	ldd	r18, Y+1	; 0x01
    1d1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d20:	4b 81       	ldd	r20, Y+3	; 0x03
    1d22:	5c 81       	ldd	r21, Y+4	; 0x04
    1d24:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3>
    1d28:	d6 01       	movw	r26, r12
    1d2a:	12 96       	adiw	r26, 0x02	; 2
    1d2c:	6d 93       	st	X+, r22
    1d2e:	7d 93       	st	X+, r23
    1d30:	8d 93       	st	X+, r24
    1d32:	9c 93       	st	X, r25
    1d34:	15 97       	sbiw	r26, 0x05	; 5
    1d36:	0e 94 2c 19 	call	0x3258	; 0x3258 <printf>
                      (matrixPtr->En * screenPtr->y) + 
                       matrixPtr->Fn 
                    ));
printf("displayPtr>y=%ld\r\n",( (matrixPtr->Dn * screenPtr->x) + 
    1d3a:	cd b6       	in	r12, 0x3d	; 61
    1d3c:	de b6       	in	r13, 0x3e	; 62
    1d3e:	08 94       	sec
    1d40:	c1 1c       	adc	r12, r1
    1d42:	d1 1c       	adc	r13, r1
    1d44:	8e e0       	ldi	r24, 0x0E	; 14
    1d46:	97 e0       	ldi	r25, 0x07	; 7
    1d48:	ed b7       	in	r30, 0x3d	; 61
    1d4a:	fe b7       	in	r31, 0x3e	; 62
    1d4c:	92 83       	std	Z+2, r25	; 0x02
    1d4e:	81 83       	std	Z+1, r24	; 0x01
    1d50:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d52:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d54:	6d 91       	ld	r22, X+
    1d56:	7c 91       	ld	r23, X
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1d60:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d62:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d64:	24 85       	ldd	r18, Z+12	; 0x0c
    1d66:	35 85       	ldd	r19, Z+13	; 0x0d
    1d68:	46 85       	ldd	r20, Z+14	; 0x0e
    1d6a:	57 85       	ldd	r21, Z+15	; 0x0f
    1d6c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
    1d70:	7b 01       	movw	r14, r22
    1d72:	8c 01       	movw	r16, r24
    1d74:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d76:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d78:	12 96       	adiw	r26, 0x02	; 2
    1d7a:	6d 91       	ld	r22, X+
    1d7c:	7c 91       	ld	r23, X
    1d7e:	13 97       	sbiw	r26, 0x03	; 3
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <__floatunsisf>
    1d88:	ed 85       	ldd	r30, Y+13	; 0x0d
    1d8a:	fe 85       	ldd	r31, Y+14	; 0x0e
    1d8c:	20 89       	ldd	r18, Z+16	; 0x10
    1d8e:	31 89       	ldd	r19, Z+17	; 0x11
    1d90:	42 89       	ldd	r20, Z+18	; 0x12
    1d92:	53 89       	ldd	r21, Z+19	; 0x13
    1d94:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3>
    1d98:	9b 01       	movw	r18, r22
    1d9a:	ac 01       	movw	r20, r24
    1d9c:	c8 01       	movw	r24, r16
    1d9e:	b7 01       	movw	r22, r14
    1da0:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3>
    1da4:	ad 85       	ldd	r26, Y+13	; 0x0d
    1da6:	be 85       	ldd	r27, Y+14	; 0x0e
    1da8:	54 96       	adiw	r26, 0x14	; 20
    1daa:	2d 91       	ld	r18, X+
    1dac:	3d 91       	ld	r19, X+
    1dae:	4d 91       	ld	r20, X+
    1db0:	5c 91       	ld	r21, X
    1db2:	57 97       	sbiw	r26, 0x17	; 23
    1db4:	0e 94 a9 13 	call	0x2752	; 0x2752 <__addsf3>
    1db8:	f6 01       	movw	r30, r12
    1dba:	62 83       	std	Z+2, r22	; 0x02
    1dbc:	73 83       	std	Z+3, r23	; 0x03
    1dbe:	84 83       	std	Z+4, r24	; 0x04
    1dc0:	95 83       	std	Z+5, r25	; 0x05
    1dc2:	0e 94 2c 19 	call	0x3258	; 0x3258 <printf>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	2d b7       	in	r18, 0x3d	; 61
    1dca:	3e b7       	in	r19, 0x3e	; 62
    1dcc:	2a 5f       	subi	r18, 0xFA	; 250
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	3e bf       	out	0x3e, r19	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	2d bf       	out	0x3d, r18	; 61
  else
  {
    retTHRESHOLD = DISABLE;
  }
  return(retTHRESHOLD);
} 
    1dda:	2e 96       	adiw	r28, 0x0e	; 14
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	8f 90       	pop	r8
    1dfe:	7f 90       	pop	r7
    1e00:	6f 90       	pop	r6
    1e02:	5f 90       	pop	r5
    1e04:	4f 90       	pop	r4
    1e06:	3f 90       	pop	r3
    1e08:	2f 90       	pop	r2
    1e0a:	08 95       	ret

00001e0c <DrawCross>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos,int color)
{
    1e0c:	2f 92       	push	r2
    1e0e:	3f 92       	push	r3
    1e10:	4f 92       	push	r4
    1e12:	5f 92       	push	r5
    1e14:	6f 92       	push	r6
    1e16:	7f 92       	push	r7
    1e18:	8f 92       	push	r8
    1e1a:	9f 92       	push	r9
    1e1c:	af 92       	push	r10
    1e1e:	bf 92       	push	r11
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <DrawCross+0x26>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <DrawCross+0x28>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	7c 01       	movw	r14, r24
    1e3a:	5b 01       	movw	r10, r22
    1e3c:	34 2e       	mov	r3, r20
    1e3e:	25 2e       	mov	r2, r21
  LCD_DrawLine(Xpos-15,Ypos,Xpos-2,Ypos,color);
    1e40:	41 ef       	ldi	r20, 0xF1	; 241
    1e42:	84 2e       	mov	r8, r20
    1e44:	4f ef       	ldi	r20, 0xFF	; 255
    1e46:	94 2e       	mov	r9, r20
    1e48:	88 0e       	add	r8, r24
    1e4a:	99 1e       	adc	r9, r25
    1e4c:	ac 01       	movw	r20, r24
    1e4e:	42 50       	subi	r20, 0x02	; 2
    1e50:	50 40       	sbci	r21, 0x00	; 0
    1e52:	c4 01       	movw	r24, r8
    1e54:	95 01       	movw	r18, r10
    1e56:	03 2d       	mov	r16, r3
    1e58:	12 2d       	mov	r17, r2
    1e5a:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
  LCD_DrawLine(Xpos+2,Ypos,Xpos+15,Ypos,color);
    1e5e:	3f e0       	ldi	r19, 0x0F	; 15
    1e60:	43 2e       	mov	r4, r19
    1e62:	51 2c       	mov	r5, r1
    1e64:	4e 0c       	add	r4, r14
    1e66:	5f 1c       	adc	r5, r15
    1e68:	c7 01       	movw	r24, r14
    1e6a:	02 96       	adiw	r24, 0x02	; 2
    1e6c:	b5 01       	movw	r22, r10
    1e6e:	a2 01       	movw	r20, r4
    1e70:	95 01       	movw	r18, r10
    1e72:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
  LCD_DrawLine(Xpos,Ypos-15,Xpos,Ypos-2,color);
    1e76:	21 ef       	ldi	r18, 0xF1	; 241
    1e78:	62 2e       	mov	r6, r18
    1e7a:	2f ef       	ldi	r18, 0xFF	; 255
    1e7c:	72 2e       	mov	r7, r18
    1e7e:	6a 0c       	add	r6, r10
    1e80:	7b 1c       	adc	r7, r11
    1e82:	95 01       	movw	r18, r10
    1e84:	22 50       	subi	r18, 0x02	; 2
    1e86:	30 40       	sbci	r19, 0x00	; 0
    1e88:	c7 01       	movw	r24, r14
    1e8a:	b3 01       	movw	r22, r6
    1e8c:	a7 01       	movw	r20, r14
    1e8e:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
  LCD_DrawLine(Xpos,Ypos+2,Xpos,Ypos+15,color);
    1e92:	9f e0       	ldi	r25, 0x0F	; 15
    1e94:	c9 2e       	mov	r12, r25
    1e96:	d1 2c       	mov	r13, r1
    1e98:	ca 0c       	add	r12, r10
    1e9a:	db 1c       	adc	r13, r11
    1e9c:	b5 01       	movw	r22, r10
    1e9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	c7 01       	movw	r24, r14
    1ea4:	a7 01       	movw	r20, r14
    1ea6:	96 01       	movw	r18, r12
    1ea8:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos-15,Ypos+15,Xpos-7,Ypos+15,color);
    1eac:	c7 01       	movw	r24, r14
    1eae:	07 97       	sbiw	r24, 0x07	; 7
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
    1eb4:	c4 01       	movw	r24, r8
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	4b 81       	ldd	r20, Y+3	; 0x03
    1eba:	5c 81       	ldd	r21, Y+4	; 0x04
    1ebc:	96 01       	movw	r18, r12
    1ebe:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
  LCD_DrawLine(Xpos-15,Ypos+7,Xpos-15,Ypos+15,color);
    1ec2:	f5 01       	movw	r30, r10
    1ec4:	37 96       	adiw	r30, 0x07	; 7
    1ec6:	fa 83       	std	Y+2, r31	; 0x02
    1ec8:	e9 83       	std	Y+1, r30	; 0x01
    1eca:	c4 01       	movw	r24, r8
    1ecc:	bf 01       	movw	r22, r30
    1ece:	a4 01       	movw	r20, r8
    1ed0:	96 01       	movw	r18, r12
    1ed2:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>

  LCD_DrawLine(Xpos-15,Ypos-15,Xpos-7,Ypos-15,color);
    1ed6:	c4 01       	movw	r24, r8
    1ed8:	b3 01       	movw	r22, r6
    1eda:	4b 81       	ldd	r20, Y+3	; 0x03
    1edc:	5c 81       	ldd	r21, Y+4	; 0x04
    1ede:	93 01       	movw	r18, r6
    1ee0:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
  LCD_DrawLine(Xpos-15,Ypos-7,Xpos-15,Ypos-15,color);
    1ee4:	89 ef       	ldi	r24, 0xF9	; 249
    1ee6:	9f ef       	ldi	r25, 0xFF	; 255
    1ee8:	a8 0e       	add	r10, r24
    1eea:	b9 1e       	adc	r11, r25
    1eec:	c4 01       	movw	r24, r8
    1eee:	b5 01       	movw	r22, r10
    1ef0:	a4 01       	movw	r20, r8
    1ef2:	93 01       	movw	r18, r6
    1ef4:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>

  LCD_DrawLine(Xpos+7,Ypos+15,Xpos+15,Ypos+15,color);
    1ef8:	e7 e0       	ldi	r30, 0x07	; 7
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	ee 0e       	add	r14, r30
    1efe:	ff 1e       	adc	r15, r31
    1f00:	c7 01       	movw	r24, r14
    1f02:	b6 01       	movw	r22, r12
    1f04:	a2 01       	movw	r20, r4
    1f06:	96 01       	movw	r18, r12
    1f08:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
  LCD_DrawLine(Xpos+15,Ypos+7,Xpos+15,Ypos+15,color);
    1f0c:	c2 01       	movw	r24, r4
    1f0e:	69 81       	ldd	r22, Y+1	; 0x01
    1f10:	7a 81       	ldd	r23, Y+2	; 0x02
    1f12:	a2 01       	movw	r20, r4
    1f14:	96 01       	movw	r18, r12
    1f16:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>

  LCD_DrawLine(Xpos+7,Ypos-15,Xpos+15,Ypos-15,color);
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	b3 01       	movw	r22, r6
    1f1e:	a2 01       	movw	r20, r4
    1f20:	93 01       	movw	r18, r6
    1f22:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
  LCD_DrawLine(Xpos+15,Ypos-15,Xpos+15,Ypos-7,color);	  	
    1f26:	c2 01       	movw	r24, r4
    1f28:	b3 01       	movw	r22, r6
    1f2a:	a2 01       	movw	r20, r4
    1f2c:	95 01       	movw	r18, r10
    1f2e:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_DrawLine>
}	
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	bf 90       	pop	r11
    1f4c:	af 90       	pop	r10
    1f4e:	9f 90       	pop	r9
    1f50:	8f 90       	pop	r8
    1f52:	7f 90       	pop	r7
    1f54:	6f 90       	pop	r6
    1f56:	5f 90       	pop	r5
    1f58:	4f 90       	pop	r4
    1f5a:	3f 90       	pop	r3
    1f5c:	2f 90       	pop	r2
    1f5e:	08 95       	ret

00001f60 <TP_DrawPoint>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void TP_DrawPoint(uint16_t Xpos,uint16_t Ypos)
{
    1f60:	cf 92       	push	r12
    1f62:	df 92       	push	r13
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	7b 01       	movw	r14, r22
  LCD_SetPoint(Xpos,Ypos,Black);     /* Center point */
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
  LCD_SetPoint(Xpos+1,Ypos,Black);
    1f78:	68 01       	movw	r12, r16
    1f7a:	08 94       	sec
    1f7c:	c1 1c       	adc	r12, r1
    1f7e:	d1 1c       	adc	r13, r1
    1f80:	c6 01       	movw	r24, r12
    1f82:	b7 01       	movw	r22, r14
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
  LCD_SetPoint(Xpos,Ypos+1,Black);
    1f8c:	08 94       	sec
    1f8e:	e1 1c       	adc	r14, r1
    1f90:	f1 1c       	adc	r15, r1
    1f92:	c8 01       	movw	r24, r16
    1f94:	b7 01       	movw	r22, r14
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
  LCD_SetPoint(Xpos+1,Ypos+1,Black);	
    1f9e:	c6 01       	movw	r24, r12
    1fa0:	b7 01       	movw	r22, r14
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_SetPoint>
	
}	
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	ff 90       	pop	r15
    1fb0:	ef 90       	pop	r14
    1fb2:	df 90       	pop	r13
    1fb4:	cf 90       	pop	r12
    1fb6:	08 95       	ret

00001fb8 <GetTouchADC>:
* Input          : data:
* Output         : None
* Return         : Touchpanel AD value
******************************************************************************/
uint32_t GetTouchADC (unsigned char data)
{	  
    1fb8:	ef 92       	push	r14
    1fba:	ff 92       	push	r15
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
	uint32_t NUMH , NUML;
	uint32_t Num;
	
	LCD_CS_H()
    1fc0:	96 9a       	sbi	0x12, 6	; 18
	TOUCH_nCS_L();
    1fc2:	c4 98       	cbi	0x18, 4	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fc4:	15 e0       	ldi	r17, 0x05	; 5
    1fc6:	91 2f       	mov	r25, r17
    1fc8:	9a 95       	dec	r25
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <GetTouchADC+0x10>
	_delay_us(2);
	SPI0_communication(data);
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI0_communication>
    1fd2:	1a 95       	dec	r17
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <GetTouchADC+0x1a>
	_delay_us(2);              
	NUMH=SPI0_communication(0x00);
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI0_communication>
    1fde:	7c 01       	movw	r14, r24
	NUML=SPI0_communication(0x00);
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI0_communication>
	Num=((NUMH)<<8)+NUML; 	
    1fe8:	00 27       	eor	r16, r16
    1fea:	f7 fc       	sbrc	r15, 7
    1fec:	00 95       	com	r16
    1fee:	10 2f       	mov	r17, r16
    1ff0:	10 2f       	mov	r17, r16
    1ff2:	0f 2d       	mov	r16, r15
    1ff4:	fe 2c       	mov	r15, r14
    1ff6:	ee 24       	eor	r14, r14
    1ff8:	aa 27       	eor	r26, r26
    1ffa:	97 fd       	sbrc	r25, 7
    1ffc:	a0 95       	com	r26
    1ffe:	ba 2f       	mov	r27, r26
    2000:	e8 0e       	add	r14, r24
    2002:	f9 1e       	adc	r15, r25
    2004:	0a 1f       	adc	r16, r26
    2006:	1b 1f       	adc	r17, r27
	Num>>=4;                
	TOUCH_nCS_H();
    2008:	c4 9a       	sbi	0x18, 4	; 24
    200a:	54 e0       	ldi	r21, 0x04	; 4
    200c:	16 95       	lsr	r17
    200e:	07 95       	ror	r16
    2010:	f7 94       	ror	r15
    2012:	e7 94       	ror	r14
    2014:	5a 95       	dec	r21
    2016:	d1 f7       	brne	.-12     	; 0x200c <GetTouchADC+0x54>

	return(Num);   
}
    2018:	b7 01       	movw	r22, r14
    201a:	c8 01       	movw	r24, r16
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	08 95       	ret

00002026 <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention		 : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{  
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	6c 01       	movw	r12, r24
    2038:	5b 01       	movw	r10, r22
	uint32_t adx,ady; 
  adx=GetTouchADC(CHX); 
    203a:	80 e9       	ldi	r24, 0x90	; 144
    203c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <GetTouchADC>
    2040:	7b 01       	movw	r14, r22
    2042:	8c 01       	movw	r16, r24
//  delay_us(1); 
  ady=GetTouchADC(CHY); 
    2044:	80 ed       	ldi	r24, 0xD0	; 208
    2046:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <GetTouchADC>
  *x=adx; 
    204a:	f6 01       	movw	r30, r12
    204c:	f1 82       	std	Z+1, r15	; 0x01
    204e:	e0 82       	st	Z, r14
  *y=ady; 	
    2050:	f5 01       	movw	r30, r10
    2052:	71 83       	std	Z+1, r23	; 0x01
    2054:	60 83       	st	Z, r22


} 
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	08 95       	ret

00002068 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention		 : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
    2068:	af 92       	push	r10
    206a:	bf 92       	push	r11
    206c:	cf 92       	push	r12
    206e:	df 92       	push	r13
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	a8 97       	sbiw	r28, 0x28	; 40
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
	uint32_t XAD; 
	XAD=32;
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
  int buffer[2][9]={{0},{0}};
    208a:	fe 01       	movw	r30, r28
    208c:	35 96       	adiw	r30, 0x05	; 5
    208e:	84 e2       	ldi	r24, 0x24	; 36
    2090:	df 01       	movw	r26, r30
    2092:	1d 92       	st	X+, r1
    2094:	8a 95       	dec	r24
    2096:	e9 f7       	brne	.-6      	; 0x2092 <Read_Ads7846+0x2a>
    2098:	8f 01       	movw	r16, r30
    209a:	ff 24       	eor	r15, r15
  
  do
  {		   
    TP_GetAdXY(TP_X,TP_Y);  
    209c:	73 e0       	ldi	r23, 0x03	; 3
    209e:	a7 2e       	mov	r10, r23
    20a0:	b1 2c       	mov	r11, r1
    20a2:	ac 0e       	add	r10, r28
    20a4:	bd 1e       	adc	r11, r29
    20a6:	6e 01       	movw	r12, r28
    20a8:	08 94       	sec
    20aa:	c1 1c       	adc	r12, r1
    20ac:	d1 1c       	adc	r13, r1
    20ae:	c6 01       	movw	r24, r12
    20b0:	b5 01       	movw	r22, r10
    20b2:	0e 94 13 10 	call	0x2026	; 0x2026 <TP_GetAdXY>
	buffer[0][count]=TP_X[0];  
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	f8 01       	movw	r30, r16
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
	buffer[1][count]=TP_Y[0];
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	93 8b       	std	Z+19, r25	; 0x13
    20c6:	82 8b       	std	Z+18, r24	; 0x12
	count++;  
    20c8:	f3 94       	inc	r15
  }

  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
    20ca:	0c 9b       	sbis	0x01, 4	; 1
    20cc:	05 c0       	rjmp	.+10     	; 0x20d8 <Read_Ads7846+0x70>
  if(count==9)   /* Average X Y  */ 
    20ce:	f9 e0       	ldi	r31, 0x09	; 9
    20d0:	ff 16       	cp	r15, r31
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <Read_Ads7846+0x6e>
    20d4:	da c0       	rjmp	.+436    	; 0x228a <Read_Ads7846+0x222>
    20d6:	05 c0       	rjmp	.+10     	; 0x20e2 <Read_Ads7846+0x7a>
    20d8:	0e 5f       	subi	r16, 0xFE	; 254
    20da:	1f 4f       	sbci	r17, 0xFF	; 255
	buffer[0][count]=TP_X[0];  
	buffer[1][count]=TP_Y[0];
	count++;  
  }

  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
    20dc:	89 e0       	ldi	r24, 0x09	; 9
    20de:	f8 16       	cp	r15, r24
    20e0:	31 f7       	brne	.-52     	; 0x20ae <Read_Ads7846+0x46>
  if(count==9)   /* Average X Y  */ 
  {
	/* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
    20e2:	8f 81       	ldd	r24, Y+7	; 0x07
    20e4:	98 85       	ldd	r25, Y+8	; 0x08
    20e6:	2d 81       	ldd	r18, Y+5	; 0x05
    20e8:	3e 81       	ldd	r19, Y+6	; 0x06
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	29 85       	ldd	r18, Y+9	; 0x09
    20f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    20f2:	82 0f       	add	r24, r18
    20f4:	93 1f       	adc	r25, r19
    20f6:	63 e0       	ldi	r22, 0x03	; 3
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodhi4>
    20fe:	8b 01       	movw	r16, r22
	temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
    2100:	8d 85       	ldd	r24, Y+13	; 0x0d
    2102:	9e 85       	ldd	r25, Y+14	; 0x0e
    2104:	2b 85       	ldd	r18, Y+11	; 0x0b
    2106:	3c 85       	ldd	r19, Y+12	; 0x0c
    2108:	82 0f       	add	r24, r18
    210a:	93 1f       	adc	r25, r19
    210c:	2f 85       	ldd	r18, Y+15	; 0x0f
    210e:	38 89       	ldd	r19, Y+16	; 0x10
    2110:	82 0f       	add	r24, r18
    2112:	93 1f       	adc	r25, r19
    2114:	63 e0       	ldi	r22, 0x03	; 3
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodhi4>
    211c:	fb 01       	movw	r30, r22
	temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	29 89       	ldd	r18, Y+17	; 0x11
    2124:	3a 89       	ldd	r19, Y+18	; 0x12
    2126:	82 0f       	add	r24, r18
    2128:	93 1f       	adc	r25, r19
    212a:	2d 89       	ldd	r18, Y+21	; 0x15
    212c:	3e 89       	ldd	r19, Y+22	; 0x16
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	63 e0       	ldi	r22, 0x03	; 3
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodhi4>
    213a:	cb 01       	movw	r24, r22

	m0=temp[0]-temp[1];
	m1=temp[1]-temp[2];
    213c:	9f 01       	movw	r18, r30
    213e:	26 1b       	sub	r18, r22
    2140:	37 0b       	sbc	r19, r23
	m2=temp[2]-temp[0];
    2142:	db 01       	movw	r26, r22
    2144:	a0 1b       	sub	r26, r16
    2146:	b1 0b       	sbc	r27, r17

	m0=m0>0?m0:(-m0);
    2148:	b8 01       	movw	r22, r16
    214a:	6e 1b       	sub	r22, r30
    214c:	7f 0b       	sbc	r23, r31
    214e:	77 ff       	sbrs	r23, 7
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <Read_Ads7846+0xf0>
    2152:	70 95       	com	r23
    2154:	61 95       	neg	r22
    2156:	7f 4f       	sbci	r23, 0xFF	; 255
  m1=m1>0?m1:(-m1);
    2158:	a9 01       	movw	r20, r18
    215a:	37 ff       	sbrs	r19, 7
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <Read_Ads7846+0xfc>
    215e:	50 95       	com	r21
    2160:	41 95       	neg	r20
    2162:	5f 4f       	sbci	r21, 0xFF	; 255
	m2=m2>0?m2:(-m2);
    2164:	9d 01       	movw	r18, r26
    2166:	b7 ff       	sbrs	r27, 7
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <Read_Ads7846+0x108>
    216a:	30 95       	com	r19
    216c:	21 95       	neg	r18
    216e:	3f 4f       	sbci	r19, 0xFF	; 255

	if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
    2170:	63 30       	cpi	r22, 0x03	; 3
    2172:	71 05       	cpc	r23, r1
    2174:	3c f0       	brlt	.+14     	; 0x2184 <Read_Ads7846+0x11c>
    2176:	43 30       	cpi	r20, 0x03	; 3
    2178:	51 05       	cpc	r21, r1
    217a:	24 f0       	brlt	.+8      	; 0x2184 <Read_Ads7846+0x11c>
    217c:	23 30       	cpi	r18, 0x03	; 3
    217e:	31 05       	cpc	r19, r1
    2180:	0c f0       	brlt	.+2      	; 0x2184 <Read_Ads7846+0x11c>
    2182:	83 c0       	rjmp	.+262    	; 0x228a <Read_Ads7846+0x222>

	if(m0<m1)
    2184:	64 17       	cp	r22, r20
    2186:	75 07       	cpc	r23, r21
    2188:	2c f4       	brge	.+10     	; 0x2194 <Read_Ads7846+0x12c>
	{
	  if(m2<m0) 
    218a:	26 17       	cp	r18, r22
    218c:	37 07       	cpc	r19, r23
    218e:	2c f0       	brlt	.+10     	; 0x219a <Read_Ads7846+0x132>
	    screen.x=(temp[0]+temp[2])/2;
	  else 
	    screen.x=(temp[0]+temp[1])/2;	
    2190:	cf 01       	movw	r24, r30
    2192:	03 c0       	rjmp	.+6      	; 0x219a <Read_Ads7846+0x132>
	}
	else if(m2<m1) 
    2194:	24 17       	cp	r18, r20
    2196:	35 07       	cpc	r19, r21
    2198:	1c f4       	brge	.+6      	; 0x21a0 <Read_Ads7846+0x138>
	  screen.x=(temp[0]+temp[2])/2;
    219a:	80 0f       	add	r24, r16
    219c:	91 1f       	adc	r25, r17
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <Read_Ads7846+0x13c>
	else 
	  screen.x=(temp[1]+temp[2])/2;
    21a0:	8e 0f       	add	r24, r30
    21a2:	9f 1f       	adc	r25, r31
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodhi4>
    21ac:	70 93 61 08 	sts	0x0861, r23
    21b0:	60 93 60 08 	sts	0x0860, r22

	/* Average Y  */
  temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
    21b4:	89 8d       	ldd	r24, Y+25	; 0x19
    21b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21b8:	2f 89       	ldd	r18, Y+23	; 0x17
    21ba:	38 8d       	ldd	r19, Y+24	; 0x18
    21bc:	82 0f       	add	r24, r18
    21be:	93 1f       	adc	r25, r19
    21c0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    21c2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    21c4:	82 0f       	add	r24, r18
    21c6:	93 1f       	adc	r25, r19
    21c8:	63 e0       	ldi	r22, 0x03	; 3
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodhi4>
    21d0:	8b 01       	movw	r16, r22
	temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
    21d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d4:	98 a1       	ldd	r25, Y+32	; 0x20
    21d6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    21d8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    21da:	82 0f       	add	r24, r18
    21dc:	93 1f       	adc	r25, r19
    21de:	29 a1       	ldd	r18, Y+33	; 0x21
    21e0:	3a a1       	ldd	r19, Y+34	; 0x22
    21e2:	82 0f       	add	r24, r18
    21e4:	93 1f       	adc	r25, r19
    21e6:	63 e0       	ldi	r22, 0x03	; 3
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodhi4>
    21ee:	fb 01       	movw	r30, r22
	temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
    21f0:	8d a1       	ldd	r24, Y+37	; 0x25
    21f2:	9e a1       	ldd	r25, Y+38	; 0x26
    21f4:	2b a1       	ldd	r18, Y+35	; 0x23
    21f6:	3c a1       	ldd	r19, Y+36	; 0x24
    21f8:	82 0f       	add	r24, r18
    21fa:	93 1f       	adc	r25, r19
    21fc:	2f a1       	ldd	r18, Y+39	; 0x27
    21fe:	38 a5       	ldd	r19, Y+40	; 0x28
    2200:	82 0f       	add	r24, r18
    2202:	93 1f       	adc	r25, r19
    2204:	63 e0       	ldi	r22, 0x03	; 3
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodhi4>
    220c:	cb 01       	movw	r24, r22
	m0=temp[0]-temp[1];
	m1=temp[1]-temp[2];
    220e:	9f 01       	movw	r18, r30
    2210:	26 1b       	sub	r18, r22
    2212:	37 0b       	sbc	r19, r23
	m2=temp[2]-temp[0];
    2214:	db 01       	movw	r26, r22
    2216:	a0 1b       	sub	r26, r16
    2218:	b1 0b       	sbc	r27, r17
	m0=m0>0?m0:(-m0);
    221a:	b8 01       	movw	r22, r16
    221c:	6e 1b       	sub	r22, r30
    221e:	7f 0b       	sbc	r23, r31
    2220:	77 ff       	sbrs	r23, 7
    2222:	03 c0       	rjmp	.+6      	; 0x222a <Read_Ads7846+0x1c2>
    2224:	70 95       	com	r23
    2226:	61 95       	neg	r22
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
	m1=m1>0?m1:(-m1);
    222a:	a9 01       	movw	r20, r18
    222c:	37 ff       	sbrs	r19, 7
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <Read_Ads7846+0x1ce>
    2230:	50 95       	com	r21
    2232:	41 95       	neg	r20
    2234:	5f 4f       	sbci	r21, 0xFF	; 255
	m2=m2>0?m2:(-m2);
    2236:	9d 01       	movw	r18, r26
    2238:	b7 ff       	sbrs	r27, 7
    223a:	03 c0       	rjmp	.+6      	; 0x2242 <Read_Ads7846+0x1da>
    223c:	30 95       	com	r19
    223e:	21 95       	neg	r18
    2240:	3f 4f       	sbci	r19, 0xFF	; 255
	if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
    2242:	63 30       	cpi	r22, 0x03	; 3
    2244:	71 05       	cpc	r23, r1
    2246:	34 f0       	brlt	.+12     	; 0x2254 <Read_Ads7846+0x1ec>
    2248:	43 30       	cpi	r20, 0x03	; 3
    224a:	51 05       	cpc	r21, r1
    224c:	1c f0       	brlt	.+6      	; 0x2254 <Read_Ads7846+0x1ec>
    224e:	23 30       	cpi	r18, 0x03	; 3
    2250:	31 05       	cpc	r19, r1
    2252:	dc f4       	brge	.+54     	; 0x228a <Read_Ads7846+0x222>

	if(m0<m1)
    2254:	64 17       	cp	r22, r20
    2256:	75 07       	cpc	r23, r21
    2258:	2c f4       	brge	.+10     	; 0x2264 <Read_Ads7846+0x1fc>
	{
	  if(m2<m0) 
    225a:	26 17       	cp	r18, r22
    225c:	37 07       	cpc	r19, r23
    225e:	2c f0       	brlt	.+10     	; 0x226a <Read_Ads7846+0x202>
	    screen.y=(temp[0]+temp[2])/2;
	  else 
	    screen.y=(temp[0]+temp[1])/2;	
    2260:	cf 01       	movw	r24, r30
    2262:	03 c0       	rjmp	.+6      	; 0x226a <Read_Ads7846+0x202>
    }
	else if(m2<m1) 
    2264:	24 17       	cp	r18, r20
    2266:	35 07       	cpc	r19, r21
    2268:	1c f4       	brge	.+6      	; 0x2270 <Read_Ads7846+0x208>
	   screen.y=(temp[0]+temp[2])/2;
    226a:	80 0f       	add	r24, r16
    226c:	91 1f       	adc	r25, r17
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <Read_Ads7846+0x20c>
	else
	   screen.y=(temp[1]+temp[2])/2;
    2270:	8e 0f       	add	r24, r30
    2272:	9f 1f       	adc	r25, r31
    2274:	62 e0       	ldi	r22, 0x02	; 2
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__divmodhi4>
    227c:	70 93 63 08 	sts	0x0863, r23
    2280:	60 93 62 08 	sts	0x0862, r22
    2284:	20 e6       	ldi	r18, 0x60	; 96
    2286:	38 e0       	ldi	r19, 0x08	; 8
    2288:	02 c0       	rjmp	.+4      	; 0x228e <Read_Ads7846+0x226>
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
*/

	return &screen;
  }  
  return 0; 
}
    228e:	c9 01       	movw	r24, r18
    2290:	a8 96       	adiw	r28, 0x28	; 40
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	ff 90       	pop	r15
    22a6:	df 90       	pop	r13
    22a8:	cf 90       	pop	r12
    22aa:	bf 90       	pop	r11
    22ac:	af 90       	pop	r10
    22ae:	08 95       	ret

000022b0 <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
void TouchPanel_Calibrate(uint16_t charColor, uint16_t bkColor )
{
    22b0:	8f 92       	push	r8
    22b2:	9f 92       	push	r9
    22b4:	af 92       	push	r10
    22b6:	bf 92       	push	r11
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	5c 01       	movw	r10, r24
    22ca:	6b 01       	movw	r12, r22
  uint8_t i;
  Coordinate * Ptr;
	LCD_Clear(bkColor);
    22cc:	cb 01       	movw	r24, r22
    22ce:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Clear>
    22d2:	ce e6       	ldi	r28, 0x6E	; 110
    22d4:	d8 e0       	ldi	r29, 0x08	; 8
    22d6:	fe e3       	ldi	r31, 0x3E	; 62
    22d8:	ef 2e       	mov	r14, r31
    22da:	f7 e0       	ldi	r31, 0x07	; 7
    22dc:	ff 2e       	mov	r15, r31
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22de:	e8 ec       	ldi	r30, 0xC8	; 200
    22e0:	8e 2e       	mov	r8, r30
    22e2:	91 2c       	mov	r9, r1
  for(i=0;i<3;i++)
  {	 
   GUI_Text(10,100,"Touch crosshair to calibrate",charColor,bkColor);
    22e4:	8a e0       	ldi	r24, 0x0A	; 10
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	64 e6       	ldi	r22, 0x64	; 100
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	41 e2       	ldi	r20, 0x21	; 33
    22ee:	57 e0       	ldi	r21, 0x07	; 7
    22f0:	95 01       	movw	r18, r10
    22f2:	86 01       	movw	r16, r12
    22f4:	0e 94 a6 0a 	call	0x154c	; 0x154c <GUI_Text>
    22f8:	88 eb       	ldi	r24, 0xB8	; 184
    22fa:	9b e0       	ldi	r25, 0x0B	; 11
    22fc:	f4 01       	movw	r30, r8
    22fe:	31 97       	sbiw	r30, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <TouchPanel_Calibrate+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2302:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	d9 f7       	brne	.-10     	; 0x22fc <TouchPanel_Calibrate+0x4c>
   _delay_ms(300);
   DrawCross(DisplaySample[i].x,DisplaySample[i].y,charColor);
    2306:	f7 01       	movw	r30, r14
    2308:	62 81       	ldd	r22, Z+2	; 0x02
    230a:	73 81       	ldd	r23, Z+3	; 0x03
    230c:	80 81       	ld	r24, Z
    230e:	91 81       	ldd	r25, Z+1	; 0x01
    2310:	a5 01       	movw	r20, r10
    2312:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DrawCross>
   do
   {
     Ptr=Read_Ads7846();
    2316:	0e 94 34 10 	call	0x2068	; 0x2068 <Read_Ads7846>
    231a:	fc 01       	movw	r30, r24
   }
   while( Ptr == (void*)0 );
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	d9 f3       	breq	.-10     	; 0x2316 <TouchPanel_Calibrate+0x66>
   ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	99 83       	std	Y+1, r25	; 0x01
    2326:	88 83       	st	Y, r24
    2328:	82 81       	ldd	r24, Z+2	; 0x02
    232a:	93 81       	ldd	r25, Z+3	; 0x03
    232c:	9b 83       	std	Y+3, r25	; 0x03
    232e:	8a 83       	std	Y+2, r24	; 0x02
	 
	DrawCross(DisplaySample[i].x,DisplaySample[i].y,bkColor);
    2330:	f7 01       	movw	r30, r14
    2332:	62 81       	ldd	r22, Z+2	; 0x02
    2334:	73 81       	ldd	r23, Z+3	; 0x03
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	a6 01       	movw	r20, r12
    233c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <DrawCross>
    2340:	24 96       	adiw	r28, 0x04	; 4
    2342:	84 e0       	ldi	r24, 0x04	; 4
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	e8 0e       	add	r14, r24
    2348:	f9 1e       	adc	r15, r25
void TouchPanel_Calibrate(uint16_t charColor, uint16_t bkColor )
{
  uint8_t i;
  Coordinate * Ptr;
	LCD_Clear(bkColor);
  for(i=0;i<3;i++)
    234a:	98 e0       	ldi	r25, 0x08	; 8
    234c:	ca 37       	cpi	r28, 0x7A	; 122
    234e:	d9 07       	cpc	r29, r25
    2350:	49 f6       	brne	.-110    	; 0x22e4 <TouchPanel_Calibrate+0x34>
   while( Ptr == (void*)0 );
   ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
	 
	DrawCross(DisplaySample[i].x,DisplaySample[i].y,bkColor);
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
    2352:	2c 97       	sbiw	r28, 0x0c	; 12
    2354:	8e e3       	ldi	r24, 0x3E	; 62
    2356:	97 e0       	ldi	r25, 0x07	; 7
    2358:	be 01       	movw	r22, r28
    235a:	4a e7       	ldi	r20, 0x7A	; 122
    235c:	58 e0       	ldi	r21, 0x08	; 8
    235e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <setCalibrationMatrix>
	GUI_Text(10,100,"Touch crosshair to calibrate",bkColor,bkColor);
    2362:	8a e0       	ldi	r24, 0x0A	; 10
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	64 e6       	ldi	r22, 0x64	; 100
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	41 e2       	ldi	r20, 0x21	; 33
    236c:	57 e0       	ldi	r21, 0x07	; 7
    236e:	96 01       	movw	r18, r12
    2370:	86 01       	movw	r16, r12
    2372:	0e 94 a6 0a 	call	0x154c	; 0x154c <GUI_Text>
} 
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	ff 90       	pop	r15
    2380:	ef 90       	pop	r14
    2382:	df 90       	pop	r13
    2384:	cf 90       	pop	r12
    2386:	bf 90       	pop	r11
    2388:	af 90       	pop	r10
    238a:	9f 90       	pop	r9
    238c:	8f 90       	pop	r8
    238e:	08 95       	ret

00002390 <uart_putchar>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE); 


//From RS232 sends a byte
static int uart_putchar(char c, FILE *stream)    
{ 
    2390:	1f 93       	push	r17
    2392:	18 2f       	mov	r17, r24
  if (c == '\n')        
    2394:	8a 30       	cpi	r24, 0x0A	; 10
    2396:	19 f4       	brne	.+6      	; 0x239e <uart_putchar+0xe>
  uart_putchar('\r', stream);      
    2398:	8d e0       	ldi	r24, 0x0D	; 13
    239a:	0e 94 c8 11 	call	0x2390	; 0x2390 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);      
    239e:	5d 9b       	sbis	0x0b, 5	; 11
    23a0:	fe cf       	rjmp	.-4      	; 0x239e <uart_putchar+0xe>
  UDR0 = c;      
    23a2:	1c b9       	out	0x0c, r17	; 12
  return 0;    
} 
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	1f 91       	pop	r17
    23aa:	08 95       	ret

000023ac <putUsart0>:

void putUsart0(unsigned char c)
{ 
	while(!(WS_UCSR0A & 0x20));
    23ac:	5d 9b       	sbis	0x0b, 5	; 11
    23ae:	fe cf       	rjmp	.-4      	; 0x23ac <putUsart0>
	WS_UDR0 = c;
    23b0:	8c b9       	out	0x0c, r24	; 12
}
    23b2:	08 95       	ret

000023b4 <getUsart0>:
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
    23b4:	5f 9b       	sbis	0x0b, 7	; 11
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <getUsart0+0x12>
    status = WS_UCSR0A;
    23b8:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
    23ba:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
    23bc:	8c 71       	andi	r24, 0x1C	; 28
    23be:	19 f4       	brne	.+6      	; 0x23c6 <getUsart0+0x12>
    return res;
    23c0:	29 2f       	mov	r18, r25
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <getUsart0+0x16>
    23c6:	2f ef       	ldi	r18, 0xFF	; 255
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
}
    23ca:	c9 01       	movw	r24, r18
    23cc:	08 95       	ret

000023ce <waitUsart0>:
}
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
    23ce:	5f 9b       	sbis	0x0b, 7	; 11
    23d0:	fe cf       	rjmp	.-4      	; 0x23ce <waitUsart0>
    status = WS_UCSR0A;
    23d2:	8b b1       	in	r24, 0x0b	; 11
    res = WS_UDR0;
    23d4:	9c b1       	in	r25, 0x0c	; 12
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
    23d6:	8c 71       	andi	r24, 0x1C	; 28
    23d8:	d1 f7       	brne	.-12     	; 0x23ce <waitUsart0>
unsigned char waitUsart0(void)
{
    unsigned int c;
    while((c=getUsart0())==0xFFFF);
    return (unsigned char)c;
}
    23da:	89 2f       	mov	r24, r25
    23dc:	08 95       	ret

000023de <usartInit>:
	// USART0 Receiver: On
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud Rate: 9600
	//
	UCSR0A=0x00;
    23de:	1b b8       	out	0x0b, r1	; 11
	UCSR0B=0x98;
    23e0:	88 e9       	ldi	r24, 0x98	; 152
    23e2:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=0x06;
    23e4:	86 e0       	ldi	r24, 0x06	; 6
    23e6:	80 93 95 00 	sts	0x0095, r24
	UBRR0H=0x00;
    23ea:	10 92 90 00 	sts	0x0090, r1
	UBRR0L=0x2F;
    23ee:	8f e2       	ldi	r24, 0x2F	; 47
    23f0:	89 b9       	out	0x09, r24	; 9
	stdout = &mystdout;       //Must add 
    23f2:	8a e4       	ldi	r24, 0x4A	; 74
    23f4:	97 e0       	ldi	r25, 0x07	; 7
    23f6:	90 93 99 08 	sts	0x0899, r25
    23fa:	80 93 98 08 	sts	0x0898, r24
}
    23fe:	08 95       	ret

00002400 <__fixunssfsi>:
    2400:	ef 92       	push	r14
    2402:	ff 92       	push	r15
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	7b 01       	movw	r14, r22
    240a:	8c 01       	movw	r16, r24
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	5f e4       	ldi	r21, 0x4F	; 79
    2414:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <__gesf2>
    2418:	88 23       	and	r24, r24
    241a:	8c f0       	brlt	.+34     	; 0x243e <__fixunssfsi+0x3e>
    241c:	c8 01       	movw	r24, r16
    241e:	b7 01       	movw	r22, r14
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	5f e4       	ldi	r21, 0x4F	; 79
    2428:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__subsf3>
    242c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__fixsfsi>
    2430:	9b 01       	movw	r18, r22
    2432:	ac 01       	movw	r20, r24
    2434:	20 50       	subi	r18, 0x00	; 0
    2436:	30 40       	sbci	r19, 0x00	; 0
    2438:	40 40       	sbci	r20, 0x00	; 0
    243a:	50 48       	sbci	r21, 0x80	; 128
    243c:	06 c0       	rjmp	.+12     	; 0x244a <__fixunssfsi+0x4a>
    243e:	c8 01       	movw	r24, r16
    2440:	b7 01       	movw	r22, r14
    2442:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__fixsfsi>
    2446:	9b 01       	movw	r18, r22
    2448:	ac 01       	movw	r20, r24
    244a:	b9 01       	movw	r22, r18
    244c:	ca 01       	movw	r24, r20
    244e:	1f 91       	pop	r17
    2450:	0f 91       	pop	r16
    2452:	ff 90       	pop	r15
    2454:	ef 90       	pop	r14
    2456:	08 95       	ret

00002458 <_fpadd_parts>:
    2458:	a0 e0       	ldi	r26, 0x00	; 0
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e2 e3       	ldi	r30, 0x32	; 50
    245e:	f2 e1       	ldi	r31, 0x12	; 18
    2460:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__prologue_saves__>
    2464:	dc 01       	movw	r26, r24
    2466:	2b 01       	movw	r4, r22
    2468:	fa 01       	movw	r30, r20
    246a:	9c 91       	ld	r25, X
    246c:	92 30       	cpi	r25, 0x02	; 2
    246e:	08 f4       	brcc	.+2      	; 0x2472 <_fpadd_parts+0x1a>
    2470:	39 c1       	rjmp	.+626    	; 0x26e4 <_fpadd_parts+0x28c>
    2472:	eb 01       	movw	r28, r22
    2474:	88 81       	ld	r24, Y
    2476:	82 30       	cpi	r24, 0x02	; 2
    2478:	08 f4       	brcc	.+2      	; 0x247c <_fpadd_parts+0x24>
    247a:	33 c1       	rjmp	.+614    	; 0x26e2 <_fpadd_parts+0x28a>
    247c:	94 30       	cpi	r25, 0x04	; 4
    247e:	69 f4       	brne	.+26     	; 0x249a <_fpadd_parts+0x42>
    2480:	84 30       	cpi	r24, 0x04	; 4
    2482:	09 f0       	breq	.+2      	; 0x2486 <_fpadd_parts+0x2e>
    2484:	2f c1       	rjmp	.+606    	; 0x26e4 <_fpadd_parts+0x28c>
    2486:	11 96       	adiw	r26, 0x01	; 1
    2488:	9c 91       	ld	r25, X
    248a:	11 97       	sbiw	r26, 0x01	; 1
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	98 17       	cp	r25, r24
    2490:	09 f4       	brne	.+2      	; 0x2494 <_fpadd_parts+0x3c>
    2492:	28 c1       	rjmp	.+592    	; 0x26e4 <_fpadd_parts+0x28c>
    2494:	a8 e5       	ldi	r26, 0x58	; 88
    2496:	b7 e0       	ldi	r27, 0x07	; 7
    2498:	25 c1       	rjmp	.+586    	; 0x26e4 <_fpadd_parts+0x28c>
    249a:	84 30       	cpi	r24, 0x04	; 4
    249c:	09 f4       	brne	.+2      	; 0x24a0 <_fpadd_parts+0x48>
    249e:	21 c1       	rjmp	.+578    	; 0x26e2 <_fpadd_parts+0x28a>
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	a9 f4       	brne	.+42     	; 0x24ce <_fpadd_parts+0x76>
    24a4:	92 30       	cpi	r25, 0x02	; 2
    24a6:	09 f0       	breq	.+2      	; 0x24aa <_fpadd_parts+0x52>
    24a8:	1d c1       	rjmp	.+570    	; 0x26e4 <_fpadd_parts+0x28c>
    24aa:	9a 01       	movw	r18, r20
    24ac:	ad 01       	movw	r20, r26
    24ae:	88 e0       	ldi	r24, 0x08	; 8
    24b0:	ea 01       	movw	r28, r20
    24b2:	09 90       	ld	r0, Y+
    24b4:	ae 01       	movw	r20, r28
    24b6:	e9 01       	movw	r28, r18
    24b8:	09 92       	st	Y+, r0
    24ba:	9e 01       	movw	r18, r28
    24bc:	81 50       	subi	r24, 0x01	; 1
    24be:	c1 f7       	brne	.-16     	; 0x24b0 <_fpadd_parts+0x58>
    24c0:	e2 01       	movw	r28, r4
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	11 96       	adiw	r26, 0x01	; 1
    24c6:	9c 91       	ld	r25, X
    24c8:	89 23       	and	r24, r25
    24ca:	81 83       	std	Z+1, r24	; 0x01
    24cc:	08 c1       	rjmp	.+528    	; 0x26de <_fpadd_parts+0x286>
    24ce:	92 30       	cpi	r25, 0x02	; 2
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <_fpadd_parts+0x7c>
    24d2:	07 c1       	rjmp	.+526    	; 0x26e2 <_fpadd_parts+0x28a>
    24d4:	12 96       	adiw	r26, 0x02	; 2
    24d6:	2d 90       	ld	r2, X+
    24d8:	3c 90       	ld	r3, X
    24da:	13 97       	sbiw	r26, 0x03	; 3
    24dc:	eb 01       	movw	r28, r22
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	9b 81       	ldd	r25, Y+3	; 0x03
    24e2:	14 96       	adiw	r26, 0x04	; 4
    24e4:	ad 90       	ld	r10, X+
    24e6:	bd 90       	ld	r11, X+
    24e8:	cd 90       	ld	r12, X+
    24ea:	dc 90       	ld	r13, X
    24ec:	17 97       	sbiw	r26, 0x07	; 7
    24ee:	ec 80       	ldd	r14, Y+4	; 0x04
    24f0:	fd 80       	ldd	r15, Y+5	; 0x05
    24f2:	0e 81       	ldd	r16, Y+6	; 0x06
    24f4:	1f 81       	ldd	r17, Y+7	; 0x07
    24f6:	91 01       	movw	r18, r2
    24f8:	28 1b       	sub	r18, r24
    24fa:	39 0b       	sbc	r19, r25
    24fc:	b9 01       	movw	r22, r18
    24fe:	37 ff       	sbrs	r19, 7
    2500:	04 c0       	rjmp	.+8      	; 0x250a <_fpadd_parts+0xb2>
    2502:	66 27       	eor	r22, r22
    2504:	77 27       	eor	r23, r23
    2506:	62 1b       	sub	r22, r18
    2508:	73 0b       	sbc	r23, r19
    250a:	60 32       	cpi	r22, 0x20	; 32
    250c:	71 05       	cpc	r23, r1
    250e:	0c f0       	brlt	.+2      	; 0x2512 <_fpadd_parts+0xba>
    2510:	61 c0       	rjmp	.+194    	; 0x25d4 <_fpadd_parts+0x17c>
    2512:	12 16       	cp	r1, r18
    2514:	13 06       	cpc	r1, r19
    2516:	6c f5       	brge	.+90     	; 0x2572 <_fpadd_parts+0x11a>
    2518:	37 01       	movw	r6, r14
    251a:	48 01       	movw	r8, r16
    251c:	06 2e       	mov	r0, r22
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <_fpadd_parts+0xd0>
    2520:	96 94       	lsr	r9
    2522:	87 94       	ror	r8
    2524:	77 94       	ror	r7
    2526:	67 94       	ror	r6
    2528:	0a 94       	dec	r0
    252a:	d2 f7       	brpl	.-12     	; 0x2520 <_fpadd_parts+0xc8>
    252c:	21 e0       	ldi	r18, 0x01	; 1
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	04 c0       	rjmp	.+8      	; 0x253e <_fpadd_parts+0xe6>
    2536:	22 0f       	add	r18, r18
    2538:	33 1f       	adc	r19, r19
    253a:	44 1f       	adc	r20, r20
    253c:	55 1f       	adc	r21, r21
    253e:	6a 95       	dec	r22
    2540:	d2 f7       	brpl	.-12     	; 0x2536 <_fpadd_parts+0xde>
    2542:	21 50       	subi	r18, 0x01	; 1
    2544:	30 40       	sbci	r19, 0x00	; 0
    2546:	40 40       	sbci	r20, 0x00	; 0
    2548:	50 40       	sbci	r21, 0x00	; 0
    254a:	2e 21       	and	r18, r14
    254c:	3f 21       	and	r19, r15
    254e:	40 23       	and	r20, r16
    2550:	51 23       	and	r21, r17
    2552:	21 15       	cp	r18, r1
    2554:	31 05       	cpc	r19, r1
    2556:	41 05       	cpc	r20, r1
    2558:	51 05       	cpc	r21, r1
    255a:	21 f0       	breq	.+8      	; 0x2564 <_fpadd_parts+0x10c>
    255c:	21 e0       	ldi	r18, 0x01	; 1
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	79 01       	movw	r14, r18
    2566:	8a 01       	movw	r16, r20
    2568:	e6 28       	or	r14, r6
    256a:	f7 28       	or	r15, r7
    256c:	08 29       	or	r16, r8
    256e:	19 29       	or	r17, r9
    2570:	3c c0       	rjmp	.+120    	; 0x25ea <_fpadd_parts+0x192>
    2572:	23 2b       	or	r18, r19
    2574:	d1 f1       	breq	.+116    	; 0x25ea <_fpadd_parts+0x192>
    2576:	26 0e       	add	r2, r22
    2578:	37 1e       	adc	r3, r23
    257a:	35 01       	movw	r6, r10
    257c:	46 01       	movw	r8, r12
    257e:	06 2e       	mov	r0, r22
    2580:	04 c0       	rjmp	.+8      	; 0x258a <_fpadd_parts+0x132>
    2582:	96 94       	lsr	r9
    2584:	87 94       	ror	r8
    2586:	77 94       	ror	r7
    2588:	67 94       	ror	r6
    258a:	0a 94       	dec	r0
    258c:	d2 f7       	brpl	.-12     	; 0x2582 <_fpadd_parts+0x12a>
    258e:	21 e0       	ldi	r18, 0x01	; 1
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	04 c0       	rjmp	.+8      	; 0x25a0 <_fpadd_parts+0x148>
    2598:	22 0f       	add	r18, r18
    259a:	33 1f       	adc	r19, r19
    259c:	44 1f       	adc	r20, r20
    259e:	55 1f       	adc	r21, r21
    25a0:	6a 95       	dec	r22
    25a2:	d2 f7       	brpl	.-12     	; 0x2598 <_fpadd_parts+0x140>
    25a4:	21 50       	subi	r18, 0x01	; 1
    25a6:	30 40       	sbci	r19, 0x00	; 0
    25a8:	40 40       	sbci	r20, 0x00	; 0
    25aa:	50 40       	sbci	r21, 0x00	; 0
    25ac:	2a 21       	and	r18, r10
    25ae:	3b 21       	and	r19, r11
    25b0:	4c 21       	and	r20, r12
    25b2:	5d 21       	and	r21, r13
    25b4:	21 15       	cp	r18, r1
    25b6:	31 05       	cpc	r19, r1
    25b8:	41 05       	cpc	r20, r1
    25ba:	51 05       	cpc	r21, r1
    25bc:	21 f0       	breq	.+8      	; 0x25c6 <_fpadd_parts+0x16e>
    25be:	21 e0       	ldi	r18, 0x01	; 1
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	59 01       	movw	r10, r18
    25c8:	6a 01       	movw	r12, r20
    25ca:	a6 28       	or	r10, r6
    25cc:	b7 28       	or	r11, r7
    25ce:	c8 28       	or	r12, r8
    25d0:	d9 28       	or	r13, r9
    25d2:	0b c0       	rjmp	.+22     	; 0x25ea <_fpadd_parts+0x192>
    25d4:	82 15       	cp	r24, r2
    25d6:	93 05       	cpc	r25, r3
    25d8:	2c f0       	brlt	.+10     	; 0x25e4 <_fpadd_parts+0x18c>
    25da:	1c 01       	movw	r2, r24
    25dc:	aa 24       	eor	r10, r10
    25de:	bb 24       	eor	r11, r11
    25e0:	65 01       	movw	r12, r10
    25e2:	03 c0       	rjmp	.+6      	; 0x25ea <_fpadd_parts+0x192>
    25e4:	ee 24       	eor	r14, r14
    25e6:	ff 24       	eor	r15, r15
    25e8:	87 01       	movw	r16, r14
    25ea:	11 96       	adiw	r26, 0x01	; 1
    25ec:	9c 91       	ld	r25, X
    25ee:	d2 01       	movw	r26, r4
    25f0:	11 96       	adiw	r26, 0x01	; 1
    25f2:	8c 91       	ld	r24, X
    25f4:	98 17       	cp	r25, r24
    25f6:	09 f4       	brne	.+2      	; 0x25fa <_fpadd_parts+0x1a2>
    25f8:	45 c0       	rjmp	.+138    	; 0x2684 <_fpadd_parts+0x22c>
    25fa:	99 23       	and	r25, r25
    25fc:	39 f0       	breq	.+14     	; 0x260c <_fpadd_parts+0x1b4>
    25fe:	a8 01       	movw	r20, r16
    2600:	97 01       	movw	r18, r14
    2602:	2a 19       	sub	r18, r10
    2604:	3b 09       	sbc	r19, r11
    2606:	4c 09       	sbc	r20, r12
    2608:	5d 09       	sbc	r21, r13
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <_fpadd_parts+0x1c0>
    260c:	a6 01       	movw	r20, r12
    260e:	95 01       	movw	r18, r10
    2610:	2e 19       	sub	r18, r14
    2612:	3f 09       	sbc	r19, r15
    2614:	40 0b       	sbc	r20, r16
    2616:	51 0b       	sbc	r21, r17
    2618:	57 fd       	sbrc	r21, 7
    261a:	08 c0       	rjmp	.+16     	; 0x262c <_fpadd_parts+0x1d4>
    261c:	11 82       	std	Z+1, r1	; 0x01
    261e:	33 82       	std	Z+3, r3	; 0x03
    2620:	22 82       	std	Z+2, r2	; 0x02
    2622:	24 83       	std	Z+4, r18	; 0x04
    2624:	35 83       	std	Z+5, r19	; 0x05
    2626:	46 83       	std	Z+6, r20	; 0x06
    2628:	57 83       	std	Z+7, r21	; 0x07
    262a:	1d c0       	rjmp	.+58     	; 0x2666 <_fpadd_parts+0x20e>
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	81 83       	std	Z+1, r24	; 0x01
    2630:	33 82       	std	Z+3, r3	; 0x03
    2632:	22 82       	std	Z+2, r2	; 0x02
    2634:	88 27       	eor	r24, r24
    2636:	99 27       	eor	r25, r25
    2638:	dc 01       	movw	r26, r24
    263a:	82 1b       	sub	r24, r18
    263c:	93 0b       	sbc	r25, r19
    263e:	a4 0b       	sbc	r26, r20
    2640:	b5 0b       	sbc	r27, r21
    2642:	84 83       	std	Z+4, r24	; 0x04
    2644:	95 83       	std	Z+5, r25	; 0x05
    2646:	a6 83       	std	Z+6, r26	; 0x06
    2648:	b7 83       	std	Z+7, r27	; 0x07
    264a:	0d c0       	rjmp	.+26     	; 0x2666 <_fpadd_parts+0x20e>
    264c:	22 0f       	add	r18, r18
    264e:	33 1f       	adc	r19, r19
    2650:	44 1f       	adc	r20, r20
    2652:	55 1f       	adc	r21, r21
    2654:	24 83       	std	Z+4, r18	; 0x04
    2656:	35 83       	std	Z+5, r19	; 0x05
    2658:	46 83       	std	Z+6, r20	; 0x06
    265a:	57 83       	std	Z+7, r21	; 0x07
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	93 83       	std	Z+3, r25	; 0x03
    2664:	82 83       	std	Z+2, r24	; 0x02
    2666:	24 81       	ldd	r18, Z+4	; 0x04
    2668:	35 81       	ldd	r19, Z+5	; 0x05
    266a:	46 81       	ldd	r20, Z+6	; 0x06
    266c:	57 81       	ldd	r21, Z+7	; 0x07
    266e:	da 01       	movw	r26, r20
    2670:	c9 01       	movw	r24, r18
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	a1 09       	sbc	r26, r1
    2676:	b1 09       	sbc	r27, r1
    2678:	8f 5f       	subi	r24, 0xFF	; 255
    267a:	9f 4f       	sbci	r25, 0xFF	; 255
    267c:	af 4f       	sbci	r26, 0xFF	; 255
    267e:	bf 43       	sbci	r27, 0x3F	; 63
    2680:	28 f3       	brcs	.-54     	; 0x264c <_fpadd_parts+0x1f4>
    2682:	0b c0       	rjmp	.+22     	; 0x269a <_fpadd_parts+0x242>
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	33 82       	std	Z+3, r3	; 0x03
    2688:	22 82       	std	Z+2, r2	; 0x02
    268a:	ea 0c       	add	r14, r10
    268c:	fb 1c       	adc	r15, r11
    268e:	0c 1d       	adc	r16, r12
    2690:	1d 1d       	adc	r17, r13
    2692:	e4 82       	std	Z+4, r14	; 0x04
    2694:	f5 82       	std	Z+5, r15	; 0x05
    2696:	06 83       	std	Z+6, r16	; 0x06
    2698:	17 83       	std	Z+7, r17	; 0x07
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	80 83       	st	Z, r24
    269e:	24 81       	ldd	r18, Z+4	; 0x04
    26a0:	35 81       	ldd	r19, Z+5	; 0x05
    26a2:	46 81       	ldd	r20, Z+6	; 0x06
    26a4:	57 81       	ldd	r21, Z+7	; 0x07
    26a6:	57 ff       	sbrs	r21, 7
    26a8:	1a c0       	rjmp	.+52     	; 0x26de <_fpadd_parts+0x286>
    26aa:	c9 01       	movw	r24, r18
    26ac:	aa 27       	eor	r26, r26
    26ae:	97 fd       	sbrc	r25, 7
    26b0:	a0 95       	com	r26
    26b2:	ba 2f       	mov	r27, r26
    26b4:	81 70       	andi	r24, 0x01	; 1
    26b6:	90 70       	andi	r25, 0x00	; 0
    26b8:	a0 70       	andi	r26, 0x00	; 0
    26ba:	b0 70       	andi	r27, 0x00	; 0
    26bc:	56 95       	lsr	r21
    26be:	47 95       	ror	r20
    26c0:	37 95       	ror	r19
    26c2:	27 95       	ror	r18
    26c4:	82 2b       	or	r24, r18
    26c6:	93 2b       	or	r25, r19
    26c8:	a4 2b       	or	r26, r20
    26ca:	b5 2b       	or	r27, r21
    26cc:	84 83       	std	Z+4, r24	; 0x04
    26ce:	95 83       	std	Z+5, r25	; 0x05
    26d0:	a6 83       	std	Z+6, r26	; 0x06
    26d2:	b7 83       	std	Z+7, r27	; 0x07
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	93 83       	std	Z+3, r25	; 0x03
    26dc:	82 83       	std	Z+2, r24	; 0x02
    26de:	df 01       	movw	r26, r30
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <_fpadd_parts+0x28c>
    26e2:	d2 01       	movw	r26, r4
    26e4:	cd 01       	movw	r24, r26
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	e2 e1       	ldi	r30, 0x12	; 18
    26ec:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__epilogue_restores__>

000026f0 <__subsf3>:
    26f0:	a0 e2       	ldi	r26, 0x20	; 32
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	ee e7       	ldi	r30, 0x7E	; 126
    26f6:	f3 e1       	ldi	r31, 0x13	; 19
    26f8:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__+0x18>
    26fc:	69 83       	std	Y+1, r22	; 0x01
    26fe:	7a 83       	std	Y+2, r23	; 0x02
    2700:	8b 83       	std	Y+3, r24	; 0x03
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	2d 83       	std	Y+5, r18	; 0x05
    2706:	3e 83       	std	Y+6, r19	; 0x06
    2708:	4f 83       	std	Y+7, r20	; 0x07
    270a:	58 87       	std	Y+8, r21	; 0x08
    270c:	e9 e0       	ldi	r30, 0x09	; 9
    270e:	ee 2e       	mov	r14, r30
    2710:	f1 2c       	mov	r15, r1
    2712:	ec 0e       	add	r14, r28
    2714:	fd 1e       	adc	r15, r29
    2716:	ce 01       	movw	r24, r28
    2718:	01 96       	adiw	r24, 0x01	; 1
    271a:	b7 01       	movw	r22, r14
    271c:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2720:	8e 01       	movw	r16, r28
    2722:	0f 5e       	subi	r16, 0xEF	; 239
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    2726:	ce 01       	movw	r24, r28
    2728:	05 96       	adiw	r24, 0x05	; 5
    272a:	b8 01       	movw	r22, r16
    272c:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2730:	8a 89       	ldd	r24, Y+18	; 0x12
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	89 27       	eor	r24, r25
    2736:	8a 8b       	std	Y+18, r24	; 0x12
    2738:	c7 01       	movw	r24, r14
    273a:	b8 01       	movw	r22, r16
    273c:	ae 01       	movw	r20, r28
    273e:	47 5e       	subi	r20, 0xE7	; 231
    2740:	5f 4f       	sbci	r21, 0xFF	; 255
    2742:	0e 94 2c 12 	call	0x2458	; 0x2458 <_fpadd_parts>
    2746:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__pack_f>
    274a:	a0 96       	adiw	r28, 0x20	; 32
    274c:	e6 e0       	ldi	r30, 0x06	; 6
    274e:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__+0x18>

00002752 <__addsf3>:
    2752:	a0 e2       	ldi	r26, 0x20	; 32
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ef ea       	ldi	r30, 0xAF	; 175
    2758:	f3 e1       	ldi	r31, 0x13	; 19
    275a:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__+0x18>
    275e:	69 83       	std	Y+1, r22	; 0x01
    2760:	7a 83       	std	Y+2, r23	; 0x02
    2762:	8b 83       	std	Y+3, r24	; 0x03
    2764:	9c 83       	std	Y+4, r25	; 0x04
    2766:	2d 83       	std	Y+5, r18	; 0x05
    2768:	3e 83       	std	Y+6, r19	; 0x06
    276a:	4f 83       	std	Y+7, r20	; 0x07
    276c:	58 87       	std	Y+8, r21	; 0x08
    276e:	f9 e0       	ldi	r31, 0x09	; 9
    2770:	ef 2e       	mov	r14, r31
    2772:	f1 2c       	mov	r15, r1
    2774:	ec 0e       	add	r14, r28
    2776:	fd 1e       	adc	r15, r29
    2778:	ce 01       	movw	r24, r28
    277a:	01 96       	adiw	r24, 0x01	; 1
    277c:	b7 01       	movw	r22, r14
    277e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2782:	8e 01       	movw	r16, r28
    2784:	0f 5e       	subi	r16, 0xEF	; 239
    2786:	1f 4f       	sbci	r17, 0xFF	; 255
    2788:	ce 01       	movw	r24, r28
    278a:	05 96       	adiw	r24, 0x05	; 5
    278c:	b8 01       	movw	r22, r16
    278e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2792:	c7 01       	movw	r24, r14
    2794:	b8 01       	movw	r22, r16
    2796:	ae 01       	movw	r20, r28
    2798:	47 5e       	subi	r20, 0xE7	; 231
    279a:	5f 4f       	sbci	r21, 0xFF	; 255
    279c:	0e 94 2c 12 	call	0x2458	; 0x2458 <_fpadd_parts>
    27a0:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__pack_f>
    27a4:	a0 96       	adiw	r28, 0x20	; 32
    27a6:	e6 e0       	ldi	r30, 0x06	; 6
    27a8:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__+0x18>

000027ac <__mulsf3>:
    27ac:	a0 e2       	ldi	r26, 0x20	; 32
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ec ed       	ldi	r30, 0xDC	; 220
    27b2:	f3 e1       	ldi	r31, 0x13	; 19
    27b4:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__prologue_saves__>
    27b8:	69 83       	std	Y+1, r22	; 0x01
    27ba:	7a 83       	std	Y+2, r23	; 0x02
    27bc:	8b 83       	std	Y+3, r24	; 0x03
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	2d 83       	std	Y+5, r18	; 0x05
    27c2:	3e 83       	std	Y+6, r19	; 0x06
    27c4:	4f 83       	std	Y+7, r20	; 0x07
    27c6:	58 87       	std	Y+8, r21	; 0x08
    27c8:	ce 01       	movw	r24, r28
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	be 01       	movw	r22, r28
    27ce:	67 5f       	subi	r22, 0xF7	; 247
    27d0:	7f 4f       	sbci	r23, 0xFF	; 255
    27d2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    27d6:	ce 01       	movw	r24, r28
    27d8:	05 96       	adiw	r24, 0x05	; 5
    27da:	be 01       	movw	r22, r28
    27dc:	6f 5e       	subi	r22, 0xEF	; 239
    27de:	7f 4f       	sbci	r23, 0xFF	; 255
    27e0:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    27e4:	99 85       	ldd	r25, Y+9	; 0x09
    27e6:	92 30       	cpi	r25, 0x02	; 2
    27e8:	88 f0       	brcs	.+34     	; 0x280c <__mulsf3+0x60>
    27ea:	89 89       	ldd	r24, Y+17	; 0x11
    27ec:	82 30       	cpi	r24, 0x02	; 2
    27ee:	c8 f0       	brcs	.+50     	; 0x2822 <__mulsf3+0x76>
    27f0:	94 30       	cpi	r25, 0x04	; 4
    27f2:	19 f4       	brne	.+6      	; 0x27fa <__mulsf3+0x4e>
    27f4:	82 30       	cpi	r24, 0x02	; 2
    27f6:	51 f4       	brne	.+20     	; 0x280c <__mulsf3+0x60>
    27f8:	04 c0       	rjmp	.+8      	; 0x2802 <__mulsf3+0x56>
    27fa:	84 30       	cpi	r24, 0x04	; 4
    27fc:	29 f4       	brne	.+10     	; 0x2808 <__mulsf3+0x5c>
    27fe:	92 30       	cpi	r25, 0x02	; 2
    2800:	81 f4       	brne	.+32     	; 0x2822 <__mulsf3+0x76>
    2802:	88 e5       	ldi	r24, 0x58	; 88
    2804:	97 e0       	ldi	r25, 0x07	; 7
    2806:	c6 c0       	rjmp	.+396    	; 0x2994 <__mulsf3+0x1e8>
    2808:	92 30       	cpi	r25, 0x02	; 2
    280a:	49 f4       	brne	.+18     	; 0x281e <__mulsf3+0x72>
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	8a 89       	ldd	r24, Y+18	; 0x12
    2812:	98 13       	cpse	r25, r24
    2814:	21 e0       	ldi	r18, 0x01	; 1
    2816:	2a 87       	std	Y+10, r18	; 0x0a
    2818:	ce 01       	movw	r24, r28
    281a:	09 96       	adiw	r24, 0x09	; 9
    281c:	bb c0       	rjmp	.+374    	; 0x2994 <__mulsf3+0x1e8>
    281e:	82 30       	cpi	r24, 0x02	; 2
    2820:	49 f4       	brne	.+18     	; 0x2834 <__mulsf3+0x88>
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	8a 89       	ldd	r24, Y+18	; 0x12
    2828:	98 13       	cpse	r25, r24
    282a:	21 e0       	ldi	r18, 0x01	; 1
    282c:	2a 8b       	std	Y+18, r18	; 0x12
    282e:	ce 01       	movw	r24, r28
    2830:	41 96       	adiw	r24, 0x11	; 17
    2832:	b0 c0       	rjmp	.+352    	; 0x2994 <__mulsf3+0x1e8>
    2834:	2d 84       	ldd	r2, Y+13	; 0x0d
    2836:	3e 84       	ldd	r3, Y+14	; 0x0e
    2838:	4f 84       	ldd	r4, Y+15	; 0x0f
    283a:	58 88       	ldd	r5, Y+16	; 0x10
    283c:	6d 88       	ldd	r6, Y+21	; 0x15
    283e:	7e 88       	ldd	r7, Y+22	; 0x16
    2840:	8f 88       	ldd	r8, Y+23	; 0x17
    2842:	98 8c       	ldd	r9, Y+24	; 0x18
    2844:	ee 24       	eor	r14, r14
    2846:	ff 24       	eor	r15, r15
    2848:	87 01       	movw	r16, r14
    284a:	aa 24       	eor	r10, r10
    284c:	bb 24       	eor	r11, r11
    284e:	65 01       	movw	r12, r10
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	e0 e0       	ldi	r30, 0x00	; 0
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	c1 01       	movw	r24, r2
    285e:	81 70       	andi	r24, 0x01	; 1
    2860:	90 70       	andi	r25, 0x00	; 0
    2862:	89 2b       	or	r24, r25
    2864:	e9 f0       	breq	.+58     	; 0x28a0 <__mulsf3+0xf4>
    2866:	e6 0c       	add	r14, r6
    2868:	f7 1c       	adc	r15, r7
    286a:	08 1d       	adc	r16, r8
    286c:	19 1d       	adc	r17, r9
    286e:	9a 01       	movw	r18, r20
    2870:	ab 01       	movw	r20, r22
    2872:	2a 0d       	add	r18, r10
    2874:	3b 1d       	adc	r19, r11
    2876:	4c 1d       	adc	r20, r12
    2878:	5d 1d       	adc	r21, r13
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a0 e0       	ldi	r26, 0x00	; 0
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e6 14       	cp	r14, r6
    2884:	f7 04       	cpc	r15, r7
    2886:	08 05       	cpc	r16, r8
    2888:	19 05       	cpc	r17, r9
    288a:	20 f4       	brcc	.+8      	; 0x2894 <__mulsf3+0xe8>
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e0       	ldi	r26, 0x00	; 0
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	ba 01       	movw	r22, r20
    2896:	a9 01       	movw	r20, r18
    2898:	48 0f       	add	r20, r24
    289a:	59 1f       	adc	r21, r25
    289c:	6a 1f       	adc	r22, r26
    289e:	7b 1f       	adc	r23, r27
    28a0:	aa 0c       	add	r10, r10
    28a2:	bb 1c       	adc	r11, r11
    28a4:	cc 1c       	adc	r12, r12
    28a6:	dd 1c       	adc	r13, r13
    28a8:	97 fe       	sbrs	r9, 7
    28aa:	08 c0       	rjmp	.+16     	; 0x28bc <__mulsf3+0x110>
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e0       	ldi	r26, 0x00	; 0
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	a8 2a       	or	r10, r24
    28b6:	b9 2a       	or	r11, r25
    28b8:	ca 2a       	or	r12, r26
    28ba:	db 2a       	or	r13, r27
    28bc:	31 96       	adiw	r30, 0x01	; 1
    28be:	e0 32       	cpi	r30, 0x20	; 32
    28c0:	f1 05       	cpc	r31, r1
    28c2:	49 f0       	breq	.+18     	; 0x28d6 <__mulsf3+0x12a>
    28c4:	66 0c       	add	r6, r6
    28c6:	77 1c       	adc	r7, r7
    28c8:	88 1c       	adc	r8, r8
    28ca:	99 1c       	adc	r9, r9
    28cc:	56 94       	lsr	r5
    28ce:	47 94       	ror	r4
    28d0:	37 94       	ror	r3
    28d2:	27 94       	ror	r2
    28d4:	c3 cf       	rjmp	.-122    	; 0x285c <__mulsf3+0xb0>
    28d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    28d8:	ea 89       	ldd	r30, Y+18	; 0x12
    28da:	2b 89       	ldd	r18, Y+19	; 0x13
    28dc:	3c 89       	ldd	r19, Y+20	; 0x14
    28de:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e2:	28 0f       	add	r18, r24
    28e4:	39 1f       	adc	r19, r25
    28e6:	2e 5f       	subi	r18, 0xFE	; 254
    28e8:	3f 4f       	sbci	r19, 0xFF	; 255
    28ea:	17 c0       	rjmp	.+46     	; 0x291a <__mulsf3+0x16e>
    28ec:	ca 01       	movw	r24, r20
    28ee:	81 70       	andi	r24, 0x01	; 1
    28f0:	90 70       	andi	r25, 0x00	; 0
    28f2:	89 2b       	or	r24, r25
    28f4:	61 f0       	breq	.+24     	; 0x290e <__mulsf3+0x162>
    28f6:	16 95       	lsr	r17
    28f8:	07 95       	ror	r16
    28fa:	f7 94       	ror	r15
    28fc:	e7 94       	ror	r14
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	a0 e0       	ldi	r26, 0x00	; 0
    2904:	b0 e8       	ldi	r27, 0x80	; 128
    2906:	e8 2a       	or	r14, r24
    2908:	f9 2a       	or	r15, r25
    290a:	0a 2b       	or	r16, r26
    290c:	1b 2b       	or	r17, r27
    290e:	76 95       	lsr	r23
    2910:	67 95       	ror	r22
    2912:	57 95       	ror	r21
    2914:	47 95       	ror	r20
    2916:	2f 5f       	subi	r18, 0xFF	; 255
    2918:	3f 4f       	sbci	r19, 0xFF	; 255
    291a:	77 fd       	sbrc	r23, 7
    291c:	e7 cf       	rjmp	.-50     	; 0x28ec <__mulsf3+0x140>
    291e:	0c c0       	rjmp	.+24     	; 0x2938 <__mulsf3+0x18c>
    2920:	44 0f       	add	r20, r20
    2922:	55 1f       	adc	r21, r21
    2924:	66 1f       	adc	r22, r22
    2926:	77 1f       	adc	r23, r23
    2928:	17 fd       	sbrc	r17, 7
    292a:	41 60       	ori	r20, 0x01	; 1
    292c:	ee 0c       	add	r14, r14
    292e:	ff 1c       	adc	r15, r15
    2930:	00 1f       	adc	r16, r16
    2932:	11 1f       	adc	r17, r17
    2934:	21 50       	subi	r18, 0x01	; 1
    2936:	30 40       	sbci	r19, 0x00	; 0
    2938:	40 30       	cpi	r20, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	59 07       	cpc	r21, r25
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	69 07       	cpc	r22, r25
    2942:	90 e4       	ldi	r25, 0x40	; 64
    2944:	79 07       	cpc	r23, r25
    2946:	60 f3       	brcs	.-40     	; 0x2920 <__mulsf3+0x174>
    2948:	2b 8f       	std	Y+27, r18	; 0x1b
    294a:	3c 8f       	std	Y+28, r19	; 0x1c
    294c:	db 01       	movw	r26, r22
    294e:	ca 01       	movw	r24, r20
    2950:	8f 77       	andi	r24, 0x7F	; 127
    2952:	90 70       	andi	r25, 0x00	; 0
    2954:	a0 70       	andi	r26, 0x00	; 0
    2956:	b0 70       	andi	r27, 0x00	; 0
    2958:	80 34       	cpi	r24, 0x40	; 64
    295a:	91 05       	cpc	r25, r1
    295c:	a1 05       	cpc	r26, r1
    295e:	b1 05       	cpc	r27, r1
    2960:	61 f4       	brne	.+24     	; 0x297a <__mulsf3+0x1ce>
    2962:	47 fd       	sbrc	r20, 7
    2964:	0a c0       	rjmp	.+20     	; 0x297a <__mulsf3+0x1ce>
    2966:	e1 14       	cp	r14, r1
    2968:	f1 04       	cpc	r15, r1
    296a:	01 05       	cpc	r16, r1
    296c:	11 05       	cpc	r17, r1
    296e:	29 f0       	breq	.+10     	; 0x297a <__mulsf3+0x1ce>
    2970:	40 5c       	subi	r20, 0xC0	; 192
    2972:	5f 4f       	sbci	r21, 0xFF	; 255
    2974:	6f 4f       	sbci	r22, 0xFF	; 255
    2976:	7f 4f       	sbci	r23, 0xFF	; 255
    2978:	40 78       	andi	r20, 0x80	; 128
    297a:	1a 8e       	std	Y+26, r1	; 0x1a
    297c:	fe 17       	cp	r31, r30
    297e:	11 f0       	breq	.+4      	; 0x2984 <__mulsf3+0x1d8>
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	8a 8f       	std	Y+26, r24	; 0x1a
    2984:	4d 8f       	std	Y+29, r20	; 0x1d
    2986:	5e 8f       	std	Y+30, r21	; 0x1e
    2988:	6f 8f       	std	Y+31, r22	; 0x1f
    298a:	78 a3       	std	Y+32, r23	; 0x20
    298c:	83 e0       	ldi	r24, 0x03	; 3
    298e:	89 8f       	std	Y+25, r24	; 0x19
    2990:	ce 01       	movw	r24, r28
    2992:	49 96       	adiw	r24, 0x19	; 25
    2994:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__pack_f>
    2998:	a0 96       	adiw	r28, 0x20	; 32
    299a:	e2 e1       	ldi	r30, 0x12	; 18
    299c:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__epilogue_restores__>

000029a0 <__divsf3>:
    29a0:	a8 e1       	ldi	r26, 0x18	; 24
    29a2:	b0 e0       	ldi	r27, 0x00	; 0
    29a4:	e6 ed       	ldi	r30, 0xD6	; 214
    29a6:	f4 e1       	ldi	r31, 0x14	; 20
    29a8:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__+0x10>
    29ac:	69 83       	std	Y+1, r22	; 0x01
    29ae:	7a 83       	std	Y+2, r23	; 0x02
    29b0:	8b 83       	std	Y+3, r24	; 0x03
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	2d 83       	std	Y+5, r18	; 0x05
    29b6:	3e 83       	std	Y+6, r19	; 0x06
    29b8:	4f 83       	std	Y+7, r20	; 0x07
    29ba:	58 87       	std	Y+8, r21	; 0x08
    29bc:	b9 e0       	ldi	r27, 0x09	; 9
    29be:	eb 2e       	mov	r14, r27
    29c0:	f1 2c       	mov	r15, r1
    29c2:	ec 0e       	add	r14, r28
    29c4:	fd 1e       	adc	r15, r29
    29c6:	ce 01       	movw	r24, r28
    29c8:	01 96       	adiw	r24, 0x01	; 1
    29ca:	b7 01       	movw	r22, r14
    29cc:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    29d0:	8e 01       	movw	r16, r28
    29d2:	0f 5e       	subi	r16, 0xEF	; 239
    29d4:	1f 4f       	sbci	r17, 0xFF	; 255
    29d6:	ce 01       	movw	r24, r28
    29d8:	05 96       	adiw	r24, 0x05	; 5
    29da:	b8 01       	movw	r22, r16
    29dc:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    29e0:	29 85       	ldd	r18, Y+9	; 0x09
    29e2:	22 30       	cpi	r18, 0x02	; 2
    29e4:	08 f4       	brcc	.+2      	; 0x29e8 <__divsf3+0x48>
    29e6:	7e c0       	rjmp	.+252    	; 0x2ae4 <__divsf3+0x144>
    29e8:	39 89       	ldd	r19, Y+17	; 0x11
    29ea:	32 30       	cpi	r19, 0x02	; 2
    29ec:	10 f4       	brcc	.+4      	; 0x29f2 <__divsf3+0x52>
    29ee:	b8 01       	movw	r22, r16
    29f0:	7c c0       	rjmp	.+248    	; 0x2aea <__divsf3+0x14a>
    29f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29f4:	9a 89       	ldd	r25, Y+18	; 0x12
    29f6:	89 27       	eor	r24, r25
    29f8:	8a 87       	std	Y+10, r24	; 0x0a
    29fa:	24 30       	cpi	r18, 0x04	; 4
    29fc:	11 f0       	breq	.+4      	; 0x2a02 <__divsf3+0x62>
    29fe:	22 30       	cpi	r18, 0x02	; 2
    2a00:	31 f4       	brne	.+12     	; 0x2a0e <__divsf3+0x6e>
    2a02:	23 17       	cp	r18, r19
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <__divsf3+0x68>
    2a06:	6e c0       	rjmp	.+220    	; 0x2ae4 <__divsf3+0x144>
    2a08:	68 e5       	ldi	r22, 0x58	; 88
    2a0a:	77 e0       	ldi	r23, 0x07	; 7
    2a0c:	6e c0       	rjmp	.+220    	; 0x2aea <__divsf3+0x14a>
    2a0e:	34 30       	cpi	r19, 0x04	; 4
    2a10:	39 f4       	brne	.+14     	; 0x2a20 <__divsf3+0x80>
    2a12:	1d 86       	std	Y+13, r1	; 0x0d
    2a14:	1e 86       	std	Y+14, r1	; 0x0e
    2a16:	1f 86       	std	Y+15, r1	; 0x0f
    2a18:	18 8a       	std	Y+16, r1	; 0x10
    2a1a:	1c 86       	std	Y+12, r1	; 0x0c
    2a1c:	1b 86       	std	Y+11, r1	; 0x0b
    2a1e:	04 c0       	rjmp	.+8      	; 0x2a28 <__divsf3+0x88>
    2a20:	32 30       	cpi	r19, 0x02	; 2
    2a22:	21 f4       	brne	.+8      	; 0x2a2c <__divsf3+0x8c>
    2a24:	84 e0       	ldi	r24, 0x04	; 4
    2a26:	89 87       	std	Y+9, r24	; 0x09
    2a28:	b7 01       	movw	r22, r14
    2a2a:	5f c0       	rjmp	.+190    	; 0x2aea <__divsf3+0x14a>
    2a2c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a2e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a30:	8b 89       	ldd	r24, Y+19	; 0x13
    2a32:	9c 89       	ldd	r25, Y+20	; 0x14
    2a34:	28 1b       	sub	r18, r24
    2a36:	39 0b       	sbc	r19, r25
    2a38:	3c 87       	std	Y+12, r19	; 0x0c
    2a3a:	2b 87       	std	Y+11, r18	; 0x0b
    2a3c:	ed 84       	ldd	r14, Y+13	; 0x0d
    2a3e:	fe 84       	ldd	r15, Y+14	; 0x0e
    2a40:	0f 85       	ldd	r16, Y+15	; 0x0f
    2a42:	18 89       	ldd	r17, Y+16	; 0x10
    2a44:	ad 88       	ldd	r10, Y+21	; 0x15
    2a46:	be 88       	ldd	r11, Y+22	; 0x16
    2a48:	cf 88       	ldd	r12, Y+23	; 0x17
    2a4a:	d8 8c       	ldd	r13, Y+24	; 0x18
    2a4c:	ea 14       	cp	r14, r10
    2a4e:	fb 04       	cpc	r15, r11
    2a50:	0c 05       	cpc	r16, r12
    2a52:	1d 05       	cpc	r17, r13
    2a54:	40 f4       	brcc	.+16     	; 0x2a66 <__divsf3+0xc6>
    2a56:	ee 0c       	add	r14, r14
    2a58:	ff 1c       	adc	r15, r15
    2a5a:	00 1f       	adc	r16, r16
    2a5c:	11 1f       	adc	r17, r17
    2a5e:	21 50       	subi	r18, 0x01	; 1
    2a60:	30 40       	sbci	r19, 0x00	; 0
    2a62:	3c 87       	std	Y+12, r19	; 0x0c
    2a64:	2b 87       	std	Y+11, r18	; 0x0b
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	a0 e0       	ldi	r26, 0x00	; 0
    2a74:	b0 e4       	ldi	r27, 0x40	; 64
    2a76:	60 e0       	ldi	r22, 0x00	; 0
    2a78:	70 e0       	ldi	r23, 0x00	; 0
    2a7a:	ea 14       	cp	r14, r10
    2a7c:	fb 04       	cpc	r15, r11
    2a7e:	0c 05       	cpc	r16, r12
    2a80:	1d 05       	cpc	r17, r13
    2a82:	40 f0       	brcs	.+16     	; 0x2a94 <__divsf3+0xf4>
    2a84:	28 2b       	or	r18, r24
    2a86:	39 2b       	or	r19, r25
    2a88:	4a 2b       	or	r20, r26
    2a8a:	5b 2b       	or	r21, r27
    2a8c:	ea 18       	sub	r14, r10
    2a8e:	fb 08       	sbc	r15, r11
    2a90:	0c 09       	sbc	r16, r12
    2a92:	1d 09       	sbc	r17, r13
    2a94:	b6 95       	lsr	r27
    2a96:	a7 95       	ror	r26
    2a98:	97 95       	ror	r25
    2a9a:	87 95       	ror	r24
    2a9c:	ee 0c       	add	r14, r14
    2a9e:	ff 1c       	adc	r15, r15
    2aa0:	00 1f       	adc	r16, r16
    2aa2:	11 1f       	adc	r17, r17
    2aa4:	6f 5f       	subi	r22, 0xFF	; 255
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	6f 31       	cpi	r22, 0x1F	; 31
    2aaa:	71 05       	cpc	r23, r1
    2aac:	31 f7       	brne	.-52     	; 0x2a7a <__divsf3+0xda>
    2aae:	da 01       	movw	r26, r20
    2ab0:	c9 01       	movw	r24, r18
    2ab2:	8f 77       	andi	r24, 0x7F	; 127
    2ab4:	90 70       	andi	r25, 0x00	; 0
    2ab6:	a0 70       	andi	r26, 0x00	; 0
    2ab8:	b0 70       	andi	r27, 0x00	; 0
    2aba:	80 34       	cpi	r24, 0x40	; 64
    2abc:	91 05       	cpc	r25, r1
    2abe:	a1 05       	cpc	r26, r1
    2ac0:	b1 05       	cpc	r27, r1
    2ac2:	61 f4       	brne	.+24     	; 0x2adc <__divsf3+0x13c>
    2ac4:	27 fd       	sbrc	r18, 7
    2ac6:	0a c0       	rjmp	.+20     	; 0x2adc <__divsf3+0x13c>
    2ac8:	e1 14       	cp	r14, r1
    2aca:	f1 04       	cpc	r15, r1
    2acc:	01 05       	cpc	r16, r1
    2ace:	11 05       	cpc	r17, r1
    2ad0:	29 f0       	breq	.+10     	; 0x2adc <__divsf3+0x13c>
    2ad2:	20 5c       	subi	r18, 0xC0	; 192
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    2ada:	20 78       	andi	r18, 0x80	; 128
    2adc:	2d 87       	std	Y+13, r18	; 0x0d
    2ade:	3e 87       	std	Y+14, r19	; 0x0e
    2ae0:	4f 87       	std	Y+15, r20	; 0x0f
    2ae2:	58 8b       	std	Y+16, r21	; 0x10
    2ae4:	be 01       	movw	r22, r28
    2ae6:	67 5f       	subi	r22, 0xF7	; 247
    2ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aea:	cb 01       	movw	r24, r22
    2aec:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__pack_f>
    2af0:	68 96       	adiw	r28, 0x18	; 24
    2af2:	ea e0       	ldi	r30, 0x0A	; 10
    2af4:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__+0x10>

00002af8 <__eqsf2>:
    2af8:	a8 e1       	ldi	r26, 0x18	; 24
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	e2 e8       	ldi	r30, 0x82	; 130
    2afe:	f5 e1       	ldi	r31, 0x15	; 21
    2b00:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__+0x18>
    2b04:	69 83       	std	Y+1, r22	; 0x01
    2b06:	7a 83       	std	Y+2, r23	; 0x02
    2b08:	8b 83       	std	Y+3, r24	; 0x03
    2b0a:	9c 83       	std	Y+4, r25	; 0x04
    2b0c:	2d 83       	std	Y+5, r18	; 0x05
    2b0e:	3e 83       	std	Y+6, r19	; 0x06
    2b10:	4f 83       	std	Y+7, r20	; 0x07
    2b12:	58 87       	std	Y+8, r21	; 0x08
    2b14:	89 e0       	ldi	r24, 0x09	; 9
    2b16:	e8 2e       	mov	r14, r24
    2b18:	f1 2c       	mov	r15, r1
    2b1a:	ec 0e       	add	r14, r28
    2b1c:	fd 1e       	adc	r15, r29
    2b1e:	ce 01       	movw	r24, r28
    2b20:	01 96       	adiw	r24, 0x01	; 1
    2b22:	b7 01       	movw	r22, r14
    2b24:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2b28:	8e 01       	movw	r16, r28
    2b2a:	0f 5e       	subi	r16, 0xEF	; 239
    2b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2e:	ce 01       	movw	r24, r28
    2b30:	05 96       	adiw	r24, 0x05	; 5
    2b32:	b8 01       	movw	r22, r16
    2b34:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2b38:	89 85       	ldd	r24, Y+9	; 0x09
    2b3a:	82 30       	cpi	r24, 0x02	; 2
    2b3c:	40 f0       	brcs	.+16     	; 0x2b4e <__eqsf2+0x56>
    2b3e:	89 89       	ldd	r24, Y+17	; 0x11
    2b40:	82 30       	cpi	r24, 0x02	; 2
    2b42:	28 f0       	brcs	.+10     	; 0x2b4e <__eqsf2+0x56>
    2b44:	c7 01       	movw	r24, r14
    2b46:	b8 01       	movw	r22, r16
    2b48:	0e 94 75 18 	call	0x30ea	; 0x30ea <__fpcmp_parts_f>
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <__eqsf2+0x58>
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	68 96       	adiw	r28, 0x18	; 24
    2b52:	e6 e0       	ldi	r30, 0x06	; 6
    2b54:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__+0x18>

00002b58 <__nesf2>:
    2b58:	a8 e1       	ldi	r26, 0x18	; 24
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e2 eb       	ldi	r30, 0xB2	; 178
    2b5e:	f5 e1       	ldi	r31, 0x15	; 21
    2b60:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__+0x18>
    2b64:	69 83       	std	Y+1, r22	; 0x01
    2b66:	7a 83       	std	Y+2, r23	; 0x02
    2b68:	8b 83       	std	Y+3, r24	; 0x03
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	2d 83       	std	Y+5, r18	; 0x05
    2b6e:	3e 83       	std	Y+6, r19	; 0x06
    2b70:	4f 83       	std	Y+7, r20	; 0x07
    2b72:	58 87       	std	Y+8, r21	; 0x08
    2b74:	89 e0       	ldi	r24, 0x09	; 9
    2b76:	e8 2e       	mov	r14, r24
    2b78:	f1 2c       	mov	r15, r1
    2b7a:	ec 0e       	add	r14, r28
    2b7c:	fd 1e       	adc	r15, r29
    2b7e:	ce 01       	movw	r24, r28
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	b7 01       	movw	r22, r14
    2b84:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2b88:	8e 01       	movw	r16, r28
    2b8a:	0f 5e       	subi	r16, 0xEF	; 239
    2b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8e:	ce 01       	movw	r24, r28
    2b90:	05 96       	adiw	r24, 0x05	; 5
    2b92:	b8 01       	movw	r22, r16
    2b94:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2b98:	89 85       	ldd	r24, Y+9	; 0x09
    2b9a:	82 30       	cpi	r24, 0x02	; 2
    2b9c:	40 f0       	brcs	.+16     	; 0x2bae <__nesf2+0x56>
    2b9e:	89 89       	ldd	r24, Y+17	; 0x11
    2ba0:	82 30       	cpi	r24, 0x02	; 2
    2ba2:	28 f0       	brcs	.+10     	; 0x2bae <__nesf2+0x56>
    2ba4:	c7 01       	movw	r24, r14
    2ba6:	b8 01       	movw	r22, r16
    2ba8:	0e 94 75 18 	call	0x30ea	; 0x30ea <__fpcmp_parts_f>
    2bac:	01 c0       	rjmp	.+2      	; 0x2bb0 <__nesf2+0x58>
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	68 96       	adiw	r28, 0x18	; 24
    2bb2:	e6 e0       	ldi	r30, 0x06	; 6
    2bb4:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__+0x18>

00002bb8 <__gesf2>:
    2bb8:	a8 e1       	ldi	r26, 0x18	; 24
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e2 ee       	ldi	r30, 0xE2	; 226
    2bbe:	f5 e1       	ldi	r31, 0x15	; 21
    2bc0:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__+0x18>
    2bc4:	69 83       	std	Y+1, r22	; 0x01
    2bc6:	7a 83       	std	Y+2, r23	; 0x02
    2bc8:	8b 83       	std	Y+3, r24	; 0x03
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	2d 83       	std	Y+5, r18	; 0x05
    2bce:	3e 83       	std	Y+6, r19	; 0x06
    2bd0:	4f 83       	std	Y+7, r20	; 0x07
    2bd2:	58 87       	std	Y+8, r21	; 0x08
    2bd4:	89 e0       	ldi	r24, 0x09	; 9
    2bd6:	e8 2e       	mov	r14, r24
    2bd8:	f1 2c       	mov	r15, r1
    2bda:	ec 0e       	add	r14, r28
    2bdc:	fd 1e       	adc	r15, r29
    2bde:	ce 01       	movw	r24, r28
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	b7 01       	movw	r22, r14
    2be4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2be8:	8e 01       	movw	r16, r28
    2bea:	0f 5e       	subi	r16, 0xEF	; 239
    2bec:	1f 4f       	sbci	r17, 0xFF	; 255
    2bee:	ce 01       	movw	r24, r28
    2bf0:	05 96       	adiw	r24, 0x05	; 5
    2bf2:	b8 01       	movw	r22, r16
    2bf4:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2bf8:	89 85       	ldd	r24, Y+9	; 0x09
    2bfa:	82 30       	cpi	r24, 0x02	; 2
    2bfc:	40 f0       	brcs	.+16     	; 0x2c0e <__gesf2+0x56>
    2bfe:	89 89       	ldd	r24, Y+17	; 0x11
    2c00:	82 30       	cpi	r24, 0x02	; 2
    2c02:	28 f0       	brcs	.+10     	; 0x2c0e <__gesf2+0x56>
    2c04:	c7 01       	movw	r24, r14
    2c06:	b8 01       	movw	r22, r16
    2c08:	0e 94 75 18 	call	0x30ea	; 0x30ea <__fpcmp_parts_f>
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <__gesf2+0x58>
    2c0e:	8f ef       	ldi	r24, 0xFF	; 255
    2c10:	68 96       	adiw	r28, 0x18	; 24
    2c12:	e6 e0       	ldi	r30, 0x06	; 6
    2c14:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__+0x18>

00002c18 <__fixsfsi>:
    2c18:	ac e0       	ldi	r26, 0x0C	; 12
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e2 e1       	ldi	r30, 0x12	; 18
    2c1e:	f6 e1       	ldi	r31, 0x16	; 22
    2c20:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x20>
    2c24:	69 83       	std	Y+1, r22	; 0x01
    2c26:	7a 83       	std	Y+2, r23	; 0x02
    2c28:	8b 83       	std	Y+3, r24	; 0x03
    2c2a:	9c 83       	std	Y+4, r25	; 0x04
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	be 01       	movw	r22, r28
    2c32:	6b 5f       	subi	r22, 0xFB	; 251
    2c34:	7f 4f       	sbci	r23, 0xFF	; 255
    2c36:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__unpack_f>
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	82 30       	cpi	r24, 0x02	; 2
    2c3e:	61 f1       	breq	.+88     	; 0x2c98 <__fixsfsi+0x80>
    2c40:	82 30       	cpi	r24, 0x02	; 2
    2c42:	50 f1       	brcs	.+84     	; 0x2c98 <__fixsfsi+0x80>
    2c44:	84 30       	cpi	r24, 0x04	; 4
    2c46:	21 f4       	brne	.+8      	; 0x2c50 <__fixsfsi+0x38>
    2c48:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4a:	88 23       	and	r24, r24
    2c4c:	51 f1       	breq	.+84     	; 0x2ca2 <__fixsfsi+0x8a>
    2c4e:	2e c0       	rjmp	.+92     	; 0x2cac <__fixsfsi+0x94>
    2c50:	2f 81       	ldd	r18, Y+7	; 0x07
    2c52:	38 85       	ldd	r19, Y+8	; 0x08
    2c54:	37 fd       	sbrc	r19, 7
    2c56:	20 c0       	rjmp	.+64     	; 0x2c98 <__fixsfsi+0x80>
    2c58:	6e 81       	ldd	r22, Y+6	; 0x06
    2c5a:	2f 31       	cpi	r18, 0x1F	; 31
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	1c f0       	brlt	.+6      	; 0x2c66 <__fixsfsi+0x4e>
    2c60:	66 23       	and	r22, r22
    2c62:	f9 f0       	breq	.+62     	; 0x2ca2 <__fixsfsi+0x8a>
    2c64:	23 c0       	rjmp	.+70     	; 0x2cac <__fixsfsi+0x94>
    2c66:	8e e1       	ldi	r24, 0x1E	; 30
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	82 1b       	sub	r24, r18
    2c6c:	93 0b       	sbc	r25, r19
    2c6e:	29 85       	ldd	r18, Y+9	; 0x09
    2c70:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c72:	4b 85       	ldd	r20, Y+11	; 0x0b
    2c74:	5c 85       	ldd	r21, Y+12	; 0x0c
    2c76:	04 c0       	rjmp	.+8      	; 0x2c80 <__fixsfsi+0x68>
    2c78:	56 95       	lsr	r21
    2c7a:	47 95       	ror	r20
    2c7c:	37 95       	ror	r19
    2c7e:	27 95       	ror	r18
    2c80:	8a 95       	dec	r24
    2c82:	d2 f7       	brpl	.-12     	; 0x2c78 <__fixsfsi+0x60>
    2c84:	66 23       	and	r22, r22
    2c86:	b1 f0       	breq	.+44     	; 0x2cb4 <__fixsfsi+0x9c>
    2c88:	50 95       	com	r21
    2c8a:	40 95       	com	r20
    2c8c:	30 95       	com	r19
    2c8e:	21 95       	neg	r18
    2c90:	3f 4f       	sbci	r19, 0xFF	; 255
    2c92:	4f 4f       	sbci	r20, 0xFF	; 255
    2c94:	5f 4f       	sbci	r21, 0xFF	; 255
    2c96:	0e c0       	rjmp	.+28     	; 0x2cb4 <__fixsfsi+0x9c>
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	09 c0       	rjmp	.+18     	; 0x2cb4 <__fixsfsi+0x9c>
    2ca2:	2f ef       	ldi	r18, 0xFF	; 255
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f ef       	ldi	r20, 0xFF	; 255
    2ca8:	5f e7       	ldi	r21, 0x7F	; 127
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <__fixsfsi+0x9c>
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	50 e8       	ldi	r21, 0x80	; 128
    2cb4:	b9 01       	movw	r22, r18
    2cb6:	ca 01       	movw	r24, r20
    2cb8:	2c 96       	adiw	r28, 0x0c	; 12
    2cba:	e2 e0       	ldi	r30, 0x02	; 2
    2cbc:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x20>

00002cc0 <__floatunsisf>:
    2cc0:	a8 e0       	ldi	r26, 0x08	; 8
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	e6 e6       	ldi	r30, 0x66	; 102
    2cc6:	f6 e1       	ldi	r31, 0x16	; 22
    2cc8:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__+0x10>
    2ccc:	7b 01       	movw	r14, r22
    2cce:	8c 01       	movw	r16, r24
    2cd0:	61 15       	cp	r22, r1
    2cd2:	71 05       	cpc	r23, r1
    2cd4:	81 05       	cpc	r24, r1
    2cd6:	91 05       	cpc	r25, r1
    2cd8:	19 f4       	brne	.+6      	; 0x2ce0 <__floatunsisf+0x20>
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	60 c0       	rjmp	.+192    	; 0x2da0 <__floatunsisf+0xe0>
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	8e e1       	ldi	r24, 0x1E	; 30
    2ce6:	c8 2e       	mov	r12, r24
    2ce8:	d1 2c       	mov	r13, r1
    2cea:	dc 82       	std	Y+4, r13	; 0x04
    2cec:	cb 82       	std	Y+3, r12	; 0x03
    2cee:	ed 82       	std	Y+5, r14	; 0x05
    2cf0:	fe 82       	std	Y+6, r15	; 0x06
    2cf2:	0f 83       	std	Y+7, r16	; 0x07
    2cf4:	18 87       	std	Y+8, r17	; 0x08
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	b7 01       	movw	r22, r14
    2cfa:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__clzsi2>
    2cfe:	fc 01       	movw	r30, r24
    2d00:	31 97       	sbiw	r30, 0x01	; 1
    2d02:	f7 ff       	sbrs	r31, 7
    2d04:	3b c0       	rjmp	.+118    	; 0x2d7c <__floatunsisf+0xbc>
    2d06:	22 27       	eor	r18, r18
    2d08:	33 27       	eor	r19, r19
    2d0a:	2e 1b       	sub	r18, r30
    2d0c:	3f 0b       	sbc	r19, r31
    2d0e:	57 01       	movw	r10, r14
    2d10:	68 01       	movw	r12, r16
    2d12:	02 2e       	mov	r0, r18
    2d14:	04 c0       	rjmp	.+8      	; 0x2d1e <__floatunsisf+0x5e>
    2d16:	d6 94       	lsr	r13
    2d18:	c7 94       	ror	r12
    2d1a:	b7 94       	ror	r11
    2d1c:	a7 94       	ror	r10
    2d1e:	0a 94       	dec	r0
    2d20:	d2 f7       	brpl	.-12     	; 0x2d16 <__floatunsisf+0x56>
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	a0 e0       	ldi	r26, 0x00	; 0
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <__floatunsisf+0x7c>
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	aa 1f       	adc	r26, r26
    2d3a:	bb 1f       	adc	r27, r27
    2d3c:	2a 95       	dec	r18
    2d3e:	d2 f7       	brpl	.-12     	; 0x2d34 <__floatunsisf+0x74>
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	a1 09       	sbc	r26, r1
    2d44:	b1 09       	sbc	r27, r1
    2d46:	8e 21       	and	r24, r14
    2d48:	9f 21       	and	r25, r15
    2d4a:	a0 23       	and	r26, r16
    2d4c:	b1 23       	and	r27, r17
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	a1 05       	cpc	r26, r1
    2d52:	b1 05       	cpc	r27, r1
    2d54:	21 f0       	breq	.+8      	; 0x2d5e <__floatunsisf+0x9e>
    2d56:	41 e0       	ldi	r20, 0x01	; 1
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	4a 29       	or	r20, r10
    2d60:	5b 29       	or	r21, r11
    2d62:	6c 29       	or	r22, r12
    2d64:	7d 29       	or	r23, r13
    2d66:	4d 83       	std	Y+5, r20	; 0x05
    2d68:	5e 83       	std	Y+6, r21	; 0x06
    2d6a:	6f 83       	std	Y+7, r22	; 0x07
    2d6c:	78 87       	std	Y+8, r23	; 0x08
    2d6e:	8e e1       	ldi	r24, 0x1E	; 30
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	8e 1b       	sub	r24, r30
    2d74:	9f 0b       	sbc	r25, r31
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	8b 83       	std	Y+3, r24	; 0x03
    2d7a:	12 c0       	rjmp	.+36     	; 0x2da0 <__floatunsisf+0xe0>
    2d7c:	30 97       	sbiw	r30, 0x00	; 0
    2d7e:	81 f0       	breq	.+32     	; 0x2da0 <__floatunsisf+0xe0>
    2d80:	0e 2e       	mov	r0, r30
    2d82:	04 c0       	rjmp	.+8      	; 0x2d8c <__floatunsisf+0xcc>
    2d84:	ee 0c       	add	r14, r14
    2d86:	ff 1c       	adc	r15, r15
    2d88:	00 1f       	adc	r16, r16
    2d8a:	11 1f       	adc	r17, r17
    2d8c:	0a 94       	dec	r0
    2d8e:	d2 f7       	brpl	.-12     	; 0x2d84 <__floatunsisf+0xc4>
    2d90:	ed 82       	std	Y+5, r14	; 0x05
    2d92:	fe 82       	std	Y+6, r15	; 0x06
    2d94:	0f 83       	std	Y+7, r16	; 0x07
    2d96:	18 87       	std	Y+8, r17	; 0x08
    2d98:	ce 1a       	sub	r12, r30
    2d9a:	df 0a       	sbc	r13, r31
    2d9c:	dc 82       	std	Y+4, r13	; 0x04
    2d9e:	cb 82       	std	Y+3, r12	; 0x03
    2da0:	1a 82       	std	Y+2, r1	; 0x02
    2da2:	ce 01       	movw	r24, r28
    2da4:	01 96       	adiw	r24, 0x01	; 1
    2da6:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__pack_f>
    2daa:	28 96       	adiw	r28, 0x08	; 8
    2dac:	ea e0       	ldi	r30, 0x0A	; 10
    2dae:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__+0x10>

00002db2 <__clzsi2>:
    2db2:	ef 92       	push	r14
    2db4:	ff 92       	push	r15
    2db6:	0f 93       	push	r16
    2db8:	1f 93       	push	r17
    2dba:	7b 01       	movw	r14, r22
    2dbc:	8c 01       	movw	r16, r24
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	e8 16       	cp	r14, r24
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	f8 06       	cpc	r15, r24
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	08 07       	cpc	r16, r24
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	18 07       	cpc	r17, r24
    2dce:	88 f4       	brcc	.+34     	; 0x2df2 <__clzsi2+0x40>
    2dd0:	8f ef       	ldi	r24, 0xFF	; 255
    2dd2:	e8 16       	cp	r14, r24
    2dd4:	f1 04       	cpc	r15, r1
    2dd6:	01 05       	cpc	r16, r1
    2dd8:	11 05       	cpc	r17, r1
    2dda:	31 f0       	breq	.+12     	; 0x2de8 <__clzsi2+0x36>
    2ddc:	28 f0       	brcs	.+10     	; 0x2de8 <__clzsi2+0x36>
    2dde:	88 e0       	ldi	r24, 0x08	; 8
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	a0 e0       	ldi	r26, 0x00	; 0
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
    2de6:	17 c0       	rjmp	.+46     	; 0x2e16 <__clzsi2+0x64>
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	a0 e0       	ldi	r26, 0x00	; 0
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	12 c0       	rjmp	.+36     	; 0x2e16 <__clzsi2+0x64>
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	e8 16       	cp	r14, r24
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	f8 06       	cpc	r15, r24
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	08 07       	cpc	r16, r24
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	18 07       	cpc	r17, r24
    2e02:	28 f0       	brcs	.+10     	; 0x2e0e <__clzsi2+0x5c>
    2e04:	88 e1       	ldi	r24, 0x18	; 24
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	a0 e0       	ldi	r26, 0x00	; 0
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	04 c0       	rjmp	.+8      	; 0x2e16 <__clzsi2+0x64>
    2e0e:	80 e1       	ldi	r24, 0x10	; 16
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	a0 e0       	ldi	r26, 0x00	; 0
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	20 e2       	ldi	r18, 0x20	; 32
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	28 1b       	sub	r18, r24
    2e20:	39 0b       	sbc	r19, r25
    2e22:	4a 0b       	sbc	r20, r26
    2e24:	5b 0b       	sbc	r21, r27
    2e26:	04 c0       	rjmp	.+8      	; 0x2e30 <__clzsi2+0x7e>
    2e28:	16 95       	lsr	r17
    2e2a:	07 95       	ror	r16
    2e2c:	f7 94       	ror	r15
    2e2e:	e7 94       	ror	r14
    2e30:	8a 95       	dec	r24
    2e32:	d2 f7       	brpl	.-12     	; 0x2e28 <__clzsi2+0x76>
    2e34:	f7 01       	movw	r30, r14
    2e36:	e0 5a       	subi	r30, 0xA0	; 160
    2e38:	f8 4f       	sbci	r31, 0xF8	; 248
    2e3a:	80 81       	ld	r24, Z
    2e3c:	28 1b       	sub	r18, r24
    2e3e:	31 09       	sbc	r19, r1
    2e40:	41 09       	sbc	r20, r1
    2e42:	51 09       	sbc	r21, r1
    2e44:	c9 01       	movw	r24, r18
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	ff 90       	pop	r15
    2e4c:	ef 90       	pop	r14
    2e4e:	08 95       	ret

00002e50 <__pack_f>:
    2e50:	df 92       	push	r13
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	e4 80       	ldd	r14, Z+4	; 0x04
    2e5e:	f5 80       	ldd	r15, Z+5	; 0x05
    2e60:	06 81       	ldd	r16, Z+6	; 0x06
    2e62:	17 81       	ldd	r17, Z+7	; 0x07
    2e64:	d1 80       	ldd	r13, Z+1	; 0x01
    2e66:	80 81       	ld	r24, Z
    2e68:	82 30       	cpi	r24, 0x02	; 2
    2e6a:	48 f4       	brcc	.+18     	; 0x2e7e <__pack_f+0x2e>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e1       	ldi	r26, 0x10	; 16
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	e8 2a       	or	r14, r24
    2e76:	f9 2a       	or	r15, r25
    2e78:	0a 2b       	or	r16, r26
    2e7a:	1b 2b       	or	r17, r27
    2e7c:	a5 c0       	rjmp	.+330    	; 0x2fc8 <__pack_f+0x178>
    2e7e:	84 30       	cpi	r24, 0x04	; 4
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <__pack_f+0x34>
    2e82:	9f c0       	rjmp	.+318    	; 0x2fc2 <__pack_f+0x172>
    2e84:	82 30       	cpi	r24, 0x02	; 2
    2e86:	21 f4       	brne	.+8      	; 0x2e90 <__pack_f+0x40>
    2e88:	ee 24       	eor	r14, r14
    2e8a:	ff 24       	eor	r15, r15
    2e8c:	87 01       	movw	r16, r14
    2e8e:	05 c0       	rjmp	.+10     	; 0x2e9a <__pack_f+0x4a>
    2e90:	e1 14       	cp	r14, r1
    2e92:	f1 04       	cpc	r15, r1
    2e94:	01 05       	cpc	r16, r1
    2e96:	11 05       	cpc	r17, r1
    2e98:	19 f4       	brne	.+6      	; 0x2ea0 <__pack_f+0x50>
    2e9a:	e0 e0       	ldi	r30, 0x00	; 0
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	96 c0       	rjmp	.+300    	; 0x2fcc <__pack_f+0x17c>
    2ea0:	62 81       	ldd	r22, Z+2	; 0x02
    2ea2:	73 81       	ldd	r23, Z+3	; 0x03
    2ea4:	9f ef       	ldi	r25, 0xFF	; 255
    2ea6:	62 38       	cpi	r22, 0x82	; 130
    2ea8:	79 07       	cpc	r23, r25
    2eaa:	0c f0       	brlt	.+2      	; 0x2eae <__pack_f+0x5e>
    2eac:	5b c0       	rjmp	.+182    	; 0x2f64 <__pack_f+0x114>
    2eae:	22 e8       	ldi	r18, 0x82	; 130
    2eb0:	3f ef       	ldi	r19, 0xFF	; 255
    2eb2:	26 1b       	sub	r18, r22
    2eb4:	37 0b       	sbc	r19, r23
    2eb6:	2a 31       	cpi	r18, 0x1A	; 26
    2eb8:	31 05       	cpc	r19, r1
    2eba:	2c f0       	brlt	.+10     	; 0x2ec6 <__pack_f+0x76>
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	50 e0       	ldi	r21, 0x00	; 0
    2ec4:	2a c0       	rjmp	.+84     	; 0x2f1a <__pack_f+0xca>
    2ec6:	b8 01       	movw	r22, r16
    2ec8:	a7 01       	movw	r20, r14
    2eca:	02 2e       	mov	r0, r18
    2ecc:	04 c0       	rjmp	.+8      	; 0x2ed6 <__pack_f+0x86>
    2ece:	76 95       	lsr	r23
    2ed0:	67 95       	ror	r22
    2ed2:	57 95       	ror	r21
    2ed4:	47 95       	ror	r20
    2ed6:	0a 94       	dec	r0
    2ed8:	d2 f7       	brpl	.-12     	; 0x2ece <__pack_f+0x7e>
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a0 e0       	ldi	r26, 0x00	; 0
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	04 c0       	rjmp	.+8      	; 0x2eec <__pack_f+0x9c>
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	aa 1f       	adc	r26, r26
    2eea:	bb 1f       	adc	r27, r27
    2eec:	2a 95       	dec	r18
    2eee:	d2 f7       	brpl	.-12     	; 0x2ee4 <__pack_f+0x94>
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	a1 09       	sbc	r26, r1
    2ef4:	b1 09       	sbc	r27, r1
    2ef6:	8e 21       	and	r24, r14
    2ef8:	9f 21       	and	r25, r15
    2efa:	a0 23       	and	r26, r16
    2efc:	b1 23       	and	r27, r17
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	a1 05       	cpc	r26, r1
    2f02:	b1 05       	cpc	r27, r1
    2f04:	21 f0       	breq	.+8      	; 0x2f0e <__pack_f+0xbe>
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a0 e0       	ldi	r26, 0x00	; 0
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	9a 01       	movw	r18, r20
    2f10:	ab 01       	movw	r20, r22
    2f12:	28 2b       	or	r18, r24
    2f14:	39 2b       	or	r19, r25
    2f16:	4a 2b       	or	r20, r26
    2f18:	5b 2b       	or	r21, r27
    2f1a:	da 01       	movw	r26, r20
    2f1c:	c9 01       	movw	r24, r18
    2f1e:	8f 77       	andi	r24, 0x7F	; 127
    2f20:	90 70       	andi	r25, 0x00	; 0
    2f22:	a0 70       	andi	r26, 0x00	; 0
    2f24:	b0 70       	andi	r27, 0x00	; 0
    2f26:	80 34       	cpi	r24, 0x40	; 64
    2f28:	91 05       	cpc	r25, r1
    2f2a:	a1 05       	cpc	r26, r1
    2f2c:	b1 05       	cpc	r27, r1
    2f2e:	39 f4       	brne	.+14     	; 0x2f3e <__pack_f+0xee>
    2f30:	27 ff       	sbrs	r18, 7
    2f32:	09 c0       	rjmp	.+18     	; 0x2f46 <__pack_f+0xf6>
    2f34:	20 5c       	subi	r18, 0xC0	; 192
    2f36:	3f 4f       	sbci	r19, 0xFF	; 255
    2f38:	4f 4f       	sbci	r20, 0xFF	; 255
    2f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3c:	04 c0       	rjmp	.+8      	; 0x2f46 <__pack_f+0xf6>
    2f3e:	21 5c       	subi	r18, 0xC1	; 193
    2f40:	3f 4f       	sbci	r19, 0xFF	; 255
    2f42:	4f 4f       	sbci	r20, 0xFF	; 255
    2f44:	5f 4f       	sbci	r21, 0xFF	; 255
    2f46:	e0 e0       	ldi	r30, 0x00	; 0
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	20 30       	cpi	r18, 0x00	; 0
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	3a 07       	cpc	r19, r26
    2f50:	a0 e0       	ldi	r26, 0x00	; 0
    2f52:	4a 07       	cpc	r20, r26
    2f54:	a0 e4       	ldi	r26, 0x40	; 64
    2f56:	5a 07       	cpc	r21, r26
    2f58:	10 f0       	brcs	.+4      	; 0x2f5e <__pack_f+0x10e>
    2f5a:	e1 e0       	ldi	r30, 0x01	; 1
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	79 01       	movw	r14, r18
    2f60:	8a 01       	movw	r16, r20
    2f62:	27 c0       	rjmp	.+78     	; 0x2fb2 <__pack_f+0x162>
    2f64:	60 38       	cpi	r22, 0x80	; 128
    2f66:	71 05       	cpc	r23, r1
    2f68:	64 f5       	brge	.+88     	; 0x2fc2 <__pack_f+0x172>
    2f6a:	fb 01       	movw	r30, r22
    2f6c:	e1 58       	subi	r30, 0x81	; 129
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	d8 01       	movw	r26, r16
    2f72:	c7 01       	movw	r24, r14
    2f74:	8f 77       	andi	r24, 0x7F	; 127
    2f76:	90 70       	andi	r25, 0x00	; 0
    2f78:	a0 70       	andi	r26, 0x00	; 0
    2f7a:	b0 70       	andi	r27, 0x00	; 0
    2f7c:	80 34       	cpi	r24, 0x40	; 64
    2f7e:	91 05       	cpc	r25, r1
    2f80:	a1 05       	cpc	r26, r1
    2f82:	b1 05       	cpc	r27, r1
    2f84:	39 f4       	brne	.+14     	; 0x2f94 <__pack_f+0x144>
    2f86:	e7 fe       	sbrs	r14, 7
    2f88:	0d c0       	rjmp	.+26     	; 0x2fa4 <__pack_f+0x154>
    2f8a:	80 e4       	ldi	r24, 0x40	; 64
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	a0 e0       	ldi	r26, 0x00	; 0
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	04 c0       	rjmp	.+8      	; 0x2f9c <__pack_f+0x14c>
    2f94:	8f e3       	ldi	r24, 0x3F	; 63
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	a0 e0       	ldi	r26, 0x00	; 0
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e8 0e       	add	r14, r24
    2f9e:	f9 1e       	adc	r15, r25
    2fa0:	0a 1f       	adc	r16, r26
    2fa2:	1b 1f       	adc	r17, r27
    2fa4:	17 ff       	sbrs	r17, 7
    2fa6:	05 c0       	rjmp	.+10     	; 0x2fb2 <__pack_f+0x162>
    2fa8:	16 95       	lsr	r17
    2faa:	07 95       	ror	r16
    2fac:	f7 94       	ror	r15
    2fae:	e7 94       	ror	r14
    2fb0:	31 96       	adiw	r30, 0x01	; 1
    2fb2:	87 e0       	ldi	r24, 0x07	; 7
    2fb4:	16 95       	lsr	r17
    2fb6:	07 95       	ror	r16
    2fb8:	f7 94       	ror	r15
    2fba:	e7 94       	ror	r14
    2fbc:	8a 95       	dec	r24
    2fbe:	d1 f7       	brne	.-12     	; 0x2fb4 <__pack_f+0x164>
    2fc0:	05 c0       	rjmp	.+10     	; 0x2fcc <__pack_f+0x17c>
    2fc2:	ee 24       	eor	r14, r14
    2fc4:	ff 24       	eor	r15, r15
    2fc6:	87 01       	movw	r16, r14
    2fc8:	ef ef       	ldi	r30, 0xFF	; 255
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	6e 2f       	mov	r22, r30
    2fce:	67 95       	ror	r22
    2fd0:	66 27       	eor	r22, r22
    2fd2:	67 95       	ror	r22
    2fd4:	90 2f       	mov	r25, r16
    2fd6:	9f 77       	andi	r25, 0x7F	; 127
    2fd8:	d7 94       	ror	r13
    2fda:	dd 24       	eor	r13, r13
    2fdc:	d7 94       	ror	r13
    2fde:	8e 2f       	mov	r24, r30
    2fe0:	86 95       	lsr	r24
    2fe2:	49 2f       	mov	r20, r25
    2fe4:	46 2b       	or	r20, r22
    2fe6:	58 2f       	mov	r21, r24
    2fe8:	5d 29       	or	r21, r13
    2fea:	b7 01       	movw	r22, r14
    2fec:	ca 01       	movw	r24, r20
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	ef 90       	pop	r14
    2ff6:	df 90       	pop	r13
    2ff8:	08 95       	ret

00002ffa <__unpack_f>:
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	db 01       	movw	r26, r22
    2ffe:	40 81       	ld	r20, Z
    3000:	51 81       	ldd	r21, Z+1	; 0x01
    3002:	22 81       	ldd	r18, Z+2	; 0x02
    3004:	62 2f       	mov	r22, r18
    3006:	6f 77       	andi	r22, 0x7F	; 127
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	22 1f       	adc	r18, r18
    300c:	22 27       	eor	r18, r18
    300e:	22 1f       	adc	r18, r18
    3010:	93 81       	ldd	r25, Z+3	; 0x03
    3012:	89 2f       	mov	r24, r25
    3014:	88 0f       	add	r24, r24
    3016:	82 2b       	or	r24, r18
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	99 1f       	adc	r25, r25
    301e:	99 27       	eor	r25, r25
    3020:	99 1f       	adc	r25, r25
    3022:	11 96       	adiw	r26, 0x01	; 1
    3024:	9c 93       	st	X, r25
    3026:	11 97       	sbiw	r26, 0x01	; 1
    3028:	21 15       	cp	r18, r1
    302a:	31 05       	cpc	r19, r1
    302c:	a9 f5       	brne	.+106    	; 0x3098 <__unpack_f+0x9e>
    302e:	41 15       	cp	r20, r1
    3030:	51 05       	cpc	r21, r1
    3032:	61 05       	cpc	r22, r1
    3034:	71 05       	cpc	r23, r1
    3036:	11 f4       	brne	.+4      	; 0x303c <__unpack_f+0x42>
    3038:	82 e0       	ldi	r24, 0x02	; 2
    303a:	37 c0       	rjmp	.+110    	; 0x30aa <__unpack_f+0xb0>
    303c:	82 e8       	ldi	r24, 0x82	; 130
    303e:	9f ef       	ldi	r25, 0xFF	; 255
    3040:	13 96       	adiw	r26, 0x03	; 3
    3042:	9c 93       	st	X, r25
    3044:	8e 93       	st	-X, r24
    3046:	12 97       	sbiw	r26, 0x02	; 2
    3048:	9a 01       	movw	r18, r20
    304a:	ab 01       	movw	r20, r22
    304c:	67 e0       	ldi	r22, 0x07	; 7
    304e:	22 0f       	add	r18, r18
    3050:	33 1f       	adc	r19, r19
    3052:	44 1f       	adc	r20, r20
    3054:	55 1f       	adc	r21, r21
    3056:	6a 95       	dec	r22
    3058:	d1 f7       	brne	.-12     	; 0x304e <__unpack_f+0x54>
    305a:	83 e0       	ldi	r24, 0x03	; 3
    305c:	8c 93       	st	X, r24
    305e:	0d c0       	rjmp	.+26     	; 0x307a <__unpack_f+0x80>
    3060:	22 0f       	add	r18, r18
    3062:	33 1f       	adc	r19, r19
    3064:	44 1f       	adc	r20, r20
    3066:	55 1f       	adc	r21, r21
    3068:	12 96       	adiw	r26, 0x02	; 2
    306a:	8d 91       	ld	r24, X+
    306c:	9c 91       	ld	r25, X
    306e:	13 97       	sbiw	r26, 0x03	; 3
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	13 96       	adiw	r26, 0x03	; 3
    3074:	9c 93       	st	X, r25
    3076:	8e 93       	st	-X, r24
    3078:	12 97       	sbiw	r26, 0x02	; 2
    307a:	20 30       	cpi	r18, 0x00	; 0
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	38 07       	cpc	r19, r24
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	48 07       	cpc	r20, r24
    3084:	80 e4       	ldi	r24, 0x40	; 64
    3086:	58 07       	cpc	r21, r24
    3088:	58 f3       	brcs	.-42     	; 0x3060 <__unpack_f+0x66>
    308a:	14 96       	adiw	r26, 0x04	; 4
    308c:	2d 93       	st	X+, r18
    308e:	3d 93       	st	X+, r19
    3090:	4d 93       	st	X+, r20
    3092:	5c 93       	st	X, r21
    3094:	17 97       	sbiw	r26, 0x07	; 7
    3096:	08 95       	ret
    3098:	2f 3f       	cpi	r18, 0xFF	; 255
    309a:	31 05       	cpc	r19, r1
    309c:	79 f4       	brne	.+30     	; 0x30bc <__unpack_f+0xc2>
    309e:	41 15       	cp	r20, r1
    30a0:	51 05       	cpc	r21, r1
    30a2:	61 05       	cpc	r22, r1
    30a4:	71 05       	cpc	r23, r1
    30a6:	19 f4       	brne	.+6      	; 0x30ae <__unpack_f+0xb4>
    30a8:	84 e0       	ldi	r24, 0x04	; 4
    30aa:	8c 93       	st	X, r24
    30ac:	08 95       	ret
    30ae:	64 ff       	sbrs	r22, 4
    30b0:	03 c0       	rjmp	.+6      	; 0x30b8 <__unpack_f+0xbe>
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	8c 93       	st	X, r24
    30b6:	12 c0       	rjmp	.+36     	; 0x30dc <__unpack_f+0xe2>
    30b8:	1c 92       	st	X, r1
    30ba:	10 c0       	rjmp	.+32     	; 0x30dc <__unpack_f+0xe2>
    30bc:	2f 57       	subi	r18, 0x7F	; 127
    30be:	30 40       	sbci	r19, 0x00	; 0
    30c0:	13 96       	adiw	r26, 0x03	; 3
    30c2:	3c 93       	st	X, r19
    30c4:	2e 93       	st	-X, r18
    30c6:	12 97       	sbiw	r26, 0x02	; 2
    30c8:	83 e0       	ldi	r24, 0x03	; 3
    30ca:	8c 93       	st	X, r24
    30cc:	87 e0       	ldi	r24, 0x07	; 7
    30ce:	44 0f       	add	r20, r20
    30d0:	55 1f       	adc	r21, r21
    30d2:	66 1f       	adc	r22, r22
    30d4:	77 1f       	adc	r23, r23
    30d6:	8a 95       	dec	r24
    30d8:	d1 f7       	brne	.-12     	; 0x30ce <__unpack_f+0xd4>
    30da:	70 64       	ori	r23, 0x40	; 64
    30dc:	14 96       	adiw	r26, 0x04	; 4
    30de:	4d 93       	st	X+, r20
    30e0:	5d 93       	st	X+, r21
    30e2:	6d 93       	st	X+, r22
    30e4:	7c 93       	st	X, r23
    30e6:	17 97       	sbiw	r26, 0x07	; 7
    30e8:	08 95       	ret

000030ea <__fpcmp_parts_f>:
    30ea:	1f 93       	push	r17
    30ec:	dc 01       	movw	r26, r24
    30ee:	fb 01       	movw	r30, r22
    30f0:	9c 91       	ld	r25, X
    30f2:	92 30       	cpi	r25, 0x02	; 2
    30f4:	08 f4       	brcc	.+2      	; 0x30f8 <__fpcmp_parts_f+0xe>
    30f6:	47 c0       	rjmp	.+142    	; 0x3186 <__fpcmp_parts_f+0x9c>
    30f8:	80 81       	ld	r24, Z
    30fa:	82 30       	cpi	r24, 0x02	; 2
    30fc:	08 f4       	brcc	.+2      	; 0x3100 <__fpcmp_parts_f+0x16>
    30fe:	43 c0       	rjmp	.+134    	; 0x3186 <__fpcmp_parts_f+0x9c>
    3100:	94 30       	cpi	r25, 0x04	; 4
    3102:	51 f4       	brne	.+20     	; 0x3118 <__fpcmp_parts_f+0x2e>
    3104:	11 96       	adiw	r26, 0x01	; 1
    3106:	1c 91       	ld	r17, X
    3108:	84 30       	cpi	r24, 0x04	; 4
    310a:	99 f5       	brne	.+102    	; 0x3172 <__fpcmp_parts_f+0x88>
    310c:	81 81       	ldd	r24, Z+1	; 0x01
    310e:	68 2f       	mov	r22, r24
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	61 1b       	sub	r22, r17
    3114:	71 09       	sbc	r23, r1
    3116:	3f c0       	rjmp	.+126    	; 0x3196 <__fpcmp_parts_f+0xac>
    3118:	84 30       	cpi	r24, 0x04	; 4
    311a:	21 f0       	breq	.+8      	; 0x3124 <__fpcmp_parts_f+0x3a>
    311c:	92 30       	cpi	r25, 0x02	; 2
    311e:	31 f4       	brne	.+12     	; 0x312c <__fpcmp_parts_f+0x42>
    3120:	82 30       	cpi	r24, 0x02	; 2
    3122:	b9 f1       	breq	.+110    	; 0x3192 <__fpcmp_parts_f+0xa8>
    3124:	81 81       	ldd	r24, Z+1	; 0x01
    3126:	88 23       	and	r24, r24
    3128:	89 f1       	breq	.+98     	; 0x318c <__fpcmp_parts_f+0xa2>
    312a:	2d c0       	rjmp	.+90     	; 0x3186 <__fpcmp_parts_f+0x9c>
    312c:	11 96       	adiw	r26, 0x01	; 1
    312e:	1c 91       	ld	r17, X
    3130:	11 97       	sbiw	r26, 0x01	; 1
    3132:	82 30       	cpi	r24, 0x02	; 2
    3134:	f1 f0       	breq	.+60     	; 0x3172 <__fpcmp_parts_f+0x88>
    3136:	81 81       	ldd	r24, Z+1	; 0x01
    3138:	18 17       	cp	r17, r24
    313a:	d9 f4       	brne	.+54     	; 0x3172 <__fpcmp_parts_f+0x88>
    313c:	12 96       	adiw	r26, 0x02	; 2
    313e:	2d 91       	ld	r18, X+
    3140:	3c 91       	ld	r19, X
    3142:	13 97       	sbiw	r26, 0x03	; 3
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	82 17       	cp	r24, r18
    314a:	93 07       	cpc	r25, r19
    314c:	94 f0       	brlt	.+36     	; 0x3172 <__fpcmp_parts_f+0x88>
    314e:	28 17       	cp	r18, r24
    3150:	39 07       	cpc	r19, r25
    3152:	bc f0       	brlt	.+46     	; 0x3182 <__fpcmp_parts_f+0x98>
    3154:	14 96       	adiw	r26, 0x04	; 4
    3156:	8d 91       	ld	r24, X+
    3158:	9d 91       	ld	r25, X+
    315a:	0d 90       	ld	r0, X+
    315c:	bc 91       	ld	r27, X
    315e:	a0 2d       	mov	r26, r0
    3160:	24 81       	ldd	r18, Z+4	; 0x04
    3162:	35 81       	ldd	r19, Z+5	; 0x05
    3164:	46 81       	ldd	r20, Z+6	; 0x06
    3166:	57 81       	ldd	r21, Z+7	; 0x07
    3168:	28 17       	cp	r18, r24
    316a:	39 07       	cpc	r19, r25
    316c:	4a 07       	cpc	r20, r26
    316e:	5b 07       	cpc	r21, r27
    3170:	18 f4       	brcc	.+6      	; 0x3178 <__fpcmp_parts_f+0x8e>
    3172:	11 23       	and	r17, r17
    3174:	41 f0       	breq	.+16     	; 0x3186 <__fpcmp_parts_f+0x9c>
    3176:	0a c0       	rjmp	.+20     	; 0x318c <__fpcmp_parts_f+0xa2>
    3178:	82 17       	cp	r24, r18
    317a:	93 07       	cpc	r25, r19
    317c:	a4 07       	cpc	r26, r20
    317e:	b5 07       	cpc	r27, r21
    3180:	40 f4       	brcc	.+16     	; 0x3192 <__fpcmp_parts_f+0xa8>
    3182:	11 23       	and	r17, r17
    3184:	19 f0       	breq	.+6      	; 0x318c <__fpcmp_parts_f+0xa2>
    3186:	61 e0       	ldi	r22, 0x01	; 1
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <__fpcmp_parts_f+0xac>
    318c:	6f ef       	ldi	r22, 0xFF	; 255
    318e:	7f ef       	ldi	r23, 0xFF	; 255
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <__fpcmp_parts_f+0xac>
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	cb 01       	movw	r24, r22
    3198:	1f 91       	pop	r17
    319a:	08 95       	ret

0000319c <__udivmodhi4>:
    319c:	aa 1b       	sub	r26, r26
    319e:	bb 1b       	sub	r27, r27
    31a0:	51 e1       	ldi	r21, 0x11	; 17
    31a2:	07 c0       	rjmp	.+14     	; 0x31b2 <__udivmodhi4_ep>

000031a4 <__udivmodhi4_loop>:
    31a4:	aa 1f       	adc	r26, r26
    31a6:	bb 1f       	adc	r27, r27
    31a8:	a6 17       	cp	r26, r22
    31aa:	b7 07       	cpc	r27, r23
    31ac:	10 f0       	brcs	.+4      	; 0x31b2 <__udivmodhi4_ep>
    31ae:	a6 1b       	sub	r26, r22
    31b0:	b7 0b       	sbc	r27, r23

000031b2 <__udivmodhi4_ep>:
    31b2:	88 1f       	adc	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	5a 95       	dec	r21
    31b8:	a9 f7       	brne	.-22     	; 0x31a4 <__udivmodhi4_loop>
    31ba:	80 95       	com	r24
    31bc:	90 95       	com	r25
    31be:	bc 01       	movw	r22, r24
    31c0:	cd 01       	movw	r24, r26
    31c2:	08 95       	ret

000031c4 <__divmodhi4>:
    31c4:	97 fb       	bst	r25, 7
    31c6:	09 2e       	mov	r0, r25
    31c8:	07 26       	eor	r0, r23
    31ca:	0a d0       	rcall	.+20     	; 0x31e0 <__divmodhi4_neg1>
    31cc:	77 fd       	sbrc	r23, 7
    31ce:	04 d0       	rcall	.+8      	; 0x31d8 <__divmodhi4_neg2>
    31d0:	e5 df       	rcall	.-54     	; 0x319c <__udivmodhi4>
    31d2:	06 d0       	rcall	.+12     	; 0x31e0 <__divmodhi4_neg1>
    31d4:	00 20       	and	r0, r0
    31d6:	1a f4       	brpl	.+6      	; 0x31de <__divmodhi4_exit>

000031d8 <__divmodhi4_neg2>:
    31d8:	70 95       	com	r23
    31da:	61 95       	neg	r22
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255

000031de <__divmodhi4_exit>:
    31de:	08 95       	ret

000031e0 <__divmodhi4_neg1>:
    31e0:	f6 f7       	brtc	.-4      	; 0x31de <__divmodhi4_exit>
    31e2:	90 95       	com	r25
    31e4:	81 95       	neg	r24
    31e6:	9f 4f       	sbci	r25, 0xFF	; 255
    31e8:	08 95       	ret

000031ea <__prologue_saves__>:
    31ea:	2f 92       	push	r2
    31ec:	3f 92       	push	r3
    31ee:	4f 92       	push	r4
    31f0:	5f 92       	push	r5
    31f2:	6f 92       	push	r6
    31f4:	7f 92       	push	r7
    31f6:	8f 92       	push	r8
    31f8:	9f 92       	push	r9
    31fa:	af 92       	push	r10
    31fc:	bf 92       	push	r11
    31fe:	cf 92       	push	r12
    3200:	df 92       	push	r13
    3202:	ef 92       	push	r14
    3204:	ff 92       	push	r15
    3206:	0f 93       	push	r16
    3208:	1f 93       	push	r17
    320a:	cf 93       	push	r28
    320c:	df 93       	push	r29
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	ca 1b       	sub	r28, r26
    3214:	db 0b       	sbc	r29, r27
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	09 94       	ijmp

00003222 <__epilogue_restores__>:
    3222:	2a 88       	ldd	r2, Y+18	; 0x12
    3224:	39 88       	ldd	r3, Y+17	; 0x11
    3226:	48 88       	ldd	r4, Y+16	; 0x10
    3228:	5f 84       	ldd	r5, Y+15	; 0x0f
    322a:	6e 84       	ldd	r6, Y+14	; 0x0e
    322c:	7d 84       	ldd	r7, Y+13	; 0x0d
    322e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3230:	9b 84       	ldd	r9, Y+11	; 0x0b
    3232:	aa 84       	ldd	r10, Y+10	; 0x0a
    3234:	b9 84       	ldd	r11, Y+9	; 0x09
    3236:	c8 84       	ldd	r12, Y+8	; 0x08
    3238:	df 80       	ldd	r13, Y+7	; 0x07
    323a:	ee 80       	ldd	r14, Y+6	; 0x06
    323c:	fd 80       	ldd	r15, Y+5	; 0x05
    323e:	0c 81       	ldd	r16, Y+4	; 0x04
    3240:	1b 81       	ldd	r17, Y+3	; 0x03
    3242:	aa 81       	ldd	r26, Y+2	; 0x02
    3244:	b9 81       	ldd	r27, Y+1	; 0x01
    3246:	ce 0f       	add	r28, r30
    3248:	d1 1d       	adc	r29, r1
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	ed 01       	movw	r28, r26
    3256:	08 95       	ret

00003258 <printf>:
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
    3260:	fe 01       	movw	r30, r28
    3262:	35 96       	adiw	r30, 0x05	; 5
    3264:	61 91       	ld	r22, Z+
    3266:	71 91       	ld	r23, Z+
    3268:	80 91 98 08 	lds	r24, 0x0898
    326c:	90 91 99 08 	lds	r25, 0x0899
    3270:	af 01       	movw	r20, r30
    3272:	0e 94 3e 19 	call	0x327c	; 0x327c <vfprintf>
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <vfprintf>:
    327c:	2f 92       	push	r2
    327e:	3f 92       	push	r3
    3280:	4f 92       	push	r4
    3282:	5f 92       	push	r5
    3284:	6f 92       	push	r6
    3286:	7f 92       	push	r7
    3288:	8f 92       	push	r8
    328a:	9f 92       	push	r9
    328c:	af 92       	push	r10
    328e:	bf 92       	push	r11
    3290:	cf 92       	push	r12
    3292:	df 92       	push	r13
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	2b 97       	sbiw	r28, 0x0b	; 11
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	3c 01       	movw	r6, r24
    32b2:	2b 01       	movw	r4, r22
    32b4:	5a 01       	movw	r10, r20
    32b6:	fc 01       	movw	r30, r24
    32b8:	17 82       	std	Z+7, r1	; 0x07
    32ba:	16 82       	std	Z+6, r1	; 0x06
    32bc:	83 81       	ldd	r24, Z+3	; 0x03
    32be:	81 fd       	sbrc	r24, 1
    32c0:	03 c0       	rjmp	.+6      	; 0x32c8 <vfprintf+0x4c>
    32c2:	6f ef       	ldi	r22, 0xFF	; 255
    32c4:	7f ef       	ldi	r23, 0xFF	; 255
    32c6:	c6 c1       	rjmp	.+908    	; 0x3654 <vfprintf+0x3d8>
    32c8:	9a e0       	ldi	r25, 0x0A	; 10
    32ca:	89 2e       	mov	r8, r25
    32cc:	1e 01       	movw	r2, r28
    32ce:	08 94       	sec
    32d0:	21 1c       	adc	r2, r1
    32d2:	31 1c       	adc	r3, r1
    32d4:	f3 01       	movw	r30, r6
    32d6:	23 81       	ldd	r18, Z+3	; 0x03
    32d8:	f2 01       	movw	r30, r4
    32da:	23 fd       	sbrc	r18, 3
    32dc:	85 91       	lpm	r24, Z+
    32de:	23 ff       	sbrs	r18, 3
    32e0:	81 91       	ld	r24, Z+
    32e2:	2f 01       	movw	r4, r30
    32e4:	88 23       	and	r24, r24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <vfprintf+0x6e>
    32e8:	b2 c1       	rjmp	.+868    	; 0x364e <vfprintf+0x3d2>
    32ea:	85 32       	cpi	r24, 0x25	; 37
    32ec:	39 f4       	brne	.+14     	; 0x32fc <vfprintf+0x80>
    32ee:	23 fd       	sbrc	r18, 3
    32f0:	85 91       	lpm	r24, Z+
    32f2:	23 ff       	sbrs	r18, 3
    32f4:	81 91       	ld	r24, Z+
    32f6:	2f 01       	movw	r4, r30
    32f8:	85 32       	cpi	r24, 0x25	; 37
    32fa:	29 f4       	brne	.+10     	; 0x3306 <vfprintf+0x8a>
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	b3 01       	movw	r22, r6
    3300:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    3304:	e7 cf       	rjmp	.-50     	; 0x32d4 <vfprintf+0x58>
    3306:	98 2f       	mov	r25, r24
    3308:	ff 24       	eor	r15, r15
    330a:	ee 24       	eor	r14, r14
    330c:	99 24       	eor	r9, r9
    330e:	ff e1       	ldi	r31, 0x1F	; 31
    3310:	ff 15       	cp	r31, r15
    3312:	d0 f0       	brcs	.+52     	; 0x3348 <vfprintf+0xcc>
    3314:	9b 32       	cpi	r25, 0x2B	; 43
    3316:	69 f0       	breq	.+26     	; 0x3332 <vfprintf+0xb6>
    3318:	9c 32       	cpi	r25, 0x2C	; 44
    331a:	28 f4       	brcc	.+10     	; 0x3326 <vfprintf+0xaa>
    331c:	90 32       	cpi	r25, 0x20	; 32
    331e:	59 f0       	breq	.+22     	; 0x3336 <vfprintf+0xba>
    3320:	93 32       	cpi	r25, 0x23	; 35
    3322:	91 f4       	brne	.+36     	; 0x3348 <vfprintf+0xcc>
    3324:	0e c0       	rjmp	.+28     	; 0x3342 <vfprintf+0xc6>
    3326:	9d 32       	cpi	r25, 0x2D	; 45
    3328:	49 f0       	breq	.+18     	; 0x333c <vfprintf+0xc0>
    332a:	90 33       	cpi	r25, 0x30	; 48
    332c:	69 f4       	brne	.+26     	; 0x3348 <vfprintf+0xcc>
    332e:	41 e0       	ldi	r20, 0x01	; 1
    3330:	24 c0       	rjmp	.+72     	; 0x337a <vfprintf+0xfe>
    3332:	52 e0       	ldi	r21, 0x02	; 2
    3334:	f5 2a       	or	r15, r21
    3336:	84 e0       	ldi	r24, 0x04	; 4
    3338:	f8 2a       	or	r15, r24
    333a:	28 c0       	rjmp	.+80     	; 0x338c <vfprintf+0x110>
    333c:	98 e0       	ldi	r25, 0x08	; 8
    333e:	f9 2a       	or	r15, r25
    3340:	25 c0       	rjmp	.+74     	; 0x338c <vfprintf+0x110>
    3342:	e0 e1       	ldi	r30, 0x10	; 16
    3344:	fe 2a       	or	r15, r30
    3346:	22 c0       	rjmp	.+68     	; 0x338c <vfprintf+0x110>
    3348:	f7 fc       	sbrc	r15, 7
    334a:	29 c0       	rjmp	.+82     	; 0x339e <vfprintf+0x122>
    334c:	89 2f       	mov	r24, r25
    334e:	80 53       	subi	r24, 0x30	; 48
    3350:	8a 30       	cpi	r24, 0x0A	; 10
    3352:	70 f4       	brcc	.+28     	; 0x3370 <vfprintf+0xf4>
    3354:	f6 fe       	sbrs	r15, 6
    3356:	05 c0       	rjmp	.+10     	; 0x3362 <vfprintf+0xe6>
    3358:	98 9c       	mul	r9, r8
    335a:	90 2c       	mov	r9, r0
    335c:	11 24       	eor	r1, r1
    335e:	98 0e       	add	r9, r24
    3360:	15 c0       	rjmp	.+42     	; 0x338c <vfprintf+0x110>
    3362:	e8 9c       	mul	r14, r8
    3364:	e0 2c       	mov	r14, r0
    3366:	11 24       	eor	r1, r1
    3368:	e8 0e       	add	r14, r24
    336a:	f0 e2       	ldi	r31, 0x20	; 32
    336c:	ff 2a       	or	r15, r31
    336e:	0e c0       	rjmp	.+28     	; 0x338c <vfprintf+0x110>
    3370:	9e 32       	cpi	r25, 0x2E	; 46
    3372:	29 f4       	brne	.+10     	; 0x337e <vfprintf+0x102>
    3374:	f6 fc       	sbrc	r15, 6
    3376:	6b c1       	rjmp	.+726    	; 0x364e <vfprintf+0x3d2>
    3378:	40 e4       	ldi	r20, 0x40	; 64
    337a:	f4 2a       	or	r15, r20
    337c:	07 c0       	rjmp	.+14     	; 0x338c <vfprintf+0x110>
    337e:	9c 36       	cpi	r25, 0x6C	; 108
    3380:	19 f4       	brne	.+6      	; 0x3388 <vfprintf+0x10c>
    3382:	50 e8       	ldi	r21, 0x80	; 128
    3384:	f5 2a       	or	r15, r21
    3386:	02 c0       	rjmp	.+4      	; 0x338c <vfprintf+0x110>
    3388:	98 36       	cpi	r25, 0x68	; 104
    338a:	49 f4       	brne	.+18     	; 0x339e <vfprintf+0x122>
    338c:	f2 01       	movw	r30, r4
    338e:	23 fd       	sbrc	r18, 3
    3390:	95 91       	lpm	r25, Z+
    3392:	23 ff       	sbrs	r18, 3
    3394:	91 91       	ld	r25, Z+
    3396:	2f 01       	movw	r4, r30
    3398:	99 23       	and	r25, r25
    339a:	09 f0       	breq	.+2      	; 0x339e <vfprintf+0x122>
    339c:	b8 cf       	rjmp	.-144    	; 0x330e <vfprintf+0x92>
    339e:	89 2f       	mov	r24, r25
    33a0:	85 54       	subi	r24, 0x45	; 69
    33a2:	83 30       	cpi	r24, 0x03	; 3
    33a4:	18 f0       	brcs	.+6      	; 0x33ac <vfprintf+0x130>
    33a6:	80 52       	subi	r24, 0x20	; 32
    33a8:	83 30       	cpi	r24, 0x03	; 3
    33aa:	38 f4       	brcc	.+14     	; 0x33ba <vfprintf+0x13e>
    33ac:	44 e0       	ldi	r20, 0x04	; 4
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	a4 0e       	add	r10, r20
    33b2:	b5 1e       	adc	r11, r21
    33b4:	5f e3       	ldi	r21, 0x3F	; 63
    33b6:	59 83       	std	Y+1, r21	; 0x01
    33b8:	0f c0       	rjmp	.+30     	; 0x33d8 <vfprintf+0x15c>
    33ba:	93 36       	cpi	r25, 0x63	; 99
    33bc:	31 f0       	breq	.+12     	; 0x33ca <vfprintf+0x14e>
    33be:	93 37       	cpi	r25, 0x73	; 115
    33c0:	79 f0       	breq	.+30     	; 0x33e0 <vfprintf+0x164>
    33c2:	93 35       	cpi	r25, 0x53	; 83
    33c4:	09 f0       	breq	.+2      	; 0x33c8 <vfprintf+0x14c>
    33c6:	56 c0       	rjmp	.+172    	; 0x3474 <vfprintf+0x1f8>
    33c8:	20 c0       	rjmp	.+64     	; 0x340a <vfprintf+0x18e>
    33ca:	f5 01       	movw	r30, r10
    33cc:	80 81       	ld	r24, Z
    33ce:	89 83       	std	Y+1, r24	; 0x01
    33d0:	42 e0       	ldi	r20, 0x02	; 2
    33d2:	50 e0       	ldi	r21, 0x00	; 0
    33d4:	a4 0e       	add	r10, r20
    33d6:	b5 1e       	adc	r11, r21
    33d8:	61 01       	movw	r12, r2
    33da:	01 e0       	ldi	r16, 0x01	; 1
    33dc:	10 e0       	ldi	r17, 0x00	; 0
    33de:	12 c0       	rjmp	.+36     	; 0x3404 <vfprintf+0x188>
    33e0:	f5 01       	movw	r30, r10
    33e2:	c0 80       	ld	r12, Z
    33e4:	d1 80       	ldd	r13, Z+1	; 0x01
    33e6:	f6 fc       	sbrc	r15, 6
    33e8:	03 c0       	rjmp	.+6      	; 0x33f0 <vfprintf+0x174>
    33ea:	6f ef       	ldi	r22, 0xFF	; 255
    33ec:	7f ef       	ldi	r23, 0xFF	; 255
    33ee:	02 c0       	rjmp	.+4      	; 0x33f4 <vfprintf+0x178>
    33f0:	69 2d       	mov	r22, r9
    33f2:	70 e0       	ldi	r23, 0x00	; 0
    33f4:	42 e0       	ldi	r20, 0x02	; 2
    33f6:	50 e0       	ldi	r21, 0x00	; 0
    33f8:	a4 0e       	add	r10, r20
    33fa:	b5 1e       	adc	r11, r21
    33fc:	c6 01       	movw	r24, r12
    33fe:	0e 94 4f 1b 	call	0x369e	; 0x369e <strnlen>
    3402:	8c 01       	movw	r16, r24
    3404:	5f e7       	ldi	r21, 0x7F	; 127
    3406:	f5 22       	and	r15, r21
    3408:	14 c0       	rjmp	.+40     	; 0x3432 <vfprintf+0x1b6>
    340a:	f5 01       	movw	r30, r10
    340c:	c0 80       	ld	r12, Z
    340e:	d1 80       	ldd	r13, Z+1	; 0x01
    3410:	f6 fc       	sbrc	r15, 6
    3412:	03 c0       	rjmp	.+6      	; 0x341a <vfprintf+0x19e>
    3414:	6f ef       	ldi	r22, 0xFF	; 255
    3416:	7f ef       	ldi	r23, 0xFF	; 255
    3418:	02 c0       	rjmp	.+4      	; 0x341e <vfprintf+0x1a2>
    341a:	69 2d       	mov	r22, r9
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	42 e0       	ldi	r20, 0x02	; 2
    3420:	50 e0       	ldi	r21, 0x00	; 0
    3422:	a4 0e       	add	r10, r20
    3424:	b5 1e       	adc	r11, r21
    3426:	c6 01       	movw	r24, r12
    3428:	0e 94 44 1b 	call	0x3688	; 0x3688 <strnlen_P>
    342c:	8c 01       	movw	r16, r24
    342e:	50 e8       	ldi	r21, 0x80	; 128
    3430:	f5 2a       	or	r15, r21
    3432:	f3 fe       	sbrs	r15, 3
    3434:	07 c0       	rjmp	.+14     	; 0x3444 <vfprintf+0x1c8>
    3436:	1a c0       	rjmp	.+52     	; 0x346c <vfprintf+0x1f0>
    3438:	80 e2       	ldi	r24, 0x20	; 32
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	b3 01       	movw	r22, r6
    343e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    3442:	ea 94       	dec	r14
    3444:	8e 2d       	mov	r24, r14
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	08 17       	cp	r16, r24
    344a:	19 07       	cpc	r17, r25
    344c:	a8 f3       	brcs	.-22     	; 0x3438 <vfprintf+0x1bc>
    344e:	0e c0       	rjmp	.+28     	; 0x346c <vfprintf+0x1f0>
    3450:	f6 01       	movw	r30, r12
    3452:	f7 fc       	sbrc	r15, 7
    3454:	85 91       	lpm	r24, Z+
    3456:	f7 fe       	sbrs	r15, 7
    3458:	81 91       	ld	r24, Z+
    345a:	6f 01       	movw	r12, r30
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	b3 01       	movw	r22, r6
    3460:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    3464:	e1 10       	cpse	r14, r1
    3466:	ea 94       	dec	r14
    3468:	01 50       	subi	r16, 0x01	; 1
    346a:	10 40       	sbci	r17, 0x00	; 0
    346c:	01 15       	cp	r16, r1
    346e:	11 05       	cpc	r17, r1
    3470:	79 f7       	brne	.-34     	; 0x3450 <vfprintf+0x1d4>
    3472:	ea c0       	rjmp	.+468    	; 0x3648 <vfprintf+0x3cc>
    3474:	94 36       	cpi	r25, 0x64	; 100
    3476:	11 f0       	breq	.+4      	; 0x347c <vfprintf+0x200>
    3478:	99 36       	cpi	r25, 0x69	; 105
    347a:	69 f5       	brne	.+90     	; 0x34d6 <vfprintf+0x25a>
    347c:	f7 fe       	sbrs	r15, 7
    347e:	08 c0       	rjmp	.+16     	; 0x3490 <vfprintf+0x214>
    3480:	f5 01       	movw	r30, r10
    3482:	20 81       	ld	r18, Z
    3484:	31 81       	ldd	r19, Z+1	; 0x01
    3486:	42 81       	ldd	r20, Z+2	; 0x02
    3488:	53 81       	ldd	r21, Z+3	; 0x03
    348a:	84 e0       	ldi	r24, 0x04	; 4
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	0a c0       	rjmp	.+20     	; 0x34a4 <vfprintf+0x228>
    3490:	f5 01       	movw	r30, r10
    3492:	80 81       	ld	r24, Z
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	9c 01       	movw	r18, r24
    3498:	44 27       	eor	r20, r20
    349a:	37 fd       	sbrc	r19, 7
    349c:	40 95       	com	r20
    349e:	54 2f       	mov	r21, r20
    34a0:	82 e0       	ldi	r24, 0x02	; 2
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	a8 0e       	add	r10, r24
    34a6:	b9 1e       	adc	r11, r25
    34a8:	9f e6       	ldi	r25, 0x6F	; 111
    34aa:	f9 22       	and	r15, r25
    34ac:	57 ff       	sbrs	r21, 7
    34ae:	09 c0       	rjmp	.+18     	; 0x34c2 <vfprintf+0x246>
    34b0:	50 95       	com	r21
    34b2:	40 95       	com	r20
    34b4:	30 95       	com	r19
    34b6:	21 95       	neg	r18
    34b8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ba:	4f 4f       	sbci	r20, 0xFF	; 255
    34bc:	5f 4f       	sbci	r21, 0xFF	; 255
    34be:	e0 e8       	ldi	r30, 0x80	; 128
    34c0:	fe 2a       	or	r15, r30
    34c2:	ca 01       	movw	r24, r20
    34c4:	b9 01       	movw	r22, r18
    34c6:	a1 01       	movw	r20, r2
    34c8:	2a e0       	ldi	r18, 0x0A	; 10
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	0e 94 86 1b 	call	0x370c	; 0x370c <__ultoa_invert>
    34d0:	d8 2e       	mov	r13, r24
    34d2:	d2 18       	sub	r13, r2
    34d4:	40 c0       	rjmp	.+128    	; 0x3556 <vfprintf+0x2da>
    34d6:	95 37       	cpi	r25, 0x75	; 117
    34d8:	29 f4       	brne	.+10     	; 0x34e4 <vfprintf+0x268>
    34da:	1f 2d       	mov	r17, r15
    34dc:	1f 7e       	andi	r17, 0xEF	; 239
    34de:	2a e0       	ldi	r18, 0x0A	; 10
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	1d c0       	rjmp	.+58     	; 0x351e <vfprintf+0x2a2>
    34e4:	1f 2d       	mov	r17, r15
    34e6:	19 7f       	andi	r17, 0xF9	; 249
    34e8:	9f 36       	cpi	r25, 0x6F	; 111
    34ea:	61 f0       	breq	.+24     	; 0x3504 <vfprintf+0x288>
    34ec:	90 37       	cpi	r25, 0x70	; 112
    34ee:	20 f4       	brcc	.+8      	; 0x34f8 <vfprintf+0x27c>
    34f0:	98 35       	cpi	r25, 0x58	; 88
    34f2:	09 f0       	breq	.+2      	; 0x34f6 <vfprintf+0x27a>
    34f4:	ac c0       	rjmp	.+344    	; 0x364e <vfprintf+0x3d2>
    34f6:	0f c0       	rjmp	.+30     	; 0x3516 <vfprintf+0x29a>
    34f8:	90 37       	cpi	r25, 0x70	; 112
    34fa:	39 f0       	breq	.+14     	; 0x350a <vfprintf+0x28e>
    34fc:	98 37       	cpi	r25, 0x78	; 120
    34fe:	09 f0       	breq	.+2      	; 0x3502 <vfprintf+0x286>
    3500:	a6 c0       	rjmp	.+332    	; 0x364e <vfprintf+0x3d2>
    3502:	04 c0       	rjmp	.+8      	; 0x350c <vfprintf+0x290>
    3504:	28 e0       	ldi	r18, 0x08	; 8
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	0a c0       	rjmp	.+20     	; 0x351e <vfprintf+0x2a2>
    350a:	10 61       	ori	r17, 0x10	; 16
    350c:	14 fd       	sbrc	r17, 4
    350e:	14 60       	ori	r17, 0x04	; 4
    3510:	20 e1       	ldi	r18, 0x10	; 16
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	04 c0       	rjmp	.+8      	; 0x351e <vfprintf+0x2a2>
    3516:	14 fd       	sbrc	r17, 4
    3518:	16 60       	ori	r17, 0x06	; 6
    351a:	20 e1       	ldi	r18, 0x10	; 16
    351c:	32 e0       	ldi	r19, 0x02	; 2
    351e:	17 ff       	sbrs	r17, 7
    3520:	08 c0       	rjmp	.+16     	; 0x3532 <vfprintf+0x2b6>
    3522:	f5 01       	movw	r30, r10
    3524:	60 81       	ld	r22, Z
    3526:	71 81       	ldd	r23, Z+1	; 0x01
    3528:	82 81       	ldd	r24, Z+2	; 0x02
    352a:	93 81       	ldd	r25, Z+3	; 0x03
    352c:	44 e0       	ldi	r20, 0x04	; 4
    352e:	50 e0       	ldi	r21, 0x00	; 0
    3530:	08 c0       	rjmp	.+16     	; 0x3542 <vfprintf+0x2c6>
    3532:	f5 01       	movw	r30, r10
    3534:	80 81       	ld	r24, Z
    3536:	91 81       	ldd	r25, Z+1	; 0x01
    3538:	bc 01       	movw	r22, r24
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	42 e0       	ldi	r20, 0x02	; 2
    3540:	50 e0       	ldi	r21, 0x00	; 0
    3542:	a4 0e       	add	r10, r20
    3544:	b5 1e       	adc	r11, r21
    3546:	a1 01       	movw	r20, r2
    3548:	0e 94 86 1b 	call	0x370c	; 0x370c <__ultoa_invert>
    354c:	d8 2e       	mov	r13, r24
    354e:	d2 18       	sub	r13, r2
    3550:	8f e7       	ldi	r24, 0x7F	; 127
    3552:	f8 2e       	mov	r15, r24
    3554:	f1 22       	and	r15, r17
    3556:	f6 fe       	sbrs	r15, 6
    3558:	0b c0       	rjmp	.+22     	; 0x3570 <vfprintf+0x2f4>
    355a:	5e ef       	ldi	r21, 0xFE	; 254
    355c:	f5 22       	and	r15, r21
    355e:	d9 14       	cp	r13, r9
    3560:	38 f4       	brcc	.+14     	; 0x3570 <vfprintf+0x2f4>
    3562:	f4 fe       	sbrs	r15, 4
    3564:	07 c0       	rjmp	.+14     	; 0x3574 <vfprintf+0x2f8>
    3566:	f2 fc       	sbrc	r15, 2
    3568:	05 c0       	rjmp	.+10     	; 0x3574 <vfprintf+0x2f8>
    356a:	8f ee       	ldi	r24, 0xEF	; 239
    356c:	f8 22       	and	r15, r24
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <vfprintf+0x2f8>
    3570:	1d 2d       	mov	r17, r13
    3572:	01 c0       	rjmp	.+2      	; 0x3576 <vfprintf+0x2fa>
    3574:	19 2d       	mov	r17, r9
    3576:	f4 fe       	sbrs	r15, 4
    3578:	0d c0       	rjmp	.+26     	; 0x3594 <vfprintf+0x318>
    357a:	fe 01       	movw	r30, r28
    357c:	ed 0d       	add	r30, r13
    357e:	f1 1d       	adc	r31, r1
    3580:	80 81       	ld	r24, Z
    3582:	80 33       	cpi	r24, 0x30	; 48
    3584:	19 f4       	brne	.+6      	; 0x358c <vfprintf+0x310>
    3586:	99 ee       	ldi	r25, 0xE9	; 233
    3588:	f9 22       	and	r15, r25
    358a:	08 c0       	rjmp	.+16     	; 0x359c <vfprintf+0x320>
    358c:	1f 5f       	subi	r17, 0xFF	; 255
    358e:	f2 fe       	sbrs	r15, 2
    3590:	05 c0       	rjmp	.+10     	; 0x359c <vfprintf+0x320>
    3592:	03 c0       	rjmp	.+6      	; 0x359a <vfprintf+0x31e>
    3594:	8f 2d       	mov	r24, r15
    3596:	86 78       	andi	r24, 0x86	; 134
    3598:	09 f0       	breq	.+2      	; 0x359c <vfprintf+0x320>
    359a:	1f 5f       	subi	r17, 0xFF	; 255
    359c:	0f 2d       	mov	r16, r15
    359e:	f3 fc       	sbrc	r15, 3
    35a0:	14 c0       	rjmp	.+40     	; 0x35ca <vfprintf+0x34e>
    35a2:	f0 fe       	sbrs	r15, 0
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <vfprintf+0x348>
    35a6:	1e 15       	cp	r17, r14
    35a8:	10 f0       	brcs	.+4      	; 0x35ae <vfprintf+0x332>
    35aa:	9d 2c       	mov	r9, r13
    35ac:	0b c0       	rjmp	.+22     	; 0x35c4 <vfprintf+0x348>
    35ae:	9d 2c       	mov	r9, r13
    35b0:	9e 0c       	add	r9, r14
    35b2:	91 1a       	sub	r9, r17
    35b4:	1e 2d       	mov	r17, r14
    35b6:	06 c0       	rjmp	.+12     	; 0x35c4 <vfprintf+0x348>
    35b8:	80 e2       	ldi	r24, 0x20	; 32
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	b3 01       	movw	r22, r6
    35be:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    35c2:	1f 5f       	subi	r17, 0xFF	; 255
    35c4:	1e 15       	cp	r17, r14
    35c6:	c0 f3       	brcs	.-16     	; 0x35b8 <vfprintf+0x33c>
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <vfprintf+0x356>
    35ca:	1e 15       	cp	r17, r14
    35cc:	10 f4       	brcc	.+4      	; 0x35d2 <vfprintf+0x356>
    35ce:	e1 1a       	sub	r14, r17
    35d0:	01 c0       	rjmp	.+2      	; 0x35d4 <vfprintf+0x358>
    35d2:	ee 24       	eor	r14, r14
    35d4:	04 ff       	sbrs	r16, 4
    35d6:	0f c0       	rjmp	.+30     	; 0x35f6 <vfprintf+0x37a>
    35d8:	80 e3       	ldi	r24, 0x30	; 48
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	b3 01       	movw	r22, r6
    35de:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    35e2:	02 ff       	sbrs	r16, 2
    35e4:	1d c0       	rjmp	.+58     	; 0x3620 <vfprintf+0x3a4>
    35e6:	01 fd       	sbrc	r16, 1
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <vfprintf+0x374>
    35ea:	88 e7       	ldi	r24, 0x78	; 120
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	0e c0       	rjmp	.+28     	; 0x360c <vfprintf+0x390>
    35f0:	88 e5       	ldi	r24, 0x58	; 88
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0b c0       	rjmp	.+22     	; 0x360c <vfprintf+0x390>
    35f6:	80 2f       	mov	r24, r16
    35f8:	86 78       	andi	r24, 0x86	; 134
    35fa:	91 f0       	breq	.+36     	; 0x3620 <vfprintf+0x3a4>
    35fc:	01 ff       	sbrs	r16, 1
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <vfprintf+0x388>
    3600:	8b e2       	ldi	r24, 0x2B	; 43
    3602:	01 c0       	rjmp	.+2      	; 0x3606 <vfprintf+0x38a>
    3604:	80 e2       	ldi	r24, 0x20	; 32
    3606:	f7 fc       	sbrc	r15, 7
    3608:	8d e2       	ldi	r24, 0x2D	; 45
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	b3 01       	movw	r22, r6
    360e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    3612:	06 c0       	rjmp	.+12     	; 0x3620 <vfprintf+0x3a4>
    3614:	80 e3       	ldi	r24, 0x30	; 48
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	b3 01       	movw	r22, r6
    361a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    361e:	9a 94       	dec	r9
    3620:	d9 14       	cp	r13, r9
    3622:	c0 f3       	brcs	.-16     	; 0x3614 <vfprintf+0x398>
    3624:	da 94       	dec	r13
    3626:	f1 01       	movw	r30, r2
    3628:	ed 0d       	add	r30, r13
    362a:	f1 1d       	adc	r31, r1
    362c:	80 81       	ld	r24, Z
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	b3 01       	movw	r22, r6
    3632:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    3636:	dd 20       	and	r13, r13
    3638:	a9 f7       	brne	.-22     	; 0x3624 <vfprintf+0x3a8>
    363a:	06 c0       	rjmp	.+12     	; 0x3648 <vfprintf+0x3cc>
    363c:	80 e2       	ldi	r24, 0x20	; 32
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	b3 01       	movw	r22, r6
    3642:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <fputc>
    3646:	ea 94       	dec	r14
    3648:	ee 20       	and	r14, r14
    364a:	c1 f7       	brne	.-16     	; 0x363c <vfprintf+0x3c0>
    364c:	43 ce       	rjmp	.-890    	; 0x32d4 <vfprintf+0x58>
    364e:	f3 01       	movw	r30, r6
    3650:	66 81       	ldd	r22, Z+6	; 0x06
    3652:	77 81       	ldd	r23, Z+7	; 0x07
    3654:	cb 01       	movw	r24, r22
    3656:	2b 96       	adiw	r28, 0x0b	; 11
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	ff 90       	pop	r15
    366c:	ef 90       	pop	r14
    366e:	df 90       	pop	r13
    3670:	cf 90       	pop	r12
    3672:	bf 90       	pop	r11
    3674:	af 90       	pop	r10
    3676:	9f 90       	pop	r9
    3678:	8f 90       	pop	r8
    367a:	7f 90       	pop	r7
    367c:	6f 90       	pop	r6
    367e:	5f 90       	pop	r5
    3680:	4f 90       	pop	r4
    3682:	3f 90       	pop	r3
    3684:	2f 90       	pop	r2
    3686:	08 95       	ret

00003688 <strnlen_P>:
    3688:	fc 01       	movw	r30, r24
    368a:	05 90       	lpm	r0, Z+
    368c:	61 50       	subi	r22, 0x01	; 1
    368e:	70 40       	sbci	r23, 0x00	; 0
    3690:	01 10       	cpse	r0, r1
    3692:	d8 f7       	brcc	.-10     	; 0x368a <strnlen_P+0x2>
    3694:	80 95       	com	r24
    3696:	90 95       	com	r25
    3698:	8e 0f       	add	r24, r30
    369a:	9f 1f       	adc	r25, r31
    369c:	08 95       	ret

0000369e <strnlen>:
    369e:	fc 01       	movw	r30, r24
    36a0:	61 50       	subi	r22, 0x01	; 1
    36a2:	70 40       	sbci	r23, 0x00	; 0
    36a4:	01 90       	ld	r0, Z+
    36a6:	01 10       	cpse	r0, r1
    36a8:	d8 f7       	brcc	.-10     	; 0x36a0 <strnlen+0x2>
    36aa:	80 95       	com	r24
    36ac:	90 95       	com	r25
    36ae:	8e 0f       	add	r24, r30
    36b0:	9f 1f       	adc	r25, r31
    36b2:	08 95       	ret

000036b4 <fputc>:
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
    36bc:	8c 01       	movw	r16, r24
    36be:	eb 01       	movw	r28, r22
    36c0:	8b 81       	ldd	r24, Y+3	; 0x03
    36c2:	81 ff       	sbrs	r24, 1
    36c4:	1b c0       	rjmp	.+54     	; 0x36fc <fputc+0x48>
    36c6:	82 ff       	sbrs	r24, 2
    36c8:	0d c0       	rjmp	.+26     	; 0x36e4 <fputc+0x30>
    36ca:	2e 81       	ldd	r18, Y+6	; 0x06
    36cc:	3f 81       	ldd	r19, Y+7	; 0x07
    36ce:	8c 81       	ldd	r24, Y+4	; 0x04
    36d0:	9d 81       	ldd	r25, Y+5	; 0x05
    36d2:	28 17       	cp	r18, r24
    36d4:	39 07       	cpc	r19, r25
    36d6:	64 f4       	brge	.+24     	; 0x36f0 <fputc+0x3c>
    36d8:	e8 81       	ld	r30, Y
    36da:	f9 81       	ldd	r31, Y+1	; 0x01
    36dc:	01 93       	st	Z+, r16
    36de:	f9 83       	std	Y+1, r31	; 0x01
    36e0:	e8 83       	st	Y, r30
    36e2:	06 c0       	rjmp	.+12     	; 0x36f0 <fputc+0x3c>
    36e4:	e8 85       	ldd	r30, Y+8	; 0x08
    36e6:	f9 85       	ldd	r31, Y+9	; 0x09
    36e8:	80 2f       	mov	r24, r16
    36ea:	09 95       	icall
    36ec:	89 2b       	or	r24, r25
    36ee:	31 f4       	brne	.+12     	; 0x36fc <fputc+0x48>
    36f0:	8e 81       	ldd	r24, Y+6	; 0x06
    36f2:	9f 81       	ldd	r25, Y+7	; 0x07
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	9f 83       	std	Y+7, r25	; 0x07
    36f8:	8e 83       	std	Y+6, r24	; 0x06
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <fputc+0x4c>
    36fc:	0f ef       	ldi	r16, 0xFF	; 255
    36fe:	1f ef       	ldi	r17, 0xFF	; 255
    3700:	c8 01       	movw	r24, r16
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	08 95       	ret

0000370c <__ultoa_invert>:
    370c:	fa 01       	movw	r30, r20
    370e:	aa 27       	eor	r26, r26
    3710:	28 30       	cpi	r18, 0x08	; 8
    3712:	51 f1       	breq	.+84     	; 0x3768 <__ultoa_invert+0x5c>
    3714:	20 31       	cpi	r18, 0x10	; 16
    3716:	81 f1       	breq	.+96     	; 0x3778 <__ultoa_invert+0x6c>
    3718:	e8 94       	clt
    371a:	6f 93       	push	r22
    371c:	6e 7f       	andi	r22, 0xFE	; 254
    371e:	6e 5f       	subi	r22, 0xFE	; 254
    3720:	7f 4f       	sbci	r23, 0xFF	; 255
    3722:	8f 4f       	sbci	r24, 0xFF	; 255
    3724:	9f 4f       	sbci	r25, 0xFF	; 255
    3726:	af 4f       	sbci	r26, 0xFF	; 255
    3728:	b1 e0       	ldi	r27, 0x01	; 1
    372a:	3e d0       	rcall	.+124    	; 0x37a8 <__ultoa_invert+0x9c>
    372c:	b4 e0       	ldi	r27, 0x04	; 4
    372e:	3c d0       	rcall	.+120    	; 0x37a8 <__ultoa_invert+0x9c>
    3730:	67 0f       	add	r22, r23
    3732:	78 1f       	adc	r23, r24
    3734:	89 1f       	adc	r24, r25
    3736:	9a 1f       	adc	r25, r26
    3738:	a1 1d       	adc	r26, r1
    373a:	68 0f       	add	r22, r24
    373c:	79 1f       	adc	r23, r25
    373e:	8a 1f       	adc	r24, r26
    3740:	91 1d       	adc	r25, r1
    3742:	a1 1d       	adc	r26, r1
    3744:	6a 0f       	add	r22, r26
    3746:	71 1d       	adc	r23, r1
    3748:	81 1d       	adc	r24, r1
    374a:	91 1d       	adc	r25, r1
    374c:	a1 1d       	adc	r26, r1
    374e:	20 d0       	rcall	.+64     	; 0x3790 <__ultoa_invert+0x84>
    3750:	09 f4       	brne	.+2      	; 0x3754 <__ultoa_invert+0x48>
    3752:	68 94       	set
    3754:	3f 91       	pop	r19
    3756:	2a e0       	ldi	r18, 0x0A	; 10
    3758:	26 9f       	mul	r18, r22
    375a:	11 24       	eor	r1, r1
    375c:	30 19       	sub	r19, r0
    375e:	30 5d       	subi	r19, 0xD0	; 208
    3760:	31 93       	st	Z+, r19
    3762:	de f6       	brtc	.-74     	; 0x371a <__ultoa_invert+0xe>
    3764:	cf 01       	movw	r24, r30
    3766:	08 95       	ret
    3768:	46 2f       	mov	r20, r22
    376a:	47 70       	andi	r20, 0x07	; 7
    376c:	40 5d       	subi	r20, 0xD0	; 208
    376e:	41 93       	st	Z+, r20
    3770:	b3 e0       	ldi	r27, 0x03	; 3
    3772:	0f d0       	rcall	.+30     	; 0x3792 <__ultoa_invert+0x86>
    3774:	c9 f7       	brne	.-14     	; 0x3768 <__ultoa_invert+0x5c>
    3776:	f6 cf       	rjmp	.-20     	; 0x3764 <__ultoa_invert+0x58>
    3778:	46 2f       	mov	r20, r22
    377a:	4f 70       	andi	r20, 0x0F	; 15
    377c:	40 5d       	subi	r20, 0xD0	; 208
    377e:	4a 33       	cpi	r20, 0x3A	; 58
    3780:	18 f0       	brcs	.+6      	; 0x3788 <__ultoa_invert+0x7c>
    3782:	49 5d       	subi	r20, 0xD9	; 217
    3784:	31 fd       	sbrc	r19, 1
    3786:	40 52       	subi	r20, 0x20	; 32
    3788:	41 93       	st	Z+, r20
    378a:	02 d0       	rcall	.+4      	; 0x3790 <__ultoa_invert+0x84>
    378c:	a9 f7       	brne	.-22     	; 0x3778 <__ultoa_invert+0x6c>
    378e:	ea cf       	rjmp	.-44     	; 0x3764 <__ultoa_invert+0x58>
    3790:	b4 e0       	ldi	r27, 0x04	; 4
    3792:	a6 95       	lsr	r26
    3794:	97 95       	ror	r25
    3796:	87 95       	ror	r24
    3798:	77 95       	ror	r23
    379a:	67 95       	ror	r22
    379c:	ba 95       	dec	r27
    379e:	c9 f7       	brne	.-14     	; 0x3792 <__ultoa_invert+0x86>
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	61 05       	cpc	r22, r1
    37a4:	71 05       	cpc	r23, r1
    37a6:	08 95       	ret
    37a8:	9b 01       	movw	r18, r22
    37aa:	ac 01       	movw	r20, r24
    37ac:	0a 2e       	mov	r0, r26
    37ae:	06 94       	lsr	r0
    37b0:	57 95       	ror	r21
    37b2:	47 95       	ror	r20
    37b4:	37 95       	ror	r19
    37b6:	27 95       	ror	r18
    37b8:	ba 95       	dec	r27
    37ba:	c9 f7       	brne	.-14     	; 0x37ae <__ultoa_invert+0xa2>
    37bc:	62 0f       	add	r22, r18
    37be:	73 1f       	adc	r23, r19
    37c0:	84 1f       	adc	r24, r20
    37c2:	95 1f       	adc	r25, r21
    37c4:	a0 1d       	adc	r26, r0
    37c6:	08 95       	ret

000037c8 <_exit>:
    37c8:	f8 94       	cli

000037ca <__stop_program>:
    37ca:	ff cf       	rjmp	.-2      	; 0x37ca <__stop_program>
