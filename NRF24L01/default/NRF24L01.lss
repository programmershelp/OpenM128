
NRF24L01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00002686  0000271a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800232  00800232  0000284c  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000030e  00000000  00000000  00002a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b5c  00000000  00000000  00002d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014a5  00000000  00000000  00005876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c0d  00000000  00000000  00006d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00008928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051b  00000000  00000000  00008c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  00009123  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000099b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e8       	ldi	r30, 0x86	; 134
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 33       	cpi	r26, 0x32	; 50
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a2 e3       	ldi	r26, 0x32	; 50
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 37       	cpi	r26, 0x78	; 120
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 41 13 	jmp	0x2682	; 0x2682 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

extern uint8_t RX_BUF[];
extern uint8_t TX_BUF[];

int main(void)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	2e 97       	sbiw	r28, 0x0e	; 14
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	f8 94       	cli
      dc:	de bf       	out	0x3e, r29	; 62
      de:	0f be       	out	0x3f, r0	; 63
      e0:	cd bf       	out	0x3d, r28	; 61
	usartInit();
      e2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <usartInit>
	printf("*--------------------------------------------------- *\r\n");
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	0e 94 66 10 	call	0x20cc	; 0x20cc <puts>
	printf("*-------------------NRF24L01 experiment-------------- *\r\n");
      ee:	88 e3       	ldi	r24, 0x38	; 56
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	0e 94 66 10 	call	0x20cc	; 0x20cc <puts>
	printf("*--------------------------------------------------- *\r\n");
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	91 e0       	ldi	r25, 0x01	; 1
      fa:	0e 94 66 10 	call	0x20cc	; 0x20cc <puts>

	nRF24L01_Initial();
      fe:	0e 94 b8 06 	call	0xd70	; 0xd70 <nRF24L01_Initial>
	while(1)
	{
		#ifdef Open_TX
			TX_BUF[0]=0x55;
     102:	85 e5       	ldi	r24, 0x55	; 85
     104:	80 93 52 02 	sts	0x0252, r24
			NRF24L01_Send();
     108:	0e 94 19 07 	call	0xe32	; 0xe32 <NRF24L01_Send>
			printf("\r\nSend data£º0x%x\r\n",TX_BUF[0]);
     10c:	80 91 52 02 	lds	r24, 0x0252
     110:	28 2f       	mov	r18, r24
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	00 d0       	rcall	.+0      	; 0x116 <main+0x48>
     116:	00 d0       	rcall	.+0      	; 0x118 <main+0x4a>
     118:	ed b7       	in	r30, 0x3d	; 61
     11a:	fe b7       	in	r31, 0x3e	; 62
     11c:	31 96       	adiw	r30, 0x01	; 1
     11e:	81 e7       	ldi	r24, 0x71	; 113
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	91 83       	std	Z+1, r25	; 0x01
     124:	80 83       	st	Z, r24
     126:	33 83       	std	Z+3, r19	; 0x03
     128:	22 83       	std	Z+2, r18	; 0x02
     12a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <printf>
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	aa e7       	ldi	r26, 0x7A	; 122
     13c:	b4 e4       	ldi	r27, 0x44	; 68
     13e:	8b 87       	std	Y+11, r24	; 0x0b
     140:	9c 87       	std	Y+12, r25	; 0x0c
     142:	ad 87       	std	Y+13, r26	; 0x0d
     144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     146:	6b 85       	ldd	r22, Y+11	; 0x0b
     148:	7c 85       	ldd	r23, Y+12	; 0x0c
     14a:	8d 85       	ldd	r24, Y+13	; 0x0d
     14c:	9e 85       	ldd	r25, Y+14	; 0x0e
     14e:	26 e6       	ldi	r18, 0x66	; 102
     150:	36 e6       	ldi	r19, 0x66	; 102
     152:	46 ee       	ldi	r20, 0xE6	; 230
     154:	54 e4       	ldi	r21, 0x44	; 68
     156:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     15a:	dc 01       	movw	r26, r24
     15c:	cb 01       	movw	r24, r22
     15e:	8f 83       	std	Y+7, r24	; 0x07
     160:	98 87       	std	Y+8, r25	; 0x08
     162:	a9 87       	std	Y+9, r26	; 0x09
     164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     166:	6f 81       	ldd	r22, Y+7	; 0x07
     168:	78 85       	ldd	r23, Y+8	; 0x08
     16a:	89 85       	ldd	r24, Y+9	; 0x09
     16c:	9a 85       	ldd	r25, Y+10	; 0x0a
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	40 e8       	ldi	r20, 0x80	; 128
     174:	5f e3       	ldi	r21, 0x3F	; 63
     176:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     17a:	88 23       	and	r24, r24
     17c:	2c f4       	brge	.+10     	; 0x188 <main+0xba>
		__ticks = 1;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	9e 83       	std	Y+6, r25	; 0x06
     184:	8d 83       	std	Y+5, r24	; 0x05
     186:	3f c0       	rjmp	.+126    	; 0x206 <main+0x138>
	else if (__tmp > 65535)
     188:	6f 81       	ldd	r22, Y+7	; 0x07
     18a:	78 85       	ldd	r23, Y+8	; 0x08
     18c:	89 85       	ldd	r24, Y+9	; 0x09
     18e:	9a 85       	ldd	r25, Y+10	; 0x0a
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	3f ef       	ldi	r19, 0xFF	; 255
     194:	4f e7       	ldi	r20, 0x7F	; 127
     196:	57 e4       	ldi	r21, 0x47	; 71
     198:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     19c:	18 16       	cp	r1, r24
     19e:	4c f5       	brge	.+82     	; 0x1f2 <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a0:	6b 85       	ldd	r22, Y+11	; 0x0b
     1a2:	7c 85       	ldd	r23, Y+12	; 0x0c
     1a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e2       	ldi	r20, 0x20	; 32
     1ae:	51 e4       	ldi	r21, 0x41	; 65
     1b0:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	bc 01       	movw	r22, r24
     1ba:	cd 01       	movw	r24, r26
     1bc:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     1c0:	dc 01       	movw	r26, r24
     1c2:	cb 01       	movw	r24, r22
     1c4:	9e 83       	std	Y+6, r25	; 0x06
     1c6:	8d 83       	std	Y+5, r24	; 0x05
     1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <main+0x11a>
     1ca:	88 eb       	ldi	r24, 0xB8	; 184
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	9c 83       	std	Y+4, r25	; 0x04
     1d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d2:	8b 81       	ldd	r24, Y+3	; 0x03
     1d4:	9c 81       	ldd	r25, Y+4	; 0x04
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x108>
     1da:	9c 83       	std	Y+4, r25	; 0x04
     1dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1de:	8d 81       	ldd	r24, Y+5	; 0x05
     1e0:	9e 81       	ldd	r25, Y+6	; 0x06
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	9e 83       	std	Y+6, r25	; 0x06
     1e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	9e 81       	ldd	r25, Y+6	; 0x06
     1ec:	00 97       	sbiw	r24, 0x00	; 0
     1ee:	69 f7       	brne	.-38     	; 0x1ca <main+0xfc>
     1f0:	88 cf       	rjmp	.-240    	; 0x102 <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1f2:	6f 81       	ldd	r22, Y+7	; 0x07
     1f4:	78 85       	ldd	r23, Y+8	; 0x08
     1f6:	89 85       	ldd	r24, Y+9	; 0x09
     1f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1fa:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	9e 83       	std	Y+6, r25	; 0x06
     204:	8d 83       	std	Y+5, r24	; 0x05
     206:	8d 81       	ldd	r24, Y+5	; 0x05
     208:	9e 81       	ldd	r25, Y+6	; 0x06
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	9a 81       	ldd	r25, Y+2	; 0x02
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <main+0x144>
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	73 cf       	rjmp	.-282    	; 0x102 <main+0x34>

0000021c <SPI_RW>:

uint8_t TX_BUF[TX_PLOAD_WIDTH];


uint8_t SPI_RW(uint8_t Data)
{
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	0f 92       	push	r0
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Data;
     228:	ef e2       	ldi	r30, 0x2F	; 47
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	80 83       	st	Z, r24
    while(!(SPSR&0x80));
     230:	ee e2       	ldi	r30, 0x2E	; 46
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	88 23       	and	r24, r24
     238:	dc f7       	brge	.-10     	; 0x230 <SPI_RW+0x14>
	return SPDR;
     23a:	ef e2       	ldi	r30, 0x2F	; 47
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
}
     240:	0f 90       	pop	r0
     242:	cf 91       	pop	r28
     244:	df 91       	pop	r29
     246:	08 95       	ret

00000248 <SPI_RW_Reg>:

/****Ïò¼Ä´æÆ÷regÐ´Ò»¸ö×Ö½Ú£¬Í¬Ê±·µ»Ø×´Ì¬×Ö½Ú**************/
/****Reg to register a byte written while returning state bytes****/
uint8_t SPI_RW_Reg(uint8_t reg,uint8_t value)
{
     248:	df 93       	push	r29
     24a:	cf 93       	push	r28
     24c:	00 d0       	rcall	.+0      	; 0x24e <SPI_RW_Reg+0x6>
     24e:	0f 92       	push	r0
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	8a 83       	std	Y+2, r24	; 0x02
     256:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t status;

	CSN_0;
     258:	a2 e3       	ldi	r26, 0x32	; 50
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	e2 e3       	ldi	r30, 0x32	; 50
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	8f 7b       	andi	r24, 0xBF	; 191
     264:	8c 93       	st	X, r24
	status=SPI_RW(reg);   //select register  and write value to it
     266:	8a 81       	ldd	r24, Y+2	; 0x02
     268:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
     26c:	89 83       	std	Y+1, r24	; 0x01
	SPI_RW(value);   
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
	CSN_1;
     274:	a2 e3       	ldi	r26, 0x32	; 50
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	e2 e3       	ldi	r30, 0x32	; 50
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	80 64       	ori	r24, 0x40	; 64
     280:	8c 93       	st	X, r24
	return(status); 
     282:	89 81       	ldd	r24, Y+1	; 0x01
}
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	cf 91       	pop	r28
     28c:	df 91       	pop	r29
     28e:	08 95       	ret

00000290 <SPI_Read_Reg>:

/****Ïò¼Ä´æÆ÷reg¶ÁÒ»¸ö×Ö½Ú£¬Í¬Ê±·µ»Ø×´Ì¬×Ö½Ú**************/
/****To register reg read a byte, and return to state bytes*****/
uint8_t SPI_Read_Reg(uint8_t reg)
{
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	00 d0       	rcall	.+0      	; 0x296 <SPI_Read_Reg+0x6>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;
	CSN_0;
     29c:	a2 e3       	ldi	r26, 0x32	; 50
     29e:	b0 e0       	ldi	r27, 0x00	; 0
     2a0:	e2 e3       	ldi	r30, 0x32	; 50
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	80 81       	ld	r24, Z
     2a6:	8f 7b       	andi	r24, 0xBF	; 191
     2a8:	8c 93       	st	X, r24
	SPI_RW(reg);
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
    status = SPI_RW(0);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
     2b6:	89 83       	std	Y+1, r24	; 0x01

	CSN_1;
     2b8:	a2 e3       	ldi	r26, 0x32	; 50
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e2 e3       	ldi	r30, 0x32	; 50
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	80 64       	ori	r24, 0x40	; 64
     2c4:	8c 93       	st	X, r24
	return(status);
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	cf 91       	pop	r28
     2ce:	df 91       	pop	r29
     2d0:	08 95       	ret

000002d2 <SPI_Read_Buf>:

/********¶Á³öbytes×Ö½ÚµÄÊý¾Ý*************************/
/********Read the bytes bytes of data****************/

uint8_t SPI_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t bytes)
{
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	df 93       	push	r29
     2d8:	cf 93       	push	r28
     2da:	00 d0       	rcall	.+0      	; 0x2dc <SPI_Read_Buf+0xa>
     2dc:	00 d0       	rcall	.+0      	; 0x2de <SPI_Read_Buf+0xc>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <SPI_Read_Buf+0xe>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	8b 83       	std	Y+3, r24	; 0x03
     2e6:	7d 83       	std	Y+5, r23	; 0x05
     2e8:	6c 83       	std	Y+4, r22	; 0x04
     2ea:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t status,byte_ctr;

	CSN_0;
     2ec:	a2 e3       	ldi	r26, 0x32	; 50
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	e2 e3       	ldi	r30, 0x32	; 50
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7b       	andi	r24, 0xBF	; 191
     2f8:	8c 93       	st	X, r24
	status=SPI_RW(reg);       
     2fa:	8b 81       	ldd	r24, Y+3	; 0x03
     2fc:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
     300:	8a 83       	std	Y+2, r24	; 0x02
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
     302:	19 82       	std	Y+1, r1	; 0x01
     304:	10 c0       	rjmp	.+32     	; 0x326 <SPI_Read_Buf+0x54>
		pBuf[byte_ctr]=SPI_RW(0);
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	28 2f       	mov	r18, r24
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	9d 81       	ldd	r25, Y+5	; 0x05
     310:	8c 01       	movw	r16, r24
     312:	02 0f       	add	r16, r18
     314:	13 1f       	adc	r17, r19
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
     31c:	f8 01       	movw	r30, r16
     31e:	80 83       	st	Z, r24
{
	uint8_t status,byte_ctr;

	CSN_0;
	status=SPI_RW(reg);       
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	99 81       	ldd	r25, Y+1	; 0x01
     328:	8e 81       	ldd	r24, Y+6	; 0x06
     32a:	98 17       	cp	r25, r24
     32c:	60 f3       	brcs	.-40     	; 0x306 <SPI_Read_Buf+0x34>
		pBuf[byte_ctr]=SPI_RW(0);

	CSN_1;
     32e:	a2 e3       	ldi	r26, 0x32	; 50
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	e2 e3       	ldi	r30, 0x32	; 50
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	80 64       	ori	r24, 0x40	; 64
     33a:	8c 93       	st	X, r24
	return(status);
     33c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     33e:	26 96       	adiw	r28, 0x06	; 6
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	cf 91       	pop	r28
     34c:	df 91       	pop	r29
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <SPI_Write_Buf>:

/****************Ð´Èëbytes×Ö½ÚµÄÊý¾Ý*******************/
/****************Write bytes bytes of data*************/
uint8_t SPI_Write_Buf(uint8_t reg,uint8_t *pBuf,uint8_t bytes)
{
     354:	df 93       	push	r29
     356:	cf 93       	push	r28
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	6e 97       	sbiw	r28, 0x1e	; 30
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	8b 8f       	std	Y+27, r24	; 0x1b
     36a:	7d 8f       	std	Y+29, r23	; 0x1d
     36c:	6c 8f       	std	Y+28, r22	; 0x1c
     36e:	4e 8f       	std	Y+30, r20	; 0x1e
	uint8_t status,byte_ctr;
	CSN_0;
     370:	a2 e3       	ldi	r26, 0x32	; 50
     372:	b0 e0       	ldi	r27, 0x00	; 0
     374:	e2 e3       	ldi	r30, 0x32	; 50
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	8f 7b       	andi	r24, 0xBF	; 191
     37c:	8c 93       	st	X, r24
	status=SPI_RW(reg); 
     37e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     380:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
     384:	8a 8f       	std	Y+26, r24	; 0x1a
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	a0 e2       	ldi	r26, 0x20	; 32
     38c:	b1 e4       	ldi	r27, 0x41	; 65
     38e:	8d 8b       	std	Y+21, r24	; 0x15
     390:	9e 8b       	std	Y+22, r25	; 0x16
     392:	af 8b       	std	Y+23, r26	; 0x17
     394:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     396:	6d 89       	ldd	r22, Y+21	; 0x15
     398:	7e 89       	ldd	r23, Y+22	; 0x16
     39a:	8f 89       	ldd	r24, Y+23	; 0x17
     39c:	98 8d       	ldd	r25, Y+24	; 0x18
     39e:	22 e5       	ldi	r18, 0x52	; 82
     3a0:	39 e4       	ldi	r19, 0x49	; 73
     3a2:	4d e1       	ldi	r20, 0x1D	; 29
     3a4:	50 e4       	ldi	r21, 0x40	; 64
     3a6:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	89 8b       	std	Y+17, r24	; 0x11
     3b0:	9a 8b       	std	Y+18, r25	; 0x12
     3b2:	ab 8b       	std	Y+19, r26	; 0x13
     3b4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     3b6:	69 89       	ldd	r22, Y+17	; 0x11
     3b8:	7a 89       	ldd	r23, Y+18	; 0x12
     3ba:	8b 89       	ldd	r24, Y+19	; 0x13
     3bc:	9c 89       	ldd	r25, Y+20	; 0x14
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	40 e8       	ldi	r20, 0x80	; 128
     3c4:	5f e3       	ldi	r21, 0x3F	; 63
     3c6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     3ca:	88 23       	and	r24, r24
     3cc:	1c f4       	brge	.+6      	; 0x3d4 <SPI_Write_Buf+0x80>
		__ticks = 1;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	88 8b       	std	Y+16, r24	; 0x10
     3d2:	91 c0       	rjmp	.+290    	; 0x4f6 <SPI_Write_Buf+0x1a2>
	else if (__tmp > 255)
     3d4:	69 89       	ldd	r22, Y+17	; 0x11
     3d6:	7a 89       	ldd	r23, Y+18	; 0x12
     3d8:	8b 89       	ldd	r24, Y+19	; 0x13
     3da:	9c 89       	ldd	r25, Y+20	; 0x14
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	4f e7       	ldi	r20, 0x7F	; 127
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     3e8:	18 16       	cp	r1, r24
     3ea:	0c f0       	brlt	.+2      	; 0x3ee <SPI_Write_Buf+0x9a>
     3ec:	7b c0       	rjmp	.+246    	; 0x4e4 <SPI_Write_Buf+0x190>
	{
		_delay_ms(__us / 1000.0);
     3ee:	6d 89       	ldd	r22, Y+21	; 0x15
     3f0:	7e 89       	ldd	r23, Y+22	; 0x16
     3f2:	8f 89       	ldd	r24, Y+23	; 0x17
     3f4:	98 8d       	ldd	r25, Y+24	; 0x18
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	4a e7       	ldi	r20, 0x7A	; 122
     3fc:	54 e4       	ldi	r21, 0x44	; 68
     3fe:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	8c 87       	std	Y+12, r24	; 0x0c
     408:	9d 87       	std	Y+13, r25	; 0x0d
     40a:	ae 87       	std	Y+14, r26	; 0x0e
     40c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     40e:	6c 85       	ldd	r22, Y+12	; 0x0c
     410:	7d 85       	ldd	r23, Y+13	; 0x0d
     412:	8e 85       	ldd	r24, Y+14	; 0x0e
     414:	9f 85       	ldd	r25, Y+15	; 0x0f
     416:	26 e6       	ldi	r18, 0x66	; 102
     418:	36 e6       	ldi	r19, 0x66	; 102
     41a:	46 ee       	ldi	r20, 0xE6	; 230
     41c:	54 e4       	ldi	r21, 0x44	; 68
     41e:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     422:	dc 01       	movw	r26, r24
     424:	cb 01       	movw	r24, r22
     426:	88 87       	std	Y+8, r24	; 0x08
     428:	99 87       	std	Y+9, r25	; 0x09
     42a:	aa 87       	std	Y+10, r26	; 0x0a
     42c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     42e:	68 85       	ldd	r22, Y+8	; 0x08
     430:	79 85       	ldd	r23, Y+9	; 0x09
     432:	8a 85       	ldd	r24, Y+10	; 0x0a
     434:	9b 85       	ldd	r25, Y+11	; 0x0b
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e8       	ldi	r20, 0x80	; 128
     43c:	5f e3       	ldi	r21, 0x3F	; 63
     43e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     442:	88 23       	and	r24, r24
     444:	2c f4       	brge	.+10     	; 0x450 <SPI_Write_Buf+0xfc>
		__ticks = 1;
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	9f 83       	std	Y+7, r25	; 0x07
     44c:	8e 83       	std	Y+6, r24	; 0x06
     44e:	3f c0       	rjmp	.+126    	; 0x4ce <SPI_Write_Buf+0x17a>
	else if (__tmp > 65535)
     450:	68 85       	ldd	r22, Y+8	; 0x08
     452:	79 85       	ldd	r23, Y+9	; 0x09
     454:	8a 85       	ldd	r24, Y+10	; 0x0a
     456:	9b 85       	ldd	r25, Y+11	; 0x0b
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	3f ef       	ldi	r19, 0xFF	; 255
     45c:	4f e7       	ldi	r20, 0x7F	; 127
     45e:	57 e4       	ldi	r21, 0x47	; 71
     460:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     464:	18 16       	cp	r1, r24
     466:	4c f5       	brge	.+82     	; 0x4ba <SPI_Write_Buf+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     468:	6c 85       	ldd	r22, Y+12	; 0x0c
     46a:	7d 85       	ldd	r23, Y+13	; 0x0d
     46c:	8e 85       	ldd	r24, Y+14	; 0x0e
     46e:	9f 85       	ldd	r25, Y+15	; 0x0f
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	40 e2       	ldi	r20, 0x20	; 32
     476:	51 e4       	ldi	r21, 0x41	; 65
     478:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     47c:	dc 01       	movw	r26, r24
     47e:	cb 01       	movw	r24, r22
     480:	bc 01       	movw	r22, r24
     482:	cd 01       	movw	r24, r26
     484:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	9f 83       	std	Y+7, r25	; 0x07
     48e:	8e 83       	std	Y+6, r24	; 0x06
     490:	0f c0       	rjmp	.+30     	; 0x4b0 <SPI_Write_Buf+0x15c>
     492:	88 eb       	ldi	r24, 0xB8	; 184
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9d 83       	std	Y+5, r25	; 0x05
     498:	8c 83       	std	Y+4, r24	; 0x04
     49a:	8c 81       	ldd	r24, Y+4	; 0x04
     49c:	9d 81       	ldd	r25, Y+5	; 0x05
     49e:	01 97       	sbiw	r24, 0x01	; 1
     4a0:	f1 f7       	brne	.-4      	; 0x49e <SPI_Write_Buf+0x14a>
     4a2:	9d 83       	std	Y+5, r25	; 0x05
     4a4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a6:	8e 81       	ldd	r24, Y+6	; 0x06
     4a8:	9f 81       	ldd	r25, Y+7	; 0x07
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	9f 83       	std	Y+7, r25	; 0x07
     4ae:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b0:	8e 81       	ldd	r24, Y+6	; 0x06
     4b2:	9f 81       	ldd	r25, Y+7	; 0x07
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	69 f7       	brne	.-38     	; 0x492 <SPI_Write_Buf+0x13e>
     4b8:	24 c0       	rjmp	.+72     	; 0x502 <SPI_Write_Buf+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ba:	68 85       	ldd	r22, Y+8	; 0x08
     4bc:	79 85       	ldd	r23, Y+9	; 0x09
     4be:	8a 85       	ldd	r24, Y+10	; 0x0a
     4c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     4c2:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	9f 83       	std	Y+7, r25	; 0x07
     4cc:	8e 83       	std	Y+6, r24	; 0x06
     4ce:	8e 81       	ldd	r24, Y+6	; 0x06
     4d0:	9f 81       	ldd	r25, Y+7	; 0x07
     4d2:	9b 83       	std	Y+3, r25	; 0x03
     4d4:	8a 83       	std	Y+2, r24	; 0x02
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	9b 81       	ldd	r25, Y+3	; 0x03
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <SPI_Write_Buf+0x186>
     4de:	9b 83       	std	Y+3, r25	; 0x03
     4e0:	8a 83       	std	Y+2, r24	; 0x02
     4e2:	0f c0       	rjmp	.+30     	; 0x502 <SPI_Write_Buf+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4e4:	69 89       	ldd	r22, Y+17	; 0x11
     4e6:	7a 89       	ldd	r23, Y+18	; 0x12
     4e8:	8b 89       	ldd	r24, Y+19	; 0x13
     4ea:	9c 89       	ldd	r25, Y+20	; 0x14
     4ec:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	88 8b       	std	Y+16, r24	; 0x10
     4f6:	88 89       	ldd	r24, Y+16	; 0x10
     4f8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	8a 95       	dec	r24
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <SPI_Write_Buf+0x1a8>
     500:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
     502:	19 8e       	std	Y+25, r1	; 0x19
     504:	0e c0       	rjmp	.+28     	; 0x522 <SPI_Write_Buf+0x1ce>
		SPI_RW(*pBuf++);
     506:	ec 8d       	ldd	r30, Y+28	; 0x1c
     508:	fd 8d       	ldd	r31, Y+29	; 0x1d
     50a:	20 81       	ld	r18, Z
     50c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     50e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	9d 8f       	std	Y+29, r25	; 0x1d
     514:	8c 8f       	std	Y+28, r24	; 0x1c
     516:	82 2f       	mov	r24, r18
     518:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
{
	uint8_t status,byte_ctr;
	CSN_0;
	status=SPI_RW(reg); 
	_delay_us(10);
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
     51c:	89 8d       	ldd	r24, Y+25	; 0x19
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	89 8f       	std	Y+25, r24	; 0x19
     522:	99 8d       	ldd	r25, Y+25	; 0x19
     524:	8e 8d       	ldd	r24, Y+30	; 0x1e
     526:	98 17       	cp	r25, r24
     528:	70 f3       	brcs	.-36     	; 0x506 <SPI_Write_Buf+0x1b2>
		SPI_RW(*pBuf++);
	CSN_1;
     52a:	a2 e3       	ldi	r26, 0x32	; 50
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	e2 e3       	ldi	r30, 0x32	; 50
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	80 64       	ori	r24, 0x40	; 64
     536:	8c 93       	st	X, r24
	return(status);
     538:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
     53a:	6e 96       	adiw	r28, 0x1e	; 30
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <nRF24L01_RxPacket>:

/*½ÓÊÕº¯Êý£¬·µ»Ø1±íÊ¾ÓÐÊý¾ÝÊÕµ½£¬·ñÔòÃ»ÓÐÊý¾Ý½ÓÊÕµ½**/
/*Receive function, and returns 1 said data received, or no data to receive*/
uint8_t nRF24L01_RxPacket(uint8_t* rx_buf)
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	6c 97       	sbiw	r28, 0x1c	; 28
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	9c 8f       	std	Y+28, r25	; 0x1c
     562:	8b 8f       	std	Y+27, r24	; 0x1b
    uint8_t status,revale=0;
     564:	19 8e       	std	Y+25, r1	; 0x19
	CE_0;
     566:	a2 e3       	ldi	r26, 0x32	; 50
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	e2 e3       	ldi	r30, 0x32	; 50
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	8f 77       	andi	r24, 0x7F	; 127
     572:	8c 93       	st	X, r24
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	a0 e2       	ldi	r26, 0x20	; 32
     57a:	b1 e4       	ldi	r27, 0x41	; 65
     57c:	8d 8b       	std	Y+21, r24	; 0x15
     57e:	9e 8b       	std	Y+22, r25	; 0x16
     580:	af 8b       	std	Y+23, r26	; 0x17
     582:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     584:	6d 89       	ldd	r22, Y+21	; 0x15
     586:	7e 89       	ldd	r23, Y+22	; 0x16
     588:	8f 89       	ldd	r24, Y+23	; 0x17
     58a:	98 8d       	ldd	r25, Y+24	; 0x18
     58c:	22 e5       	ldi	r18, 0x52	; 82
     58e:	39 e4       	ldi	r19, 0x49	; 73
     590:	4d e1       	ldi	r20, 0x1D	; 29
     592:	50 e4       	ldi	r21, 0x40	; 64
     594:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	89 8b       	std	Y+17, r24	; 0x11
     59e:	9a 8b       	std	Y+18, r25	; 0x12
     5a0:	ab 8b       	std	Y+19, r26	; 0x13
     5a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     5a4:	69 89       	ldd	r22, Y+17	; 0x11
     5a6:	7a 89       	ldd	r23, Y+18	; 0x12
     5a8:	8b 89       	ldd	r24, Y+19	; 0x13
     5aa:	9c 89       	ldd	r25, Y+20	; 0x14
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e8       	ldi	r20, 0x80	; 128
     5b2:	5f e3       	ldi	r21, 0x3F	; 63
     5b4:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     5b8:	88 23       	and	r24, r24
     5ba:	1c f4       	brge	.+6      	; 0x5c2 <nRF24L01_RxPacket+0x76>
		__ticks = 1;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	88 8b       	std	Y+16, r24	; 0x10
     5c0:	91 c0       	rjmp	.+290    	; 0x6e4 <nRF24L01_RxPacket+0x198>
	else if (__tmp > 255)
     5c2:	69 89       	ldd	r22, Y+17	; 0x11
     5c4:	7a 89       	ldd	r23, Y+18	; 0x12
     5c6:	8b 89       	ldd	r24, Y+19	; 0x13
     5c8:	9c 89       	ldd	r25, Y+20	; 0x14
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	4f e7       	ldi	r20, 0x7F	; 127
     5d0:	53 e4       	ldi	r21, 0x43	; 67
     5d2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     5d6:	18 16       	cp	r1, r24
     5d8:	0c f0       	brlt	.+2      	; 0x5dc <nRF24L01_RxPacket+0x90>
     5da:	7b c0       	rjmp	.+246    	; 0x6d2 <nRF24L01_RxPacket+0x186>
	{
		_delay_ms(__us / 1000.0);
     5dc:	6d 89       	ldd	r22, Y+21	; 0x15
     5de:	7e 89       	ldd	r23, Y+22	; 0x16
     5e0:	8f 89       	ldd	r24, Y+23	; 0x17
     5e2:	98 8d       	ldd	r25, Y+24	; 0x18
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	4a e7       	ldi	r20, 0x7A	; 122
     5ea:	54 e4       	ldi	r21, 0x44	; 68
     5ec:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     5f0:	dc 01       	movw	r26, r24
     5f2:	cb 01       	movw	r24, r22
     5f4:	8c 87       	std	Y+12, r24	; 0x0c
     5f6:	9d 87       	std	Y+13, r25	; 0x0d
     5f8:	ae 87       	std	Y+14, r26	; 0x0e
     5fa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fc:	6c 85       	ldd	r22, Y+12	; 0x0c
     5fe:	7d 85       	ldd	r23, Y+13	; 0x0d
     600:	8e 85       	ldd	r24, Y+14	; 0x0e
     602:	9f 85       	ldd	r25, Y+15	; 0x0f
     604:	26 e6       	ldi	r18, 0x66	; 102
     606:	36 e6       	ldi	r19, 0x66	; 102
     608:	46 ee       	ldi	r20, 0xE6	; 230
     60a:	54 e4       	ldi	r21, 0x44	; 68
     60c:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     610:	dc 01       	movw	r26, r24
     612:	cb 01       	movw	r24, r22
     614:	88 87       	std	Y+8, r24	; 0x08
     616:	99 87       	std	Y+9, r25	; 0x09
     618:	aa 87       	std	Y+10, r26	; 0x0a
     61a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     61c:	68 85       	ldd	r22, Y+8	; 0x08
     61e:	79 85       	ldd	r23, Y+9	; 0x09
     620:	8a 85       	ldd	r24, Y+10	; 0x0a
     622:	9b 85       	ldd	r25, Y+11	; 0x0b
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	40 e8       	ldi	r20, 0x80	; 128
     62a:	5f e3       	ldi	r21, 0x3F	; 63
     62c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     630:	88 23       	and	r24, r24
     632:	2c f4       	brge	.+10     	; 0x63e <nRF24L01_RxPacket+0xf2>
		__ticks = 1;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	9f 83       	std	Y+7, r25	; 0x07
     63a:	8e 83       	std	Y+6, r24	; 0x06
     63c:	3f c0       	rjmp	.+126    	; 0x6bc <nRF24L01_RxPacket+0x170>
	else if (__tmp > 65535)
     63e:	68 85       	ldd	r22, Y+8	; 0x08
     640:	79 85       	ldd	r23, Y+9	; 0x09
     642:	8a 85       	ldd	r24, Y+10	; 0x0a
     644:	9b 85       	ldd	r25, Y+11	; 0x0b
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	3f ef       	ldi	r19, 0xFF	; 255
     64a:	4f e7       	ldi	r20, 0x7F	; 127
     64c:	57 e4       	ldi	r21, 0x47	; 71
     64e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     652:	18 16       	cp	r1, r24
     654:	4c f5       	brge	.+82     	; 0x6a8 <nRF24L01_RxPacket+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     656:	6c 85       	ldd	r22, Y+12	; 0x0c
     658:	7d 85       	ldd	r23, Y+13	; 0x0d
     65a:	8e 85       	ldd	r24, Y+14	; 0x0e
     65c:	9f 85       	ldd	r25, Y+15	; 0x0f
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	40 e2       	ldi	r20, 0x20	; 32
     664:	51 e4       	ldi	r21, 0x41	; 65
     666:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	9f 83       	std	Y+7, r25	; 0x07
     67c:	8e 83       	std	Y+6, r24	; 0x06
     67e:	0f c0       	rjmp	.+30     	; 0x69e <nRF24L01_RxPacket+0x152>
     680:	88 eb       	ldi	r24, 0xB8	; 184
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	9d 83       	std	Y+5, r25	; 0x05
     686:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     688:	8c 81       	ldd	r24, Y+4	; 0x04
     68a:	9d 81       	ldd	r25, Y+5	; 0x05
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <nRF24L01_RxPacket+0x140>
     690:	9d 83       	std	Y+5, r25	; 0x05
     692:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     694:	8e 81       	ldd	r24, Y+6	; 0x06
     696:	9f 81       	ldd	r25, Y+7	; 0x07
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	9f 83       	std	Y+7, r25	; 0x07
     69c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     69e:	8e 81       	ldd	r24, Y+6	; 0x06
     6a0:	9f 81       	ldd	r25, Y+7	; 0x07
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	69 f7       	brne	.-38     	; 0x680 <nRF24L01_RxPacket+0x134>
     6a6:	24 c0       	rjmp	.+72     	; 0x6f0 <nRF24L01_RxPacket+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6a8:	68 85       	ldd	r22, Y+8	; 0x08
     6aa:	79 85       	ldd	r23, Y+9	; 0x09
     6ac:	8a 85       	ldd	r24, Y+10	; 0x0a
     6ae:	9b 85       	ldd	r25, Y+11	; 0x0b
     6b0:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	9f 83       	std	Y+7, r25	; 0x07
     6ba:	8e 83       	std	Y+6, r24	; 0x06
     6bc:	8e 81       	ldd	r24, Y+6	; 0x06
     6be:	9f 81       	ldd	r25, Y+7	; 0x07
     6c0:	9b 83       	std	Y+3, r25	; 0x03
     6c2:	8a 83       	std	Y+2, r24	; 0x02
     6c4:	8a 81       	ldd	r24, Y+2	; 0x02
     6c6:	9b 81       	ldd	r25, Y+3	; 0x03
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <nRF24L01_RxPacket+0x17c>
     6cc:	9b 83       	std	Y+3, r25	; 0x03
     6ce:	8a 83       	std	Y+2, r24	; 0x02
     6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <nRF24L01_RxPacket+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6d2:	69 89       	ldd	r22, Y+17	; 0x11
     6d4:	7a 89       	ldd	r23, Y+18	; 0x12
     6d6:	8b 89       	ldd	r24, Y+19	; 0x13
     6d8:	9c 89       	ldd	r25, Y+20	; 0x14
     6da:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	88 8b       	std	Y+16, r24	; 0x10
     6e4:	88 89       	ldd	r24, Y+16	; 0x10
     6e6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	8a 95       	dec	r24
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <nRF24L01_RxPacket+0x19e>
     6ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	status=SPI_RW(STATUS);	// ¶ÁÈ¡×´Ì¬¼Ä´æÆäÀ´ÅÐ¶ÏÊý¾Ý½ÓÊÕ×´¿ö	(Check the state judge read data receiving condition)
     6f0:	87 e0       	ldi	r24, 0x07	; 7
     6f2:	0e 94 0e 01 	call	0x21c	; 0x21c <SPI_RW>
     6f6:	8a 8f       	std	Y+26, r24	; 0x1a

	printf("STATUS½ÓÊÜ×´Ì¬£º0x%2x\r\n",status);
     6f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6fa:	28 2f       	mov	r18, r24
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	00 d0       	rcall	.+0      	; 0x700 <nRF24L01_RxPacket+0x1b4>
     700:	00 d0       	rcall	.+0      	; 0x702 <nRF24L01_RxPacket+0x1b6>
     702:	ed b7       	in	r30, 0x3d	; 61
     704:	fe b7       	in	r31, 0x3e	; 62
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	8a e8       	ldi	r24, 0x8A	; 138
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	91 83       	std	Z+1, r25	; 0x01
     70e:	80 83       	st	Z, r24
     710:	33 83       	std	Z+3, r19	; 0x03
     712:	22 83       	std	Z+2, r18	; 0x02
     714:	0e 94 54 10 	call	0x20a8	; 0x20a8 <printf>
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0

	if(status & RX_DR)				// ÅÐ¶ÏÊÇ·ñ½ÓÊÕµ½Êý¾Ý(Judge whether to receive data)
     720:	8a 8d       	ldd	r24, Y+26	; 0x1a
     722:	88 2f       	mov	r24, r24
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	80 74       	andi	r24, 0x40	; 64
     728:	90 70       	andi	r25, 0x00	; 0
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	49 f0       	breq	.+18     	; 0x740 <nRF24L01_RxPacket+0x1f4>
	{
		SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
     72e:	2b 8d       	ldd	r18, Y+27	; 0x1b
     730:	3c 8d       	ldd	r19, Y+28	; 0x1c
     732:	81 e6       	ldi	r24, 0x61	; 97
     734:	b9 01       	movw	r22, r18
     736:	40 e2       	ldi	r20, 0x20	; 32
     738:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SPI_Read_Buf>

		revale =1;			
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	89 8f       	std	Y+25, r24	; 0x19
	}
	SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS,status);   //½ÓÊÕµ½Êý¾ÝºóRX_DR,TX_DS,MAX_PT¶¼ÖÃ¸ßÎª1£¬Í¨¹ýÐ´1À´Çå³þÖÐ¶Ï±êÖ¾
     740:	87 e2       	ldi	r24, 0x27	; 39
     742:	6a 8d       	ldd	r22, Y+26	; 0x1a
     744:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
	CE_1;
     748:	a2 e3       	ldi	r26, 0x32	; 50
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e2 e3       	ldi	r30, 0x32	; 50
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	80 68       	ori	r24, 0x80	; 128
     754:	8c 93       	st	X, r24
	return revale;	
     756:	89 8d       	ldd	r24, Y+25	; 0x19
}
     758:	6c 96       	adiw	r28, 0x1c	; 28
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	cf 91       	pop	r28
     766:	df 91       	pop	r29
     768:	08 95       	ret

0000076a <nRF24L01_TxPacket>:

 /****************·¢ËÍº¯Êý***************************/
void nRF24L01_TxPacket(unsigned char * tx_buf)
{
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	6a 97       	sbiw	r28, 0x1a	; 26
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	9a 8f       	std	Y+26, r25	; 0x1a
     780:	89 8f       	std	Y+25, r24	; 0x19
	CE_0;			//StandBy IÄ£Ê½	
     782:	a2 e3       	ldi	r26, 0x32	; 50
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e2 e3       	ldi	r30, 0x32	; 50
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	8f 77       	andi	r24, 0x7F	; 127
     78e:	8c 93       	st	X, r24
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // ×°ÔØ½ÓÊÕ¶ËµØÖ·	(Loading the receiver address)
     790:	25 e8       	ldi	r18, 0x85	; 133
     792:	31 e0       	ldi	r19, 0x01	; 1
     794:	8a e2       	ldi	r24, 0x2A	; 42
     796:	b9 01       	movw	r22, r18
     798:	45 e0       	ldi	r20, 0x05	; 5
     79a:	0e 94 aa 01 	call	0x354	; 0x354 <SPI_Write_Buf>
	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); 			 // ×°ÔØÊý¾Ý(Load data)	
     79e:	29 8d       	ldd	r18, Y+25	; 0x19
     7a0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     7a2:	80 ea       	ldi	r24, 0xA0	; 160
     7a4:	b9 01       	movw	r22, r18
     7a6:	40 e2       	ldi	r20, 0x20	; 32
     7a8:	0e 94 aa 01 	call	0x354	; 0x354 <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e);   		 // IRQÊÕ·¢Íê³ÉÖÐ¶ÏÏìÓ¦£¬16Î»CRC£¬Ö÷·¢ËÍ(IRQ transceiver complete interrupt response, 16 CRC, the Lord sent)
     7ac:	80 e2       	ldi	r24, 0x20	; 32
     7ae:	6e e0       	ldi	r22, 0x0E	; 14
     7b0:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
	CE_1;		 //ÖÃ¸ßCE£¬¼¤·¢Êý¾Ý·¢ËÍ(Buy high CE, stimulate the data sent)
     7b4:	a2 e3       	ldi	r26, 0x32	; 50
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	e2 e3       	ldi	r30, 0x32	; 50
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	80 68       	ori	r24, 0x80	; 128
     7c0:	8c 93       	st	X, r24
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a0 e2       	ldi	r26, 0x20	; 32
     7c8:	b1 e4       	ldi	r27, 0x41	; 65
     7ca:	8d 8b       	std	Y+21, r24	; 0x15
     7cc:	9e 8b       	std	Y+22, r25	; 0x16
     7ce:	af 8b       	std	Y+23, r26	; 0x17
     7d0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     7d2:	6d 89       	ldd	r22, Y+21	; 0x15
     7d4:	7e 89       	ldd	r23, Y+22	; 0x16
     7d6:	8f 89       	ldd	r24, Y+23	; 0x17
     7d8:	98 8d       	ldd	r25, Y+24	; 0x18
     7da:	22 e5       	ldi	r18, 0x52	; 82
     7dc:	39 e4       	ldi	r19, 0x49	; 73
     7de:	4d e1       	ldi	r20, 0x1D	; 29
     7e0:	50 e4       	ldi	r21, 0x40	; 64
     7e2:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	89 8b       	std	Y+17, r24	; 0x11
     7ec:	9a 8b       	std	Y+18, r25	; 0x12
     7ee:	ab 8b       	std	Y+19, r26	; 0x13
     7f0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     7f2:	69 89       	ldd	r22, Y+17	; 0x11
     7f4:	7a 89       	ldd	r23, Y+18	; 0x12
     7f6:	8b 89       	ldd	r24, Y+19	; 0x13
     7f8:	9c 89       	ldd	r25, Y+20	; 0x14
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e8       	ldi	r20, 0x80	; 128
     800:	5f e3       	ldi	r21, 0x3F	; 63
     802:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     806:	88 23       	and	r24, r24
     808:	1c f4       	brge	.+6      	; 0x810 <nRF24L01_TxPacket+0xa6>
		__ticks = 1;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	88 8b       	std	Y+16, r24	; 0x10
     80e:	91 c0       	rjmp	.+290    	; 0x932 <nRF24L01_TxPacket+0x1c8>
	else if (__tmp > 255)
     810:	69 89       	ldd	r22, Y+17	; 0x11
     812:	7a 89       	ldd	r23, Y+18	; 0x12
     814:	8b 89       	ldd	r24, Y+19	; 0x13
     816:	9c 89       	ldd	r25, Y+20	; 0x14
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	4f e7       	ldi	r20, 0x7F	; 127
     81e:	53 e4       	ldi	r21, 0x43	; 67
     820:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     824:	18 16       	cp	r1, r24
     826:	0c f0       	brlt	.+2      	; 0x82a <nRF24L01_TxPacket+0xc0>
     828:	7b c0       	rjmp	.+246    	; 0x920 <nRF24L01_TxPacket+0x1b6>
	{
		_delay_ms(__us / 1000.0);
     82a:	6d 89       	ldd	r22, Y+21	; 0x15
     82c:	7e 89       	ldd	r23, Y+22	; 0x16
     82e:	8f 89       	ldd	r24, Y+23	; 0x17
     830:	98 8d       	ldd	r25, Y+24	; 0x18
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	4a e7       	ldi	r20, 0x7A	; 122
     838:	54 e4       	ldi	r21, 0x44	; 68
     83a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     83e:	dc 01       	movw	r26, r24
     840:	cb 01       	movw	r24, r22
     842:	8c 87       	std	Y+12, r24	; 0x0c
     844:	9d 87       	std	Y+13, r25	; 0x0d
     846:	ae 87       	std	Y+14, r26	; 0x0e
     848:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     84a:	6c 85       	ldd	r22, Y+12	; 0x0c
     84c:	7d 85       	ldd	r23, Y+13	; 0x0d
     84e:	8e 85       	ldd	r24, Y+14	; 0x0e
     850:	9f 85       	ldd	r25, Y+15	; 0x0f
     852:	26 e6       	ldi	r18, 0x66	; 102
     854:	36 e6       	ldi	r19, 0x66	; 102
     856:	46 ee       	ldi	r20, 0xE6	; 230
     858:	54 e4       	ldi	r21, 0x44	; 68
     85a:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	88 87       	std	Y+8, r24	; 0x08
     864:	99 87       	std	Y+9, r25	; 0x09
     866:	aa 87       	std	Y+10, r26	; 0x0a
     868:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     86a:	68 85       	ldd	r22, Y+8	; 0x08
     86c:	79 85       	ldd	r23, Y+9	; 0x09
     86e:	8a 85       	ldd	r24, Y+10	; 0x0a
     870:	9b 85       	ldd	r25, Y+11	; 0x0b
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e8       	ldi	r20, 0x80	; 128
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     87e:	88 23       	and	r24, r24
     880:	2c f4       	brge	.+10     	; 0x88c <nRF24L01_TxPacket+0x122>
		__ticks = 1;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	9f 83       	std	Y+7, r25	; 0x07
     888:	8e 83       	std	Y+6, r24	; 0x06
     88a:	3f c0       	rjmp	.+126    	; 0x90a <nRF24L01_TxPacket+0x1a0>
	else if (__tmp > 65535)
     88c:	68 85       	ldd	r22, Y+8	; 0x08
     88e:	79 85       	ldd	r23, Y+9	; 0x09
     890:	8a 85       	ldd	r24, Y+10	; 0x0a
     892:	9b 85       	ldd	r25, Y+11	; 0x0b
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	3f ef       	ldi	r19, 0xFF	; 255
     898:	4f e7       	ldi	r20, 0x7F	; 127
     89a:	57 e4       	ldi	r21, 0x47	; 71
     89c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     8a0:	18 16       	cp	r1, r24
     8a2:	4c f5       	brge	.+82     	; 0x8f6 <nRF24L01_TxPacket+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a4:	6c 85       	ldd	r22, Y+12	; 0x0c
     8a6:	7d 85       	ldd	r23, Y+13	; 0x0d
     8a8:	8e 85       	ldd	r24, Y+14	; 0x0e
     8aa:	9f 85       	ldd	r25, Y+15	; 0x0f
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e2       	ldi	r20, 0x20	; 32
     8b2:	51 e4       	ldi	r21, 0x41	; 65
     8b4:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	bc 01       	movw	r22, r24
     8be:	cd 01       	movw	r24, r26
     8c0:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	9f 83       	std	Y+7, r25	; 0x07
     8ca:	8e 83       	std	Y+6, r24	; 0x06
     8cc:	0f c0       	rjmp	.+30     	; 0x8ec <nRF24L01_TxPacket+0x182>
     8ce:	88 eb       	ldi	r24, 0xB8	; 184
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	9d 83       	std	Y+5, r25	; 0x05
     8d4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8d6:	8c 81       	ldd	r24, Y+4	; 0x04
     8d8:	9d 81       	ldd	r25, Y+5	; 0x05
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <nRF24L01_TxPacket+0x170>
     8de:	9d 83       	std	Y+5, r25	; 0x05
     8e0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e2:	8e 81       	ldd	r24, Y+6	; 0x06
     8e4:	9f 81       	ldd	r25, Y+7	; 0x07
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	9f 83       	std	Y+7, r25	; 0x07
     8ea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ec:	8e 81       	ldd	r24, Y+6	; 0x06
     8ee:	9f 81       	ldd	r25, Y+7	; 0x07
     8f0:	00 97       	sbiw	r24, 0x00	; 0
     8f2:	69 f7       	brne	.-38     	; 0x8ce <nRF24L01_TxPacket+0x164>
     8f4:	24 c0       	rjmp	.+72     	; 0x93e <nRF24L01_TxPacket+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f6:	68 85       	ldd	r22, Y+8	; 0x08
     8f8:	79 85       	ldd	r23, Y+9	; 0x09
     8fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     8fc:	9b 85       	ldd	r25, Y+11	; 0x0b
     8fe:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	9f 83       	std	Y+7, r25	; 0x07
     908:	8e 83       	std	Y+6, r24	; 0x06
     90a:	8e 81       	ldd	r24, Y+6	; 0x06
     90c:	9f 81       	ldd	r25, Y+7	; 0x07
     90e:	9b 83       	std	Y+3, r25	; 0x03
     910:	8a 83       	std	Y+2, r24	; 0x02
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	9b 81       	ldd	r25, Y+3	; 0x03
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <nRF24L01_TxPacket+0x1ac>
     91a:	9b 83       	std	Y+3, r25	; 0x03
     91c:	8a 83       	std	Y+2, r24	; 0x02
     91e:	0f c0       	rjmp	.+30     	; 0x93e <nRF24L01_TxPacket+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     920:	69 89       	ldd	r22, Y+17	; 0x11
     922:	7a 89       	ldd	r23, Y+18	; 0x12
     924:	8b 89       	ldd	r24, Y+19	; 0x13
     926:	9c 89       	ldd	r25, Y+20	; 0x14
     928:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	88 8b       	std	Y+16, r24	; 0x10
     932:	88 89       	ldd	r24, Y+16	; 0x10
     934:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	8a 95       	dec	r24
     93a:	f1 f7       	brne	.-4      	; 0x938 <nRF24L01_TxPacket+0x1ce>
     93c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
     93e:	6a 96       	adiw	r28, 0x1a	; 26
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	cf 91       	pop	r28
     94c:	df 91       	pop	r29
     94e:	08 95       	ret

00000950 <RX_Mode>:


void RX_Mode(void)
{
     950:	df 93       	push	r29
     952:	cf 93       	push	r28
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	68 97       	sbiw	r28, 0x18	; 24
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
	CE_0;
     964:	a2 e3       	ldi	r26, 0x32	; 50
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e2 e3       	ldi	r30, 0x32	; 50
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	8f 77       	andi	r24, 0x7F	; 127
     970:	8c 93       	st	X, r24
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);  // ½ÓÊÕÉè±¸½ÓÊÕÍ¨µÀ0Ê¹ÓÃºÍ·¢ËÍÉè±¸ÏàÍ¬µÄ·¢ËÍµØÖ·
     972:	25 e8       	ldi	r18, 0x85	; 133
     974:	31 e0       	ldi	r19, 0x01	; 1
     976:	8a e2       	ldi	r24, 0x2A	; 42
     978:	b9 01       	movw	r22, r18
     97a:	45 e0       	ldi	r20, 0x05	; 5
     97c:	0e 94 aa 01 	call	0x354	; 0x354 <SPI_Write_Buf>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH);  // ½ÓÊÕÍ¨µÀ0Ñ¡ÔñºÍ·¢ËÍÍ¨µÀÏàÍ¬ÓÐÐ§Êý¾Ý¿í¶È 
     980:	81 e3       	ldi	r24, 0x31	; 49
     982:	60 e2       	ldi	r22, 0x20	; 32
     984:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
 
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);               // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
     988:	81 e2       	ldi	r24, 0x21	; 33
     98a:	6f e3       	ldi	r22, 0x3F	; 63
     98c:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f);           // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
     990:	82 e2       	ldi	r24, 0x22	; 34
     992:	6f e3       	ldi	r22, 0x3F	; 63
     994:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40);                 // Ñ¡ÔñÉäÆµÍ¨µÀ0x40
     998:	85 e2       	ldi	r24, 0x25	; 37
     99a:	68 e2       	ldi	r22, 0x28	; 40
     99c:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>

  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07);            // Êý¾Ý´«ÊäÂÊ1Mbps£¬·¢Éä¹¦ÂÊ0dBm£¬µÍÔëÉù·Å´óÆ÷ÔöÒæ
     9a0:	86 e2       	ldi	r24, 0x26	; 38
     9a2:	67 e0       	ldi	r22, 0x07	; 7
     9a4:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0f);              // CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬ÉÏµç£¬½ÓÊÕÄ£Ê½
     9a8:	80 e2       	ldi	r24, 0x20	; 32
     9aa:	6f e0       	ldi	r22, 0x0F	; 15
     9ac:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	CE_1;
     9b0:	a2 e3       	ldi	r26, 0x32	; 50
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	e2 e3       	ldi	r30, 0x32	; 50
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	80 68       	ori	r24, 0x80	; 128
     9bc:	8c 93       	st	X, r24
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	a0 e2       	ldi	r26, 0x20	; 32
     9c4:	b1 e4       	ldi	r27, 0x41	; 65
     9c6:	8d 8b       	std	Y+21, r24	; 0x15
     9c8:	9e 8b       	std	Y+22, r25	; 0x16
     9ca:	af 8b       	std	Y+23, r26	; 0x17
     9cc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     9ce:	6d 89       	ldd	r22, Y+21	; 0x15
     9d0:	7e 89       	ldd	r23, Y+22	; 0x16
     9d2:	8f 89       	ldd	r24, Y+23	; 0x17
     9d4:	98 8d       	ldd	r25, Y+24	; 0x18
     9d6:	22 e5       	ldi	r18, 0x52	; 82
     9d8:	39 e4       	ldi	r19, 0x49	; 73
     9da:	4d e1       	ldi	r20, 0x1D	; 29
     9dc:	50 e4       	ldi	r21, 0x40	; 64
     9de:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	89 8b       	std	Y+17, r24	; 0x11
     9e8:	9a 8b       	std	Y+18, r25	; 0x12
     9ea:	ab 8b       	std	Y+19, r26	; 0x13
     9ec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     9ee:	69 89       	ldd	r22, Y+17	; 0x11
     9f0:	7a 89       	ldd	r23, Y+18	; 0x12
     9f2:	8b 89       	ldd	r24, Y+19	; 0x13
     9f4:	9c 89       	ldd	r25, Y+20	; 0x14
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e8       	ldi	r20, 0x80	; 128
     9fc:	5f e3       	ldi	r21, 0x3F	; 63
     9fe:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     a02:	88 23       	and	r24, r24
     a04:	1c f4       	brge	.+6      	; 0xa0c <RX_Mode+0xbc>
		__ticks = 1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	88 8b       	std	Y+16, r24	; 0x10
     a0a:	91 c0       	rjmp	.+290    	; 0xb2e <RX_Mode+0x1de>
	else if (__tmp > 255)
     a0c:	69 89       	ldd	r22, Y+17	; 0x11
     a0e:	7a 89       	ldd	r23, Y+18	; 0x12
     a10:	8b 89       	ldd	r24, Y+19	; 0x13
     a12:	9c 89       	ldd	r25, Y+20	; 0x14
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	4f e7       	ldi	r20, 0x7F	; 127
     a1a:	53 e4       	ldi	r21, 0x43	; 67
     a1c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     a20:	18 16       	cp	r1, r24
     a22:	0c f0       	brlt	.+2      	; 0xa26 <RX_Mode+0xd6>
     a24:	7b c0       	rjmp	.+246    	; 0xb1c <RX_Mode+0x1cc>
	{
		_delay_ms(__us / 1000.0);
     a26:	6d 89       	ldd	r22, Y+21	; 0x15
     a28:	7e 89       	ldd	r23, Y+22	; 0x16
     a2a:	8f 89       	ldd	r24, Y+23	; 0x17
     a2c:	98 8d       	ldd	r25, Y+24	; 0x18
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	4a e7       	ldi	r20, 0x7A	; 122
     a34:	54 e4       	ldi	r21, 0x44	; 68
     a36:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	8c 87       	std	Y+12, r24	; 0x0c
     a40:	9d 87       	std	Y+13, r25	; 0x0d
     a42:	ae 87       	std	Y+14, r26	; 0x0e
     a44:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a46:	6c 85       	ldd	r22, Y+12	; 0x0c
     a48:	7d 85       	ldd	r23, Y+13	; 0x0d
     a4a:	8e 85       	ldd	r24, Y+14	; 0x0e
     a4c:	9f 85       	ldd	r25, Y+15	; 0x0f
     a4e:	26 e6       	ldi	r18, 0x66	; 102
     a50:	36 e6       	ldi	r19, 0x66	; 102
     a52:	46 ee       	ldi	r20, 0xE6	; 230
     a54:	54 e4       	ldi	r21, 0x44	; 68
     a56:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	88 87       	std	Y+8, r24	; 0x08
     a60:	99 87       	std	Y+9, r25	; 0x09
     a62:	aa 87       	std	Y+10, r26	; 0x0a
     a64:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     a66:	68 85       	ldd	r22, Y+8	; 0x08
     a68:	79 85       	ldd	r23, Y+9	; 0x09
     a6a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e8       	ldi	r20, 0x80	; 128
     a74:	5f e3       	ldi	r21, 0x3F	; 63
     a76:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     a7a:	88 23       	and	r24, r24
     a7c:	2c f4       	brge	.+10     	; 0xa88 <RX_Mode+0x138>
		__ticks = 1;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	9f 83       	std	Y+7, r25	; 0x07
     a84:	8e 83       	std	Y+6, r24	; 0x06
     a86:	3f c0       	rjmp	.+126    	; 0xb06 <RX_Mode+0x1b6>
	else if (__tmp > 65535)
     a88:	68 85       	ldd	r22, Y+8	; 0x08
     a8a:	79 85       	ldd	r23, Y+9	; 0x09
     a8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	3f ef       	ldi	r19, 0xFF	; 255
     a94:	4f e7       	ldi	r20, 0x7F	; 127
     a96:	57 e4       	ldi	r21, 0x47	; 71
     a98:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     a9c:	18 16       	cp	r1, r24
     a9e:	4c f5       	brge	.+82     	; 0xaf2 <RX_Mode+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     aa0:	6c 85       	ldd	r22, Y+12	; 0x0c
     aa2:	7d 85       	ldd	r23, Y+13	; 0x0d
     aa4:	8e 85       	ldd	r24, Y+14	; 0x0e
     aa6:	9f 85       	ldd	r25, Y+15	; 0x0f
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e2       	ldi	r20, 0x20	; 32
     aae:	51 e4       	ldi	r21, 0x41	; 65
     ab0:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	bc 01       	movw	r22, r24
     aba:	cd 01       	movw	r24, r26
     abc:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	9f 83       	std	Y+7, r25	; 0x07
     ac6:	8e 83       	std	Y+6, r24	; 0x06
     ac8:	0f c0       	rjmp	.+30     	; 0xae8 <RX_Mode+0x198>
     aca:	88 eb       	ldi	r24, 0xB8	; 184
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9d 83       	std	Y+5, r25	; 0x05
     ad0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ad2:	8c 81       	ldd	r24, Y+4	; 0x04
     ad4:	9d 81       	ldd	r25, Y+5	; 0x05
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <RX_Mode+0x186>
     ada:	9d 83       	std	Y+5, r25	; 0x05
     adc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ade:	8e 81       	ldd	r24, Y+6	; 0x06
     ae0:	9f 81       	ldd	r25, Y+7	; 0x07
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	9f 83       	std	Y+7, r25	; 0x07
     ae6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ae8:	8e 81       	ldd	r24, Y+6	; 0x06
     aea:	9f 81       	ldd	r25, Y+7	; 0x07
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	69 f7       	brne	.-38     	; 0xaca <RX_Mode+0x17a>
     af0:	24 c0       	rjmp	.+72     	; 0xb3a <RX_Mode+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     af2:	68 85       	ldd	r22, Y+8	; 0x08
     af4:	79 85       	ldd	r23, Y+9	; 0x09
     af6:	8a 85       	ldd	r24, Y+10	; 0x0a
     af8:	9b 85       	ldd	r25, Y+11	; 0x0b
     afa:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	9f 83       	std	Y+7, r25	; 0x07
     b04:	8e 83       	std	Y+6, r24	; 0x06
     b06:	8e 81       	ldd	r24, Y+6	; 0x06
     b08:	9f 81       	ldd	r25, Y+7	; 0x07
     b0a:	9b 83       	std	Y+3, r25	; 0x03
     b0c:	8a 83       	std	Y+2, r24	; 0x02
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	9b 81       	ldd	r25, Y+3	; 0x03
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <RX_Mode+0x1c2>
     b16:	9b 83       	std	Y+3, r25	; 0x03
     b18:	8a 83       	std	Y+2, r24	; 0x02
     b1a:	0f c0       	rjmp	.+30     	; 0xb3a <RX_Mode+0x1ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b1c:	69 89       	ldd	r22, Y+17	; 0x11
     b1e:	7a 89       	ldd	r23, Y+18	; 0x12
     b20:	8b 89       	ldd	r24, Y+19	; 0x13
     b22:	9c 89       	ldd	r25, Y+20	; 0x14
     b24:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	88 8b       	std	Y+16, r24	; 0x10
     b2e:	88 89       	ldd	r24, Y+16	; 0x10
     b30:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	8a 95       	dec	r24
     b36:	f1 f7       	brne	.-4      	; 0xb34 <RX_Mode+0x1e4>
     b38:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
     b3a:	68 96       	adiw	r28, 0x18	; 24
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	cf 91       	pop	r28
     b48:	df 91       	pop	r29
     b4a:	08 95       	ret

00000b4c <TX_Mode>:

void TX_Mode(uint8_t * tx_buf)
{
     b4c:	df 93       	push	r29
     b4e:	cf 93       	push	r28
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	6a 97       	sbiw	r28, 0x1a	; 26
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	9a 8f       	std	Y+26, r25	; 0x1a
     b62:	89 8f       	std	Y+25, r24	; 0x19
	CE_0;
     b64:	a2 e3       	ldi	r26, 0x32	; 50
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e2 e3       	ldi	r30, 0x32	; 50
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	8c 93       	st	X, r24
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);     // Ð´Èë·¢ËÍµØÖ·
     b72:	25 e8       	ldi	r18, 0x85	; 133
     b74:	31 e0       	ldi	r19, 0x01	; 1
     b76:	80 e3       	ldi	r24, 0x30	; 48
     b78:	b9 01       	movw	r22, r18
     b7a:	45 e0       	ldi	r20, 0x05	; 5
     b7c:	0e 94 aa 01 	call	0x354	; 0x354 <SPI_Write_Buf>
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);  // ÎªÁËÓ¦´ð½ÓÊÕÉè±¸£¬½ÓÊÕÍ¨µÀ0µØÖ·ºÍ·¢ËÍµØÖ·ÏàÍ¬
     b80:	25 e8       	ldi	r18, 0x85	; 133
     b82:	31 e0       	ldi	r19, 0x01	; 1
     b84:	8a e2       	ldi	r24, 0x2A	; 42
     b86:	b9 01       	movw	r22, r18
     b88:	45 e0       	ldi	r20, 0x05	; 5
     b8a:	0e 94 aa 01 	call	0x354	; 0x354 <SPI_Write_Buf>
  	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); 			 // ×°ÔØÊý¾Ý
     b8e:	29 8d       	ldd	r18, Y+25	; 0x19
     b90:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b92:	80 ea       	ldi	r24, 0xA0	; 160
     b94:	b9 01       	movw	r22, r18
     b96:	40 e2       	ldi	r20, 0x20	; 32
     b98:	0e 94 aa 01 	call	0x354	; 0x354 <SPI_Write_Buf>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);       // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0×Ô¶¯Ó¦´ð
     b9c:	81 e2       	ldi	r24, 0x21	; 33
     b9e:	6f e3       	ldi	r22, 0x3F	; 63
     ba0:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f);   // Ê¹ÄÜ½ÓÊÕÍ¨µÀ0
     ba4:	82 e2       	ldi	r24, 0x22	; 34
     ba6:	6f e3       	ldi	r22, 0x3F	; 63
     ba8:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x0a);  // ×Ô¶¯ÖØ·¢ÑÓÊ±µÈ´ý250us+86us£¬×Ô¶¯ÖØ·¢10´Î
     bac:	84 e2       	ldi	r24, 0x24	; 36
     bae:	6a e0       	ldi	r22, 0x0A	; 10
     bb0:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40);         // Ñ¡ÔñÉäÆµÍ¨µÀ0x40
     bb4:	85 e2       	ldi	r24, 0x25	; 37
     bb6:	68 e2       	ldi	r22, 0x28	; 40
     bb8:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07);    // Êý¾Ý´«ÊäÂÊ1Mbps£¬·¢Éä¹¦ÂÊ0dBm£¬µÍÔëÉù·Å´óÆ÷ÔöÒæ
     bbc:	86 e2       	ldi	r24, 0x26	; 38
     bbe:	67 e0       	ldi	r22, 0x07	; 7
     bc0:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH);  // ½ÓÊÕÍ¨µÀ0Ñ¡ÔñºÍ·¢ËÍÍ¨µÀÏàÍ¬ÓÐÐ§Êý¾Ý¿í¶È
     bc4:	81 e3       	ldi	r24, 0x31	; 49
     bc6:	60 e2       	ldi	r22, 0x20	; 32
     bc8:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e);      // CRCÊ¹ÄÜ£¬16Î»CRCÐ£Ñé£¬ÉÏµç
     bcc:	80 e2       	ldi	r24, 0x20	; 32
     bce:	6e e0       	ldi	r22, 0x0E	; 14
     bd0:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
	CE_1;
     bd4:	a2 e3       	ldi	r26, 0x32	; 50
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e2 e3       	ldi	r30, 0x32	; 50
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	80 68       	ori	r24, 0x80	; 128
     be0:	8c 93       	st	X, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	a0 e2       	ldi	r26, 0x20	; 32
     be8:	b1 e4       	ldi	r27, 0x41	; 65
     bea:	8d 8b       	std	Y+21, r24	; 0x15
     bec:	9e 8b       	std	Y+22, r25	; 0x16
     bee:	af 8b       	std	Y+23, r26	; 0x17
     bf0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     bf2:	6d 89       	ldd	r22, Y+21	; 0x15
     bf4:	7e 89       	ldd	r23, Y+22	; 0x16
     bf6:	8f 89       	ldd	r24, Y+23	; 0x17
     bf8:	98 8d       	ldd	r25, Y+24	; 0x18
     bfa:	22 e5       	ldi	r18, 0x52	; 82
     bfc:	39 e4       	ldi	r19, 0x49	; 73
     bfe:	4d e1       	ldi	r20, 0x1D	; 29
     c00:	50 e4       	ldi	r21, 0x40	; 64
     c02:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	89 8b       	std	Y+17, r24	; 0x11
     c0c:	9a 8b       	std	Y+18, r25	; 0x12
     c0e:	ab 8b       	std	Y+19, r26	; 0x13
     c10:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     c12:	69 89       	ldd	r22, Y+17	; 0x11
     c14:	7a 89       	ldd	r23, Y+18	; 0x12
     c16:	8b 89       	ldd	r24, Y+19	; 0x13
     c18:	9c 89       	ldd	r25, Y+20	; 0x14
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e8       	ldi	r20, 0x80	; 128
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     c26:	88 23       	and	r24, r24
     c28:	1c f4       	brge	.+6      	; 0xc30 <TX_Mode+0xe4>
		__ticks = 1;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	88 8b       	std	Y+16, r24	; 0x10
     c2e:	91 c0       	rjmp	.+290    	; 0xd52 <TX_Mode+0x206>
	else if (__tmp > 255)
     c30:	69 89       	ldd	r22, Y+17	; 0x11
     c32:	7a 89       	ldd	r23, Y+18	; 0x12
     c34:	8b 89       	ldd	r24, Y+19	; 0x13
     c36:	9c 89       	ldd	r25, Y+20	; 0x14
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	4f e7       	ldi	r20, 0x7F	; 127
     c3e:	53 e4       	ldi	r21, 0x43	; 67
     c40:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     c44:	18 16       	cp	r1, r24
     c46:	0c f0       	brlt	.+2      	; 0xc4a <TX_Mode+0xfe>
     c48:	7b c0       	rjmp	.+246    	; 0xd40 <TX_Mode+0x1f4>
	{
		_delay_ms(__us / 1000.0);
     c4a:	6d 89       	ldd	r22, Y+21	; 0x15
     c4c:	7e 89       	ldd	r23, Y+22	; 0x16
     c4e:	8f 89       	ldd	r24, Y+23	; 0x17
     c50:	98 8d       	ldd	r25, Y+24	; 0x18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4a e7       	ldi	r20, 0x7A	; 122
     c58:	54 e4       	ldi	r21, 0x44	; 68
     c5a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	8c 87       	std	Y+12, r24	; 0x0c
     c64:	9d 87       	std	Y+13, r25	; 0x0d
     c66:	ae 87       	std	Y+14, r26	; 0x0e
     c68:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6a:	6c 85       	ldd	r22, Y+12	; 0x0c
     c6c:	7d 85       	ldd	r23, Y+13	; 0x0d
     c6e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c70:	9f 85       	ldd	r25, Y+15	; 0x0f
     c72:	26 e6       	ldi	r18, 0x66	; 102
     c74:	36 e6       	ldi	r19, 0x66	; 102
     c76:	46 ee       	ldi	r20, 0xE6	; 230
     c78:	54 e4       	ldi	r21, 0x44	; 68
     c7a:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	88 87       	std	Y+8, r24	; 0x08
     c84:	99 87       	std	Y+9, r25	; 0x09
     c86:	aa 87       	std	Y+10, r26	; 0x0a
     c88:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     c8a:	68 85       	ldd	r22, Y+8	; 0x08
     c8c:	79 85       	ldd	r23, Y+9	; 0x09
     c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     c90:	9b 85       	ldd	r25, Y+11	; 0x0b
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	2c f4       	brge	.+10     	; 0xcac <TX_Mode+0x160>
		__ticks = 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	9f 83       	std	Y+7, r25	; 0x07
     ca8:	8e 83       	std	Y+6, r24	; 0x06
     caa:	3f c0       	rjmp	.+126    	; 0xd2a <TX_Mode+0x1de>
	else if (__tmp > 65535)
     cac:	68 85       	ldd	r22, Y+8	; 0x08
     cae:	79 85       	ldd	r23, Y+9	; 0x09
     cb0:	8a 85       	ldd	r24, Y+10	; 0x0a
     cb2:	9b 85       	ldd	r25, Y+11	; 0x0b
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	3f ef       	ldi	r19, 0xFF	; 255
     cb8:	4f e7       	ldi	r20, 0x7F	; 127
     cba:	57 e4       	ldi	r21, 0x47	; 71
     cbc:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     cc0:	18 16       	cp	r1, r24
     cc2:	4c f5       	brge	.+82     	; 0xd16 <TX_Mode+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc4:	6c 85       	ldd	r22, Y+12	; 0x0c
     cc6:	7d 85       	ldd	r23, Y+13	; 0x0d
     cc8:	8e 85       	ldd	r24, Y+14	; 0x0e
     cca:	9f 85       	ldd	r25, Y+15	; 0x0f
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e2       	ldi	r20, 0x20	; 32
     cd2:	51 e4       	ldi	r21, 0x41	; 65
     cd4:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	bc 01       	movw	r22, r24
     cde:	cd 01       	movw	r24, r26
     ce0:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	9f 83       	std	Y+7, r25	; 0x07
     cea:	8e 83       	std	Y+6, r24	; 0x06
     cec:	0f c0       	rjmp	.+30     	; 0xd0c <TX_Mode+0x1c0>
     cee:	88 eb       	ldi	r24, 0xB8	; 184
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9d 83       	std	Y+5, r25	; 0x05
     cf4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cf6:	8c 81       	ldd	r24, Y+4	; 0x04
     cf8:	9d 81       	ldd	r25, Y+5	; 0x05
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <TX_Mode+0x1ae>
     cfe:	9d 83       	std	Y+5, r25	; 0x05
     d00:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d02:	8e 81       	ldd	r24, Y+6	; 0x06
     d04:	9f 81       	ldd	r25, Y+7	; 0x07
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	9f 83       	std	Y+7, r25	; 0x07
     d0a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0c:	8e 81       	ldd	r24, Y+6	; 0x06
     d0e:	9f 81       	ldd	r25, Y+7	; 0x07
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	69 f7       	brne	.-38     	; 0xcee <TX_Mode+0x1a2>
     d14:	24 c0       	rjmp	.+72     	; 0xd5e <TX_Mode+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d16:	68 85       	ldd	r22, Y+8	; 0x08
     d18:	79 85       	ldd	r23, Y+9	; 0x09
     d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d1e:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	9f 83       	std	Y+7, r25	; 0x07
     d28:	8e 83       	std	Y+6, r24	; 0x06
     d2a:	8e 81       	ldd	r24, Y+6	; 0x06
     d2c:	9f 81       	ldd	r25, Y+7	; 0x07
     d2e:	9b 83       	std	Y+3, r25	; 0x03
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	9b 81       	ldd	r25, Y+3	; 0x03
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <TX_Mode+0x1ea>
     d3a:	9b 83       	std	Y+3, r25	; 0x03
     d3c:	8a 83       	std	Y+2, r24	; 0x02
     d3e:	0f c0       	rjmp	.+30     	; 0xd5e <TX_Mode+0x212>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d40:	69 89       	ldd	r22, Y+17	; 0x11
     d42:	7a 89       	ldd	r23, Y+18	; 0x12
     d44:	8b 89       	ldd	r24, Y+19	; 0x13
     d46:	9c 89       	ldd	r25, Y+20	; 0x14
     d48:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	88 8b       	std	Y+16, r24	; 0x10
     d52:	88 89       	ldd	r24, Y+16	; 0x10
     d54:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	8a 95       	dec	r24
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <TX_Mode+0x20c>
     d5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
} 
     d5e:	6a 96       	adiw	r28, 0x1a	; 26
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <nRF24L01_Initial>:

void nRF24L01_Initial(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
/* IRQ(PB4)   CSN(PD6)   CE(PD7) */
/* MISO(PB3)  MOSI(PB2)  SCK(PB1) SS(PB0) */

	DDRB |= (1<<1) | (1<<2) | (1<<0) ;        // ->output
     d78:	a7 e3       	ldi	r26, 0x37	; 55
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e7 e3       	ldi	r30, 0x37	; 55
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	87 60       	ori	r24, 0x07	; 7
     d84:	8c 93       	st	X, r24
	DDRB &= ~((1<<4)|(1<<3));
     d86:	a7 e3       	ldi	r26, 0x37	; 55
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e7 e3       	ldi	r30, 0x37	; 55
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	87 7e       	andi	r24, 0xE7	; 231
     d92:	8c 93       	st	X, r24
	PORTB |=  (1<<3) |(1<<4) |(1<<2) |(1<<1);
     d94:	a8 e3       	ldi	r26, 0x38	; 56
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e8 e3       	ldi	r30, 0x38	; 56
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	8e 61       	ori	r24, 0x1E	; 30
     da0:	8c 93       	st	X, r24
	PORTB &= ~(1<<0);
     da2:	a8 e3       	ldi	r26, 0x38	; 56
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e8 e3       	ldi	r30, 0x38	; 56
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8e 7f       	andi	r24, 0xFE	; 254
     dae:	8c 93       	st	X, r24

	DDRD |= (1<<6) | (1<<7);
     db0:	a1 e3       	ldi	r26, 0x31	; 49
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	e1 e3       	ldi	r30, 0x31	; 49
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 6c       	ori	r24, 0xC0	; 192
     dbc:	8c 93       	st	X, r24
	PORTD |=  (1<<6) |(1<<7);
     dbe:	a2 e3       	ldi	r26, 0x32	; 50
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e2 e3       	ldi	r30, 0x32	; 50
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	80 6c       	ori	r24, 0xC0	; 192
     dca:	8c 93       	st	X, r24
//    while(1);
//	SPCR = 0X5E;
//    SPSR=0x00;
	SPCR=0x50;          //Ê¹ÄÜSPI £¬ ÉèÖÃSPIÎªÖ÷Ä£Ê½£¬¿ÕÏÐÊ±CLIÎª1£¬µÚÒ»¸öÉÏÉýÑØ²É¼¯Êý¾Ý£¬Ê±ÖÓ    FOSC/16
     dcc:	ed e2       	ldi	r30, 0x2D	; 45
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 e5       	ldi	r24, 0x50	; 80
     dd2:	80 83       	st	Z, r24
	SPSR=0x00;			//setup SPI
     dd4:	ee e2       	ldi	r30, 0x2E	; 46
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	10 82       	st	Z, r1
	
	 
 	CSN_1;
     dda:	a2 e3       	ldi	r26, 0x32	; 50
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e2 e3       	ldi	r30, 0x32	; 50
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 64       	ori	r24, 0x40	; 64
     de6:	8c 93       	st	X, r24
	CE_0; 
     de8:	a2 e3       	ldi	r26, 0x32	; 50
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e2 e3       	ldi	r30, 0x32	; 50
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8f 77       	andi	r24, 0x7F	; 127
     df4:	8c 93       	st	X, r24
}
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <nRF24L01_Config>:


/****************** ÅäÖÃº¯Êý********************************/
void nRF24L01_Config(void)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62

	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // Set PWR_UP bit, enable CRC(2 bytes) &Prim:RX. RX_DR enabled..
     e04:	80 e2       	ldi	r24, 0x20	; 32
     e06:	6e e0       	ldi	r22, 0x0E	; 14
     e08:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);
     e0c:	81 e2       	ldi	r24, 0x21	; 33
     e0e:	6f e3       	ldi	r22, 0x3F	; 63
     e10:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // Enable Pipe0
     e14:	82 e2       	ldi	r24, 0x22	; 34
     e16:	6f e3       	ldi	r22, 0x3F	; 63
     e18:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_AW, 0x02); // Setup address width=5 bytes
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40);
     e1c:	85 e2       	ldi	r24, 0x25	; 37
     e1e:	68 e2       	ldi	r22, 0x28	; 40
     e20:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP,0x07); // TX_PWR:0dBm, Datarate:2Mbps,
     e24:	86 e2       	ldi	r24, 0x26	; 38
     e26:	67 e0       	ldi	r22, 0x07	; 7
     e28:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
}
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <NRF24L01_Send>:
 
void NRF24L01_Send(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	69 97       	sbiw	r28, 0x19	; 25
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
    uint8_t status=0x00;
     e46:	19 8e       	std	Y+25, r1	; 0x19
	


	CE_0;
     e48:	a2 e3       	ldi	r26, 0x32	; 50
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8f 77       	andi	r24, 0x7F	; 127
     e54:	8c 93       	st	X, r24
	TX_Mode(TX_BUF);
     e56:	82 e5       	ldi	r24, 0x52	; 82
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <TX_Mode>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	a0 e2       	ldi	r26, 0x20	; 32
     e64:	b1 e4       	ldi	r27, 0x41	; 65
     e66:	8d 8b       	std	Y+21, r24	; 0x15
     e68:	9e 8b       	std	Y+22, r25	; 0x16
     e6a:	af 8b       	std	Y+23, r26	; 0x17
     e6c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e6e:	6d 89       	ldd	r22, Y+21	; 0x15
     e70:	7e 89       	ldd	r23, Y+22	; 0x16
     e72:	8f 89       	ldd	r24, Y+23	; 0x17
     e74:	98 8d       	ldd	r25, Y+24	; 0x18
     e76:	22 e5       	ldi	r18, 0x52	; 82
     e78:	39 e4       	ldi	r19, 0x49	; 73
     e7a:	4d e1       	ldi	r20, 0x1D	; 29
     e7c:	50 e4       	ldi	r21, 0x40	; 64
     e7e:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	89 8b       	std	Y+17, r24	; 0x11
     e88:	9a 8b       	std	Y+18, r25	; 0x12
     e8a:	ab 8b       	std	Y+19, r26	; 0x13
     e8c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e8e:	69 89       	ldd	r22, Y+17	; 0x11
     e90:	7a 89       	ldd	r23, Y+18	; 0x12
     e92:	8b 89       	ldd	r24, Y+19	; 0x13
     e94:	9c 89       	ldd	r25, Y+20	; 0x14
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	1c f4       	brge	.+6      	; 0xeac <NRF24L01_Send+0x7a>
		__ticks = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	88 8b       	std	Y+16, r24	; 0x10
     eaa:	91 c0       	rjmp	.+290    	; 0xfce <NRF24L01_Send+0x19c>
	else if (__tmp > 255)
     eac:	69 89       	ldd	r22, Y+17	; 0x11
     eae:	7a 89       	ldd	r23, Y+18	; 0x12
     eb0:	8b 89       	ldd	r24, Y+19	; 0x13
     eb2:	9c 89       	ldd	r25, Y+20	; 0x14
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	53 e4       	ldi	r21, 0x43	; 67
     ebc:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     ec0:	18 16       	cp	r1, r24
     ec2:	0c f0       	brlt	.+2      	; 0xec6 <NRF24L01_Send+0x94>
     ec4:	7b c0       	rjmp	.+246    	; 0xfbc <NRF24L01_Send+0x18a>
	{
		_delay_ms(__us / 1000.0);
     ec6:	6d 89       	ldd	r22, Y+21	; 0x15
     ec8:	7e 89       	ldd	r23, Y+22	; 0x16
     eca:	8f 89       	ldd	r24, Y+23	; 0x17
     ecc:	98 8d       	ldd	r25, Y+24	; 0x18
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a e7       	ldi	r20, 0x7A	; 122
     ed4:	54 e4       	ldi	r21, 0x44	; 68
     ed6:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8c 87       	std	Y+12, r24	; 0x0c
     ee0:	9d 87       	std	Y+13, r25	; 0x0d
     ee2:	ae 87       	std	Y+14, r26	; 0x0e
     ee4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee6:	6c 85       	ldd	r22, Y+12	; 0x0c
     ee8:	7d 85       	ldd	r23, Y+13	; 0x0d
     eea:	8e 85       	ldd	r24, Y+14	; 0x0e
     eec:	9f 85       	ldd	r25, Y+15	; 0x0f
     eee:	26 e6       	ldi	r18, 0x66	; 102
     ef0:	36 e6       	ldi	r19, 0x66	; 102
     ef2:	46 ee       	ldi	r20, 0xE6	; 230
     ef4:	54 e4       	ldi	r21, 0x44	; 68
     ef6:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	88 87       	std	Y+8, r24	; 0x08
     f00:	99 87       	std	Y+9, r25	; 0x09
     f02:	aa 87       	std	Y+10, r26	; 0x0a
     f04:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f06:	68 85       	ldd	r22, Y+8	; 0x08
     f08:	79 85       	ldd	r23, Y+9	; 0x09
     f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e8       	ldi	r20, 0x80	; 128
     f14:	5f e3       	ldi	r21, 0x3F	; 63
     f16:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
     f1a:	88 23       	and	r24, r24
     f1c:	2c f4       	brge	.+10     	; 0xf28 <NRF24L01_Send+0xf6>
		__ticks = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9f 83       	std	Y+7, r25	; 0x07
     f24:	8e 83       	std	Y+6, r24	; 0x06
     f26:	3f c0       	rjmp	.+126    	; 0xfa6 <NRF24L01_Send+0x174>
	else if (__tmp > 65535)
     f28:	68 85       	ldd	r22, Y+8	; 0x08
     f2a:	79 85       	ldd	r23, Y+9	; 0x09
     f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f2e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	3f ef       	ldi	r19, 0xFF	; 255
     f34:	4f e7       	ldi	r20, 0x7F	; 127
     f36:	57 e4       	ldi	r21, 0x47	; 71
     f38:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
     f3c:	18 16       	cp	r1, r24
     f3e:	4c f5       	brge	.+82     	; 0xf92 <NRF24L01_Send+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f40:	6c 85       	ldd	r22, Y+12	; 0x0c
     f42:	7d 85       	ldd	r23, Y+13	; 0x0d
     f44:	8e 85       	ldd	r24, Y+14	; 0x0e
     f46:	9f 85       	ldd	r25, Y+15	; 0x0f
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e2       	ldi	r20, 0x20	; 32
     f4e:	51 e4       	ldi	r21, 0x41	; 65
     f50:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	9f 83       	std	Y+7, r25	; 0x07
     f66:	8e 83       	std	Y+6, r24	; 0x06
     f68:	0f c0       	rjmp	.+30     	; 0xf88 <NRF24L01_Send+0x156>
     f6a:	88 eb       	ldi	r24, 0xB8	; 184
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	9d 83       	std	Y+5, r25	; 0x05
     f70:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <NRF24L01_Send+0x144>
     f7a:	9d 83       	std	Y+5, r25	; 0x05
     f7c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	9f 81       	ldd	r25, Y+7	; 0x07
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	9f 83       	std	Y+7, r25	; 0x07
     f86:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f88:	8e 81       	ldd	r24, Y+6	; 0x06
     f8a:	9f 81       	ldd	r25, Y+7	; 0x07
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	69 f7       	brne	.-38     	; 0xf6a <NRF24L01_Send+0x138>
     f90:	24 c0       	rjmp	.+72     	; 0xfda <NRF24L01_Send+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f92:	68 85       	ldd	r22, Y+8	; 0x08
     f94:	79 85       	ldd	r23, Y+9	; 0x09
     f96:	8a 85       	ldd	r24, Y+10	; 0x0a
     f98:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9a:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9f 83       	std	Y+7, r25	; 0x07
     fa4:	8e 83       	std	Y+6, r24	; 0x06
     fa6:	8e 81       	ldd	r24, Y+6	; 0x06
     fa8:	9f 81       	ldd	r25, Y+7	; 0x07
     faa:	9b 83       	std	Y+3, r25	; 0x03
     fac:	8a 83       	std	Y+2, r24	; 0x02
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <NRF24L01_Send+0x180>
     fb6:	9b 83       	std	Y+3, r25	; 0x03
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	0f c0       	rjmp	.+30     	; 0xfda <NRF24L01_Send+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fbc:	69 89       	ldd	r22, Y+17	; 0x11
     fbe:	7a 89       	ldd	r23, Y+18	; 0x12
     fc0:	8b 89       	ldd	r24, Y+19	; 0x13
     fc2:	9c 89       	ldd	r25, Y+20	; 0x14
     fc4:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	88 8b       	std	Y+16, r24	; 0x10
     fce:	88 89       	ldd	r24, Y+16	; 0x10
     fd0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	8a 95       	dec	r24
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <NRF24L01_Send+0x1a2>
     fd8:	89 83       	std	Y+1, r24	; 0x01
//	while(IRQ);
	_delay_us(10);
	status=SPI_Read_Reg(STATUS);	// ¶ÁÈ¡×´Ì¬¼Ä´æÆäÀ´ÅÐ¶ÏÊý¾Ý½ÓÊÕ×´¿ö
     fda:	87 e0       	ldi	r24, 0x07	; 7
     fdc:	0e 94 48 01 	call	0x290	; 0x290 <SPI_Read_Reg>
     fe0:	89 8f       	std	Y+25, r24	; 0x19
	printf("STATUS=0x%2x\r\n",status);
     fe2:	89 8d       	ldd	r24, Y+25	; 0x19
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	00 d0       	rcall	.+0      	; 0xfea <NRF24L01_Send+0x1b8>
     fea:	00 d0       	rcall	.+0      	; 0xfec <NRF24L01_Send+0x1ba>
     fec:	ed b7       	in	r30, 0x3d	; 61
     fee:	fe b7       	in	r31, 0x3e	; 62
     ff0:	31 96       	adiw	r30, 0x01	; 1
     ff2:	82 ea       	ldi	r24, 0xA2	; 162
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	91 83       	std	Z+1, r25	; 0x01
     ff8:	80 83       	st	Z, r24
     ffa:	33 83       	std	Z+3, r19	; 0x03
     ffc:	22 83       	std	Z+2, r18	; 0x02
     ffe:	0e 94 54 10 	call	0x20a8	; 0x20a8 <printf>
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
	if(status&TX_DS)	/*tx_ds == 0x20*/
    100a:	89 8d       	ldd	r24, Y+25	; 0x19
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	80 72       	andi	r24, 0x20	; 32
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	e9 f0       	breq	.+58     	; 0x1052 <NRF24L01_Send+0x220>
	{
		printf("STATUS=0x%x\r\n",status);
    1018:	89 8d       	ldd	r24, Y+25	; 0x19
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	00 d0       	rcall	.+0      	; 0x1020 <NRF24L01_Send+0x1ee>
    1020:	00 d0       	rcall	.+0      	; 0x1022 <NRF24L01_Send+0x1f0>
    1022:	ed b7       	in	r30, 0x3d	; 61
    1024:	fe b7       	in	r31, 0x3e	; 62
    1026:	31 96       	adiw	r30, 0x01	; 1
    1028:	81 eb       	ldi	r24, 0xB1	; 177
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	80 83       	st	Z, r24
    1030:	33 83       	std	Z+3, r19	; 0x03
    1032:	22 83       	std	Z+2, r18	; 0x02
    1034:	0e 94 54 10 	call	0x20a8	; 0x20a8 <printf>
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
		printf("XXXXXX!!\r\n");	
    1040:	8f eb       	ldi	r24, 0xBF	; 191
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	0e 94 66 10 	call	0x20cc	; 0x20cc <puts>
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x20);      // Çå³ýTX£¬ÈÃIRQÀ­µÍ£»	
    1048:	87 e2       	ldi	r24, 0x27	; 39
    104a:	60 e2       	ldi	r22, 0x20	; 32
    104c:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <NRF24L01_Send+0x23e>
	}
	else if(status&MAX_RT)  /* status = 0x10*/
    1052:	89 8d       	ldd	r24, Y+25	; 0x19
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 71       	andi	r24, 0x10	; 16
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	41 f0       	breq	.+16     	; 0x1070 <NRF24L01_Send+0x23e>
		{
			printf("Send to achieve maximum number of sending!!\r\n");	
    1060:	89 ec       	ldi	r24, 0xC9	; 201
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	0e 94 66 10 	call	0x20cc	; 0x20cc <puts>
			SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x10);      // Çå³ýTX£¬ÈÃIRQÀ­µÍ£»			
    1068:	87 e2       	ldi	r24, 0x27	; 39
    106a:	60 e1       	ldi	r22, 0x10	; 16
    106c:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
		}
	CE_1;
    1070:	a2 e3       	ldi	r26, 0x32	; 50
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e2 e3       	ldi	r30, 0x32	; 50
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 68       	ori	r24, 0x80	; 128
    107c:	8c 93       	st	X, r24
}
    107e:	69 96       	adiw	r28, 0x19	; 25
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <NRF24L01_Receive>:

void NRF24L01_Receive(void)
{   
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	69 97       	sbiw	r28, 0x19	; 25
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    uint8_t status=0x01;  
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	89 8f       	std	Y+25, r24	; 0x19
	RX_Mode();
    10a8:	0e 94 a8 04 	call	0x950	; 0x950 <RX_Mode>
	while(IRQ);
    10ac:	e6 e3       	ldi	r30, 0x36	; 54
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	80 71       	andi	r24, 0x10	; 16
    10b8:	90 70       	andi	r25, 0x00	; 0
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	b9 f7       	brne	.-18     	; 0x10ac <NRF24L01_Receive+0x1c>
	CE_0;
    10be:	a2 e3       	ldi	r26, 0x32	; 50
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e2 e3       	ldi	r30, 0x32	; 50
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8f 77       	andi	r24, 0x7F	; 127
    10ca:	8c 93       	st	X, r24
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a0 e2       	ldi	r26, 0x20	; 32
    10d2:	b1 e4       	ldi	r27, 0x41	; 65
    10d4:	8d 8b       	std	Y+21, r24	; 0x15
    10d6:	9e 8b       	std	Y+22, r25	; 0x16
    10d8:	af 8b       	std	Y+23, r26	; 0x17
    10da:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10dc:	6d 89       	ldd	r22, Y+21	; 0x15
    10de:	7e 89       	ldd	r23, Y+22	; 0x16
    10e0:	8f 89       	ldd	r24, Y+23	; 0x17
    10e2:	98 8d       	ldd	r25, Y+24	; 0x18
    10e4:	22 e5       	ldi	r18, 0x52	; 82
    10e6:	39 e4       	ldi	r19, 0x49	; 73
    10e8:	4d e1       	ldi	r20, 0x1D	; 29
    10ea:	50 e4       	ldi	r21, 0x40	; 64
    10ec:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	89 8b       	std	Y+17, r24	; 0x11
    10f6:	9a 8b       	std	Y+18, r25	; 0x12
    10f8:	ab 8b       	std	Y+19, r26	; 0x13
    10fa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10fc:	69 89       	ldd	r22, Y+17	; 0x11
    10fe:	7a 89       	ldd	r23, Y+18	; 0x12
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
    1110:	88 23       	and	r24, r24
    1112:	1c f4       	brge	.+6      	; 0x111a <__stack+0x1b>
		__ticks = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	88 8b       	std	Y+16, r24	; 0x10
    1118:	91 c0       	rjmp	.+290    	; 0x123c <__stack+0x13d>
	else if (__tmp > 255)
    111a:	69 89       	ldd	r22, Y+17	; 0x11
    111c:	7a 89       	ldd	r23, Y+18	; 0x12
    111e:	8b 89       	ldd	r24, Y+19	; 0x13
    1120:	9c 89       	ldd	r25, Y+20	; 0x14
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	53 e4       	ldi	r21, 0x43	; 67
    112a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
    112e:	18 16       	cp	r1, r24
    1130:	0c f0       	brlt	.+2      	; 0x1134 <__stack+0x35>
    1132:	7b c0       	rjmp	.+246    	; 0x122a <__stack+0x12b>
	{
		_delay_ms(__us / 1000.0);
    1134:	6d 89       	ldd	r22, Y+21	; 0x15
    1136:	7e 89       	ldd	r23, Y+22	; 0x16
    1138:	8f 89       	ldd	r24, Y+23	; 0x17
    113a:	98 8d       	ldd	r25, Y+24	; 0x18
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	4a e7       	ldi	r20, 0x7A	; 122
    1142:	54 e4       	ldi	r21, 0x44	; 68
    1144:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__divsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	8c 87       	std	Y+12, r24	; 0x0c
    114e:	9d 87       	std	Y+13, r25	; 0x0d
    1150:	ae 87       	std	Y+14, r26	; 0x0e
    1152:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1154:	6c 85       	ldd	r22, Y+12	; 0x0c
    1156:	7d 85       	ldd	r23, Y+13	; 0x0d
    1158:	8e 85       	ldd	r24, Y+14	; 0x0e
    115a:	9f 85       	ldd	r25, Y+15	; 0x0f
    115c:	26 e6       	ldi	r18, 0x66	; 102
    115e:	36 e6       	ldi	r19, 0x66	; 102
    1160:	46 ee       	ldi	r20, 0xE6	; 230
    1162:	54 e4       	ldi	r21, 0x44	; 68
    1164:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	88 87       	std	Y+8, r24	; 0x08
    116e:	99 87       	std	Y+9, r25	; 0x09
    1170:	aa 87       	std	Y+10, r26	; 0x0a
    1172:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1174:	68 85       	ldd	r22, Y+8	; 0x08
    1176:	79 85       	ldd	r23, Y+9	; 0x09
    1178:	8a 85       	ldd	r24, Y+10	; 0x0a
    117a:	9b 85       	ldd	r25, Y+11	; 0x0b
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e8       	ldi	r20, 0x80	; 128
    1182:	5f e3       	ldi	r21, 0x3F	; 63
    1184:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__ltsf2>
    1188:	88 23       	and	r24, r24
    118a:	2c f4       	brge	.+10     	; 0x1196 <__stack+0x97>
		__ticks = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9f 83       	std	Y+7, r25	; 0x07
    1192:	8e 83       	std	Y+6, r24	; 0x06
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <__stack+0x115>
	else if (__tmp > 65535)
    1196:	68 85       	ldd	r22, Y+8	; 0x08
    1198:	79 85       	ldd	r23, Y+9	; 0x09
    119a:	8a 85       	ldd	r24, Y+10	; 0x0a
    119c:	9b 85       	ldd	r25, Y+11	; 0x0b
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	3f ef       	ldi	r19, 0xFF	; 255
    11a2:	4f e7       	ldi	r20, 0x7F	; 127
    11a4:	57 e4       	ldi	r21, 0x47	; 71
    11a6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__gtsf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	4c f5       	brge	.+82     	; 0x1200 <__stack+0x101>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    11b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    11b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    11b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e2       	ldi	r20, 0x20	; 32
    11bc:	51 e4       	ldi	r21, 0x41	; 65
    11be:	0e 94 ed 0b 	call	0x17da	; 0x17da <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9f 83       	std	Y+7, r25	; 0x07
    11d4:	8e 83       	std	Y+6, r24	; 0x06
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <__stack+0xf7>
    11d8:	88 eb       	ldi	r24, 0xB8	; 184
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9d 83       	std	Y+5, r25	; 0x05
    11de:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <__stack+0xe5>
    11e8:	9d 83       	std	Y+5, r25	; 0x05
    11ea:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ec:	8e 81       	ldd	r24, Y+6	; 0x06
    11ee:	9f 81       	ldd	r25, Y+7	; 0x07
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9f 83       	std	Y+7, r25	; 0x07
    11f4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	8e 81       	ldd	r24, Y+6	; 0x06
    11f8:	9f 81       	ldd	r25, Y+7	; 0x07
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <__stack+0xd9>
    11fe:	24 c0       	rjmp	.+72     	; 0x1248 <__stack+0x149>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1200:	68 85       	ldd	r22, Y+8	; 0x08
    1202:	79 85       	ldd	r23, Y+9	; 0x09
    1204:	8a 85       	ldd	r24, Y+10	; 0x0a
    1206:	9b 85       	ldd	r25, Y+11	; 0x0b
    1208:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9f 83       	std	Y+7, r25	; 0x07
    1212:	8e 83       	std	Y+6, r24	; 0x06
    1214:	8e 81       	ldd	r24, Y+6	; 0x06
    1216:	9f 81       	ldd	r25, Y+7	; 0x07
    1218:	9b 83       	std	Y+3, r25	; 0x03
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	9b 81       	ldd	r25, Y+3	; 0x03
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <__stack+0x121>
    1224:	9b 83       	std	Y+3, r25	; 0x03
    1226:	8a 83       	std	Y+2, r24	; 0x02
    1228:	0f c0       	rjmp	.+30     	; 0x1248 <__stack+0x149>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    122a:	69 89       	ldd	r22, Y+17	; 0x11
    122c:	7a 89       	ldd	r23, Y+18	; 0x12
    122e:	8b 89       	ldd	r24, Y+19	; 0x13
    1230:	9c 89       	ldd	r25, Y+20	; 0x14
    1232:	0e 94 17 0a 	call	0x142e	; 0x142e <__fixunssfsi>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	88 8b       	std	Y+16, r24	; 0x10
    123c:	88 89       	ldd	r24, Y+16	; 0x10
    123e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	8a 95       	dec	r24
    1244:	f1 f7       	brne	.-4      	; 0x1242 <__stack+0x143>
    1246:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	status=SPI_Read_Reg(STATUS);					    	// ¶ÁÈ¡×´Ì¬¼Ä´æÆäÀ´ÅÐ¶ÏÊý¾Ý½ÓÊÕ×´¿ö
    1248:	87 e0       	ldi	r24, 0x07	; 7
    124a:	0e 94 48 01 	call	0x290	; 0x290 <SPI_Read_Reg>
    124e:	89 8f       	std	Y+25, r24	; 0x19
	printf("STATUS=£º0x%x\r\n",status);
    1250:	89 8d       	ldd	r24, Y+25	; 0x19
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	00 d0       	rcall	.+0      	; 0x1258 <__stack+0x159>
    1258:	00 d0       	rcall	.+0      	; 0x125a <__stack+0x15b>
    125a:	ed b7       	in	r30, 0x3d	; 61
    125c:	fe b7       	in	r31, 0x3e	; 62
    125e:	31 96       	adiw	r30, 0x01	; 1
    1260:	86 ef       	ldi	r24, 0xF6	; 246
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	91 83       	std	Z+1, r25	; 0x01
    1266:	80 83       	st	Z, r24
    1268:	33 83       	std	Z+3, r19	; 0x03
    126a:	22 83       	std	Z+2, r18	; 0x02
    126c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <printf>
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
	if(status & 0x40)								        //½ÓÊÜÖÐ¶Ï±êÖ¾Î»
    1278:	89 8d       	ldd	r24, Y+25	; 0x19
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	80 74       	andi	r24, 0x40	; 64
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	01 f1       	breq	.+64     	; 0x12c6 <__stack+0x1c7>
	{
		SPI_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);    // read receive payload from RX_FIFO buffer
    1286:	22 e3       	ldi	r18, 0x32	; 50
    1288:	32 e0       	ldi	r19, 0x02	; 2
    128a:	81 e6       	ldi	r24, 0x61	; 97
    128c:	b9 01       	movw	r22, r18
    128e:	40 e2       	ldi	r20, 0x20	; 32
    1290:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SPI_Read_Buf>
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x40);      // Çå³ýTX£¬ÈÃIRQÀ­µÍ
    1294:	87 e2       	ldi	r24, 0x27	; 39
    1296:	60 e4       	ldi	r22, 0x40	; 64
    1298:	0e 94 24 01 	call	0x248	; 0x248 <SPI_RW_Reg>
		printf("Receiving data:0x%x\r\n",RX_BUF[0]);	
    129c:	80 91 32 02 	lds	r24, 0x0232
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <__stack+0x1a7>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <__stack+0x1a9>
    12a8:	ed b7       	in	r30, 0x3d	; 61
    12aa:	fe b7       	in	r31, 0x3e	; 62
    12ac:	31 96       	adiw	r30, 0x01	; 1
    12ae:	86 e0       	ldi	r24, 0x06	; 6
    12b0:	92 e0       	ldi	r25, 0x02	; 2
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
    12b6:	33 83       	std	Z+3, r19	; 0x03
    12b8:	22 83       	std	Z+2, r18	; 0x02
    12ba:	0e 94 54 10 	call	0x20a8	; 0x20a8 <printf>
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
	}  
	CE_1;
    12c6:	a2 e3       	ldi	r26, 0x32	; 50
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e2 e3       	ldi	r30, 0x32	; 50
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 68       	ori	r24, 0x80	; 128
    12d2:	8c 93       	st	X, r24

}
    12d4:	69 96       	adiw	r28, 0x19	; 25
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <uart_putchar>:
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <uart_putchar+0x6>
    12ec:	0f 92       	push	r0
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	7b 83       	std	Y+3, r23	; 0x03
    12f6:	6a 83       	std	Y+2, r22	; 0x02
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	8a 30       	cpi	r24, 0x0A	; 10
    12fc:	31 f4       	brne	.+12     	; 0x130a <uart_putchar+0x24>
    12fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1300:	3b 81       	ldd	r19, Y+3	; 0x03
    1302:	8d e0       	ldi	r24, 0x0D	; 13
    1304:	b9 01       	movw	r22, r18
    1306:	0e 94 73 09 	call	0x12e6	; 0x12e6 <uart_putchar>
    130a:	eb e2       	ldi	r30, 0x2B	; 43
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	80 72       	andi	r24, 0x20	; 32
    1316:	90 70       	andi	r25, 0x00	; 0
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	b9 f3       	breq	.-18     	; 0x130a <uart_putchar+0x24>
    131c:	ec e2       	ldi	r30, 0x2C	; 44
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	80 83       	st	Z, r24
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <putUsart0>:
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	0f 92       	push	r0
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	eb e2       	ldi	r30, 0x2B	; 43
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	80 72       	andi	r24, 0x20	; 32
    134c:	90 70       	andi	r25, 0x00	; 0
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	b9 f3       	breq	.-18     	; 0x1340 <putUsart0+0xc>
    1352:	ec e2       	ldi	r30, 0x2C	; 44
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	80 83       	st	Z, r24
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <getUsart0>:
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <getUsart0+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <getUsart0+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	eb e2       	ldi	r30, 0x2B	; 43
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	88 23       	and	r24, r24
    1376:	2c f0       	brlt	.+10     	; 0x1382 <getUsart0+0x20>
    1378:	2f ef       	ldi	r18, 0xFF	; 255
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	3c 83       	std	Y+4, r19	; 0x04
    137e:	2b 83       	std	Y+3, r18	; 0x03
    1380:	19 c0       	rjmp	.+50     	; 0x13b4 <getUsart0+0x52>
    1382:	eb e2       	ldi	r30, 0x2B	; 43
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8a 83       	std	Y+2, r24	; 0x02
    138a:	ec e2       	ldi	r30, 0x2C	; 44
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	8c 71       	andi	r24, 0x1C	; 28
    139a:	90 70       	andi	r25, 0x00	; 0
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	29 f0       	breq	.+10     	; 0x13aa <getUsart0+0x48>
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	9f ef       	ldi	r25, 0xFF	; 255
    13a4:	9c 83       	std	Y+4, r25	; 0x04
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <getUsart0+0x52>
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	3c 83       	std	Y+4, r19	; 0x04
    13b2:	2b 83       	std	Y+3, r18	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <waitUsart0>:
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <waitUsart0+0x6>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	0e 94 b1 09 	call	0x1362	; 0x1362 <getUsart0>
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	2f ef       	ldi	r18, 0xFF	; 255
    13de:	8f 3f       	cpi	r24, 0xFF	; 255
    13e0:	92 07       	cpc	r25, r18
    13e2:	b1 f3       	breq	.-20     	; 0x13d0 <waitUsart0+0xa>
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <usartInit>:
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	eb e2       	ldi	r30, 0x2B	; 43
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	10 82       	st	Z, r1
    13fe:	ea e2       	ldi	r30, 0x2A	; 42
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	88 e9       	ldi	r24, 0x98	; 152
    1404:	80 83       	st	Z, r24
    1406:	e5 e9       	ldi	r30, 0x95	; 149
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	86 e0       	ldi	r24, 0x06	; 6
    140c:	80 83       	st	Z, r24
    140e:	e0 e9       	ldi	r30, 0x90	; 144
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
    1414:	e9 e2       	ldi	r30, 0x29	; 41
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	8f e2       	ldi	r24, 0x2F	; 47
    141a:	80 83       	st	Z, r24
    141c:	8c e1       	ldi	r24, 0x1C	; 28
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	90 93 75 02 	sts	0x0275, r25
    1424:	80 93 74 02 	sts	0x0274, r24
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <__fixunssfsi>:
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	7b 01       	movw	r14, r22
    1438:	8c 01       	movw	r16, r24
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	5f e4       	ldi	r21, 0x4F	; 79
    1442:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__gesf2>
    1446:	88 23       	and	r24, r24
    1448:	8c f0       	brlt	.+34     	; 0x146c <__fixunssfsi+0x3e>
    144a:	c8 01       	movw	r24, r16
    144c:	b7 01       	movw	r22, r14
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	5f e4       	ldi	r21, 0x4F	; 79
    1456:	0e 94 8f 0b 	call	0x171e	; 0x171e <__subsf3>
    145a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fixsfsi>
    145e:	9b 01       	movw	r18, r22
    1460:	ac 01       	movw	r20, r24
    1462:	20 50       	subi	r18, 0x00	; 0
    1464:	30 40       	sbci	r19, 0x00	; 0
    1466:	40 40       	sbci	r20, 0x00	; 0
    1468:	50 48       	sbci	r21, 0x80	; 128
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <__fixunssfsi+0x4a>
    146c:	c8 01       	movw	r24, r16
    146e:	b7 01       	movw	r22, r14
    1470:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fixsfsi>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	b9 01       	movw	r22, r18
    147a:	ca 01       	movw	r24, r20
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	08 95       	ret

00001486 <_fpadd_parts>:
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e9 e4       	ldi	r30, 0x49	; 73
    148c:	fa e0       	ldi	r31, 0x0A	; 10
    148e:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__prologue_saves__>
    1492:	dc 01       	movw	r26, r24
    1494:	2b 01       	movw	r4, r22
    1496:	fa 01       	movw	r30, r20
    1498:	9c 91       	ld	r25, X
    149a:	92 30       	cpi	r25, 0x02	; 2
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <_fpadd_parts+0x1a>
    149e:	39 c1       	rjmp	.+626    	; 0x1712 <_fpadd_parts+0x28c>
    14a0:	eb 01       	movw	r28, r22
    14a2:	88 81       	ld	r24, Y
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <_fpadd_parts+0x24>
    14a8:	33 c1       	rjmp	.+614    	; 0x1710 <_fpadd_parts+0x28a>
    14aa:	94 30       	cpi	r25, 0x04	; 4
    14ac:	69 f4       	brne	.+26     	; 0x14c8 <_fpadd_parts+0x42>
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <_fpadd_parts+0x2e>
    14b2:	2f c1       	rjmp	.+606    	; 0x1712 <_fpadd_parts+0x28c>
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	9c 91       	ld	r25, X
    14b8:	11 97       	sbiw	r26, 0x01	; 1
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	98 17       	cp	r25, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <_fpadd_parts+0x3c>
    14c0:	28 c1       	rjmp	.+592    	; 0x1712 <_fpadd_parts+0x28c>
    14c2:	aa e2       	ldi	r26, 0x2A	; 42
    14c4:	b2 e0       	ldi	r27, 0x02	; 2
    14c6:	25 c1       	rjmp	.+586    	; 0x1712 <_fpadd_parts+0x28c>
    14c8:	84 30       	cpi	r24, 0x04	; 4
    14ca:	09 f4       	brne	.+2      	; 0x14ce <_fpadd_parts+0x48>
    14cc:	21 c1       	rjmp	.+578    	; 0x1710 <_fpadd_parts+0x28a>
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	a9 f4       	brne	.+42     	; 0x14fc <_fpadd_parts+0x76>
    14d2:	92 30       	cpi	r25, 0x02	; 2
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <_fpadd_parts+0x52>
    14d6:	1d c1       	rjmp	.+570    	; 0x1712 <_fpadd_parts+0x28c>
    14d8:	9a 01       	movw	r18, r20
    14da:	ad 01       	movw	r20, r26
    14dc:	88 e0       	ldi	r24, 0x08	; 8
    14de:	ea 01       	movw	r28, r20
    14e0:	09 90       	ld	r0, Y+
    14e2:	ae 01       	movw	r20, r28
    14e4:	e9 01       	movw	r28, r18
    14e6:	09 92       	st	Y+, r0
    14e8:	9e 01       	movw	r18, r28
    14ea:	81 50       	subi	r24, 0x01	; 1
    14ec:	c1 f7       	brne	.-16     	; 0x14de <_fpadd_parts+0x58>
    14ee:	e2 01       	movw	r28, r4
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	9c 91       	ld	r25, X
    14f6:	89 23       	and	r24, r25
    14f8:	81 83       	std	Z+1, r24	; 0x01
    14fa:	08 c1       	rjmp	.+528    	; 0x170c <_fpadd_parts+0x286>
    14fc:	92 30       	cpi	r25, 0x02	; 2
    14fe:	09 f4       	brne	.+2      	; 0x1502 <_fpadd_parts+0x7c>
    1500:	07 c1       	rjmp	.+526    	; 0x1710 <_fpadd_parts+0x28a>
    1502:	12 96       	adiw	r26, 0x02	; 2
    1504:	2d 90       	ld	r2, X+
    1506:	3c 90       	ld	r3, X
    1508:	13 97       	sbiw	r26, 0x03	; 3
    150a:	eb 01       	movw	r28, r22
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	9b 81       	ldd	r25, Y+3	; 0x03
    1510:	14 96       	adiw	r26, 0x04	; 4
    1512:	ad 90       	ld	r10, X+
    1514:	bd 90       	ld	r11, X+
    1516:	cd 90       	ld	r12, X+
    1518:	dc 90       	ld	r13, X
    151a:	17 97       	sbiw	r26, 0x07	; 7
    151c:	ec 80       	ldd	r14, Y+4	; 0x04
    151e:	fd 80       	ldd	r15, Y+5	; 0x05
    1520:	0e 81       	ldd	r16, Y+6	; 0x06
    1522:	1f 81       	ldd	r17, Y+7	; 0x07
    1524:	91 01       	movw	r18, r2
    1526:	28 1b       	sub	r18, r24
    1528:	39 0b       	sbc	r19, r25
    152a:	b9 01       	movw	r22, r18
    152c:	37 ff       	sbrs	r19, 7
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <_fpadd_parts+0xb2>
    1530:	66 27       	eor	r22, r22
    1532:	77 27       	eor	r23, r23
    1534:	62 1b       	sub	r22, r18
    1536:	73 0b       	sbc	r23, r19
    1538:	60 32       	cpi	r22, 0x20	; 32
    153a:	71 05       	cpc	r23, r1
    153c:	0c f0       	brlt	.+2      	; 0x1540 <_fpadd_parts+0xba>
    153e:	61 c0       	rjmp	.+194    	; 0x1602 <_fpadd_parts+0x17c>
    1540:	12 16       	cp	r1, r18
    1542:	13 06       	cpc	r1, r19
    1544:	6c f5       	brge	.+90     	; 0x15a0 <_fpadd_parts+0x11a>
    1546:	37 01       	movw	r6, r14
    1548:	48 01       	movw	r8, r16
    154a:	06 2e       	mov	r0, r22
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <_fpadd_parts+0xd0>
    154e:	96 94       	lsr	r9
    1550:	87 94       	ror	r8
    1552:	77 94       	ror	r7
    1554:	67 94       	ror	r6
    1556:	0a 94       	dec	r0
    1558:	d2 f7       	brpl	.-12     	; 0x154e <_fpadd_parts+0xc8>
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	04 c0       	rjmp	.+8      	; 0x156c <_fpadd_parts+0xe6>
    1564:	22 0f       	add	r18, r18
    1566:	33 1f       	adc	r19, r19
    1568:	44 1f       	adc	r20, r20
    156a:	55 1f       	adc	r21, r21
    156c:	6a 95       	dec	r22
    156e:	d2 f7       	brpl	.-12     	; 0x1564 <_fpadd_parts+0xde>
    1570:	21 50       	subi	r18, 0x01	; 1
    1572:	30 40       	sbci	r19, 0x00	; 0
    1574:	40 40       	sbci	r20, 0x00	; 0
    1576:	50 40       	sbci	r21, 0x00	; 0
    1578:	2e 21       	and	r18, r14
    157a:	3f 21       	and	r19, r15
    157c:	40 23       	and	r20, r16
    157e:	51 23       	and	r21, r17
    1580:	21 15       	cp	r18, r1
    1582:	31 05       	cpc	r19, r1
    1584:	41 05       	cpc	r20, r1
    1586:	51 05       	cpc	r21, r1
    1588:	21 f0       	breq	.+8      	; 0x1592 <_fpadd_parts+0x10c>
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	79 01       	movw	r14, r18
    1594:	8a 01       	movw	r16, r20
    1596:	e6 28       	or	r14, r6
    1598:	f7 28       	or	r15, r7
    159a:	08 29       	or	r16, r8
    159c:	19 29       	or	r17, r9
    159e:	3c c0       	rjmp	.+120    	; 0x1618 <_fpadd_parts+0x192>
    15a0:	23 2b       	or	r18, r19
    15a2:	d1 f1       	breq	.+116    	; 0x1618 <_fpadd_parts+0x192>
    15a4:	26 0e       	add	r2, r22
    15a6:	37 1e       	adc	r3, r23
    15a8:	35 01       	movw	r6, r10
    15aa:	46 01       	movw	r8, r12
    15ac:	06 2e       	mov	r0, r22
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <_fpadd_parts+0x132>
    15b0:	96 94       	lsr	r9
    15b2:	87 94       	ror	r8
    15b4:	77 94       	ror	r7
    15b6:	67 94       	ror	r6
    15b8:	0a 94       	dec	r0
    15ba:	d2 f7       	brpl	.-12     	; 0x15b0 <_fpadd_parts+0x12a>
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <_fpadd_parts+0x148>
    15c6:	22 0f       	add	r18, r18
    15c8:	33 1f       	adc	r19, r19
    15ca:	44 1f       	adc	r20, r20
    15cc:	55 1f       	adc	r21, r21
    15ce:	6a 95       	dec	r22
    15d0:	d2 f7       	brpl	.-12     	; 0x15c6 <_fpadd_parts+0x140>
    15d2:	21 50       	subi	r18, 0x01	; 1
    15d4:	30 40       	sbci	r19, 0x00	; 0
    15d6:	40 40       	sbci	r20, 0x00	; 0
    15d8:	50 40       	sbci	r21, 0x00	; 0
    15da:	2a 21       	and	r18, r10
    15dc:	3b 21       	and	r19, r11
    15de:	4c 21       	and	r20, r12
    15e0:	5d 21       	and	r21, r13
    15e2:	21 15       	cp	r18, r1
    15e4:	31 05       	cpc	r19, r1
    15e6:	41 05       	cpc	r20, r1
    15e8:	51 05       	cpc	r21, r1
    15ea:	21 f0       	breq	.+8      	; 0x15f4 <_fpadd_parts+0x16e>
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	59 01       	movw	r10, r18
    15f6:	6a 01       	movw	r12, r20
    15f8:	a6 28       	or	r10, r6
    15fa:	b7 28       	or	r11, r7
    15fc:	c8 28       	or	r12, r8
    15fe:	d9 28       	or	r13, r9
    1600:	0b c0       	rjmp	.+22     	; 0x1618 <_fpadd_parts+0x192>
    1602:	82 15       	cp	r24, r2
    1604:	93 05       	cpc	r25, r3
    1606:	2c f0       	brlt	.+10     	; 0x1612 <_fpadd_parts+0x18c>
    1608:	1c 01       	movw	r2, r24
    160a:	aa 24       	eor	r10, r10
    160c:	bb 24       	eor	r11, r11
    160e:	65 01       	movw	r12, r10
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <_fpadd_parts+0x192>
    1612:	ee 24       	eor	r14, r14
    1614:	ff 24       	eor	r15, r15
    1616:	87 01       	movw	r16, r14
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	9c 91       	ld	r25, X
    161c:	d2 01       	movw	r26, r4
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	8c 91       	ld	r24, X
    1622:	98 17       	cp	r25, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <_fpadd_parts+0x1a2>
    1626:	45 c0       	rjmp	.+138    	; 0x16b2 <_fpadd_parts+0x22c>
    1628:	99 23       	and	r25, r25
    162a:	39 f0       	breq	.+14     	; 0x163a <_fpadd_parts+0x1b4>
    162c:	a8 01       	movw	r20, r16
    162e:	97 01       	movw	r18, r14
    1630:	2a 19       	sub	r18, r10
    1632:	3b 09       	sbc	r19, r11
    1634:	4c 09       	sbc	r20, r12
    1636:	5d 09       	sbc	r21, r13
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <_fpadd_parts+0x1c0>
    163a:	a6 01       	movw	r20, r12
    163c:	95 01       	movw	r18, r10
    163e:	2e 19       	sub	r18, r14
    1640:	3f 09       	sbc	r19, r15
    1642:	40 0b       	sbc	r20, r16
    1644:	51 0b       	sbc	r21, r17
    1646:	57 fd       	sbrc	r21, 7
    1648:	08 c0       	rjmp	.+16     	; 0x165a <_fpadd_parts+0x1d4>
    164a:	11 82       	std	Z+1, r1	; 0x01
    164c:	33 82       	std	Z+3, r3	; 0x03
    164e:	22 82       	std	Z+2, r2	; 0x02
    1650:	24 83       	std	Z+4, r18	; 0x04
    1652:	35 83       	std	Z+5, r19	; 0x05
    1654:	46 83       	std	Z+6, r20	; 0x06
    1656:	57 83       	std	Z+7, r21	; 0x07
    1658:	1d c0       	rjmp	.+58     	; 0x1694 <_fpadd_parts+0x20e>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	81 83       	std	Z+1, r24	; 0x01
    165e:	33 82       	std	Z+3, r3	; 0x03
    1660:	22 82       	std	Z+2, r2	; 0x02
    1662:	88 27       	eor	r24, r24
    1664:	99 27       	eor	r25, r25
    1666:	dc 01       	movw	r26, r24
    1668:	82 1b       	sub	r24, r18
    166a:	93 0b       	sbc	r25, r19
    166c:	a4 0b       	sbc	r26, r20
    166e:	b5 0b       	sbc	r27, r21
    1670:	84 83       	std	Z+4, r24	; 0x04
    1672:	95 83       	std	Z+5, r25	; 0x05
    1674:	a6 83       	std	Z+6, r26	; 0x06
    1676:	b7 83       	std	Z+7, r27	; 0x07
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <_fpadd_parts+0x20e>
    167a:	22 0f       	add	r18, r18
    167c:	33 1f       	adc	r19, r19
    167e:	44 1f       	adc	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	24 83       	std	Z+4, r18	; 0x04
    1684:	35 83       	std	Z+5, r19	; 0x05
    1686:	46 83       	std	Z+6, r20	; 0x06
    1688:	57 83       	std	Z+7, r21	; 0x07
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	93 83       	std	Z+3, r25	; 0x03
    1692:	82 83       	std	Z+2, r24	; 0x02
    1694:	24 81       	ldd	r18, Z+4	; 0x04
    1696:	35 81       	ldd	r19, Z+5	; 0x05
    1698:	46 81       	ldd	r20, Z+6	; 0x06
    169a:	57 81       	ldd	r21, Z+7	; 0x07
    169c:	da 01       	movw	r26, r20
    169e:	c9 01       	movw	r24, r18
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	a1 09       	sbc	r26, r1
    16a4:	b1 09       	sbc	r27, r1
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	9f 4f       	sbci	r25, 0xFF	; 255
    16aa:	af 4f       	sbci	r26, 0xFF	; 255
    16ac:	bf 43       	sbci	r27, 0x3F	; 63
    16ae:	28 f3       	brcs	.-54     	; 0x167a <_fpadd_parts+0x1f4>
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <_fpadd_parts+0x242>
    16b2:	91 83       	std	Z+1, r25	; 0x01
    16b4:	33 82       	std	Z+3, r3	; 0x03
    16b6:	22 82       	std	Z+2, r2	; 0x02
    16b8:	ea 0c       	add	r14, r10
    16ba:	fb 1c       	adc	r15, r11
    16bc:	0c 1d       	adc	r16, r12
    16be:	1d 1d       	adc	r17, r13
    16c0:	e4 82       	std	Z+4, r14	; 0x04
    16c2:	f5 82       	std	Z+5, r15	; 0x05
    16c4:	06 83       	std	Z+6, r16	; 0x06
    16c6:	17 83       	std	Z+7, r17	; 0x07
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	80 83       	st	Z, r24
    16cc:	24 81       	ldd	r18, Z+4	; 0x04
    16ce:	35 81       	ldd	r19, Z+5	; 0x05
    16d0:	46 81       	ldd	r20, Z+6	; 0x06
    16d2:	57 81       	ldd	r21, Z+7	; 0x07
    16d4:	57 ff       	sbrs	r21, 7
    16d6:	1a c0       	rjmp	.+52     	; 0x170c <_fpadd_parts+0x286>
    16d8:	c9 01       	movw	r24, r18
    16da:	aa 27       	eor	r26, r26
    16dc:	97 fd       	sbrc	r25, 7
    16de:	a0 95       	com	r26
    16e0:	ba 2f       	mov	r27, r26
    16e2:	81 70       	andi	r24, 0x01	; 1
    16e4:	90 70       	andi	r25, 0x00	; 0
    16e6:	a0 70       	andi	r26, 0x00	; 0
    16e8:	b0 70       	andi	r27, 0x00	; 0
    16ea:	56 95       	lsr	r21
    16ec:	47 95       	ror	r20
    16ee:	37 95       	ror	r19
    16f0:	27 95       	ror	r18
    16f2:	82 2b       	or	r24, r18
    16f4:	93 2b       	or	r25, r19
    16f6:	a4 2b       	or	r26, r20
    16f8:	b5 2b       	or	r27, r21
    16fa:	84 83       	std	Z+4, r24	; 0x04
    16fc:	95 83       	std	Z+5, r25	; 0x05
    16fe:	a6 83       	std	Z+6, r26	; 0x06
    1700:	b7 83       	std	Z+7, r27	; 0x07
    1702:	82 81       	ldd	r24, Z+2	; 0x02
    1704:	93 81       	ldd	r25, Z+3	; 0x03
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	93 83       	std	Z+3, r25	; 0x03
    170a:	82 83       	std	Z+2, r24	; 0x02
    170c:	df 01       	movw	r26, r30
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <_fpadd_parts+0x28c>
    1710:	d2 01       	movw	r26, r4
    1712:	cd 01       	movw	r24, r26
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	e2 e1       	ldi	r30, 0x12	; 18
    171a:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__epilogue_restores__>

0000171e <__subsf3>:
    171e:	a0 e2       	ldi	r26, 0x20	; 32
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e9       	ldi	r30, 0x95	; 149
    1724:	fb e0       	ldi	r31, 0x0B	; 11
    1726:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
    172a:	69 83       	std	Y+1, r22	; 0x01
    172c:	7a 83       	std	Y+2, r23	; 0x02
    172e:	8b 83       	std	Y+3, r24	; 0x03
    1730:	9c 83       	std	Y+4, r25	; 0x04
    1732:	2d 83       	std	Y+5, r18	; 0x05
    1734:	3e 83       	std	Y+6, r19	; 0x06
    1736:	4f 83       	std	Y+7, r20	; 0x07
    1738:	58 87       	std	Y+8, r21	; 0x08
    173a:	e9 e0       	ldi	r30, 0x09	; 9
    173c:	ee 2e       	mov	r14, r30
    173e:	f1 2c       	mov	r15, r1
    1740:	ec 0e       	add	r14, r28
    1742:	fd 1e       	adc	r15, r29
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	b7 01       	movw	r22, r14
    174a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    174e:	8e 01       	movw	r16, r28
    1750:	0f 5e       	subi	r16, 0xEF	; 239
    1752:	1f 4f       	sbci	r17, 0xFF	; 255
    1754:	ce 01       	movw	r24, r28
    1756:	05 96       	adiw	r24, 0x05	; 5
    1758:	b8 01       	movw	r22, r16
    175a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    175e:	8a 89       	ldd	r24, Y+18	; 0x12
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	89 27       	eor	r24, r25
    1764:	8a 8b       	std	Y+18, r24	; 0x12
    1766:	c7 01       	movw	r24, r14
    1768:	b8 01       	movw	r22, r16
    176a:	ae 01       	movw	r20, r28
    176c:	47 5e       	subi	r20, 0xE7	; 231
    176e:	5f 4f       	sbci	r21, 0xFF	; 255
    1770:	0e 94 43 0a 	call	0x1486	; 0x1486 <_fpadd_parts>
    1774:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__pack_f>
    1778:	a0 96       	adiw	r28, 0x20	; 32
    177a:	e6 e0       	ldi	r30, 0x06	; 6
    177c:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

00001780 <__addsf3>:
    1780:	a0 e2       	ldi	r26, 0x20	; 32
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e6 ec       	ldi	r30, 0xC6	; 198
    1786:	fb e0       	ldi	r31, 0x0B	; 11
    1788:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
    178c:	69 83       	std	Y+1, r22	; 0x01
    178e:	7a 83       	std	Y+2, r23	; 0x02
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	2d 83       	std	Y+5, r18	; 0x05
    1796:	3e 83       	std	Y+6, r19	; 0x06
    1798:	4f 83       	std	Y+7, r20	; 0x07
    179a:	58 87       	std	Y+8, r21	; 0x08
    179c:	f9 e0       	ldi	r31, 0x09	; 9
    179e:	ef 2e       	mov	r14, r31
    17a0:	f1 2c       	mov	r15, r1
    17a2:	ec 0e       	add	r14, r28
    17a4:	fd 1e       	adc	r15, r29
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	b7 01       	movw	r22, r14
    17ac:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    17b0:	8e 01       	movw	r16, r28
    17b2:	0f 5e       	subi	r16, 0xEF	; 239
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	ce 01       	movw	r24, r28
    17b8:	05 96       	adiw	r24, 0x05	; 5
    17ba:	b8 01       	movw	r22, r16
    17bc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    17c0:	c7 01       	movw	r24, r14
    17c2:	b8 01       	movw	r22, r16
    17c4:	ae 01       	movw	r20, r28
    17c6:	47 5e       	subi	r20, 0xE7	; 231
    17c8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ca:	0e 94 43 0a 	call	0x1486	; 0x1486 <_fpadd_parts>
    17ce:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__pack_f>
    17d2:	a0 96       	adiw	r28, 0x20	; 32
    17d4:	e6 e0       	ldi	r30, 0x06	; 6
    17d6:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

000017da <__mulsf3>:
    17da:	a0 e2       	ldi	r26, 0x20	; 32
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e3 ef       	ldi	r30, 0xF3	; 243
    17e0:	fb e0       	ldi	r31, 0x0B	; 11
    17e2:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__prologue_saves__>
    17e6:	69 83       	std	Y+1, r22	; 0x01
    17e8:	7a 83       	std	Y+2, r23	; 0x02
    17ea:	8b 83       	std	Y+3, r24	; 0x03
    17ec:	9c 83       	std	Y+4, r25	; 0x04
    17ee:	2d 83       	std	Y+5, r18	; 0x05
    17f0:	3e 83       	std	Y+6, r19	; 0x06
    17f2:	4f 83       	std	Y+7, r20	; 0x07
    17f4:	58 87       	std	Y+8, r21	; 0x08
    17f6:	ce 01       	movw	r24, r28
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	be 01       	movw	r22, r28
    17fc:	67 5f       	subi	r22, 0xF7	; 247
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1804:	ce 01       	movw	r24, r28
    1806:	05 96       	adiw	r24, 0x05	; 5
    1808:	be 01       	movw	r22, r28
    180a:	6f 5e       	subi	r22, 0xEF	; 239
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1812:	99 85       	ldd	r25, Y+9	; 0x09
    1814:	92 30       	cpi	r25, 0x02	; 2
    1816:	88 f0       	brcs	.+34     	; 0x183a <__mulsf3+0x60>
    1818:	89 89       	ldd	r24, Y+17	; 0x11
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	c8 f0       	brcs	.+50     	; 0x1850 <__mulsf3+0x76>
    181e:	94 30       	cpi	r25, 0x04	; 4
    1820:	19 f4       	brne	.+6      	; 0x1828 <__mulsf3+0x4e>
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	51 f4       	brne	.+20     	; 0x183a <__mulsf3+0x60>
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <__mulsf3+0x56>
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	29 f4       	brne	.+10     	; 0x1836 <__mulsf3+0x5c>
    182c:	92 30       	cpi	r25, 0x02	; 2
    182e:	81 f4       	brne	.+32     	; 0x1850 <__mulsf3+0x76>
    1830:	8a e2       	ldi	r24, 0x2A	; 42
    1832:	92 e0       	ldi	r25, 0x02	; 2
    1834:	c6 c0       	rjmp	.+396    	; 0x19c2 <__mulsf3+0x1e8>
    1836:	92 30       	cpi	r25, 0x02	; 2
    1838:	49 f4       	brne	.+18     	; 0x184c <__mulsf3+0x72>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	9a 85       	ldd	r25, Y+10	; 0x0a
    183e:	8a 89       	ldd	r24, Y+18	; 0x12
    1840:	98 13       	cpse	r25, r24
    1842:	21 e0       	ldi	r18, 0x01	; 1
    1844:	2a 87       	std	Y+10, r18	; 0x0a
    1846:	ce 01       	movw	r24, r28
    1848:	09 96       	adiw	r24, 0x09	; 9
    184a:	bb c0       	rjmp	.+374    	; 0x19c2 <__mulsf3+0x1e8>
    184c:	82 30       	cpi	r24, 0x02	; 2
    184e:	49 f4       	brne	.+18     	; 0x1862 <__mulsf3+0x88>
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	8a 89       	ldd	r24, Y+18	; 0x12
    1856:	98 13       	cpse	r25, r24
    1858:	21 e0       	ldi	r18, 0x01	; 1
    185a:	2a 8b       	std	Y+18, r18	; 0x12
    185c:	ce 01       	movw	r24, r28
    185e:	41 96       	adiw	r24, 0x11	; 17
    1860:	b0 c0       	rjmp	.+352    	; 0x19c2 <__mulsf3+0x1e8>
    1862:	2d 84       	ldd	r2, Y+13	; 0x0d
    1864:	3e 84       	ldd	r3, Y+14	; 0x0e
    1866:	4f 84       	ldd	r4, Y+15	; 0x0f
    1868:	58 88       	ldd	r5, Y+16	; 0x10
    186a:	6d 88       	ldd	r6, Y+21	; 0x15
    186c:	7e 88       	ldd	r7, Y+22	; 0x16
    186e:	8f 88       	ldd	r8, Y+23	; 0x17
    1870:	98 8c       	ldd	r9, Y+24	; 0x18
    1872:	ee 24       	eor	r14, r14
    1874:	ff 24       	eor	r15, r15
    1876:	87 01       	movw	r16, r14
    1878:	aa 24       	eor	r10, r10
    187a:	bb 24       	eor	r11, r11
    187c:	65 01       	movw	r12, r10
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	e0 e0       	ldi	r30, 0x00	; 0
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	c1 01       	movw	r24, r2
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	90 70       	andi	r25, 0x00	; 0
    1890:	89 2b       	or	r24, r25
    1892:	e9 f0       	breq	.+58     	; 0x18ce <__mulsf3+0xf4>
    1894:	e6 0c       	add	r14, r6
    1896:	f7 1c       	adc	r15, r7
    1898:	08 1d       	adc	r16, r8
    189a:	19 1d       	adc	r17, r9
    189c:	9a 01       	movw	r18, r20
    189e:	ab 01       	movw	r20, r22
    18a0:	2a 0d       	add	r18, r10
    18a2:	3b 1d       	adc	r19, r11
    18a4:	4c 1d       	adc	r20, r12
    18a6:	5d 1d       	adc	r21, r13
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e6 14       	cp	r14, r6
    18b2:	f7 04       	cpc	r15, r7
    18b4:	08 05       	cpc	r16, r8
    18b6:	19 05       	cpc	r17, r9
    18b8:	20 f4       	brcc	.+8      	; 0x18c2 <__mulsf3+0xe8>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ba 01       	movw	r22, r20
    18c4:	a9 01       	movw	r20, r18
    18c6:	48 0f       	add	r20, r24
    18c8:	59 1f       	adc	r21, r25
    18ca:	6a 1f       	adc	r22, r26
    18cc:	7b 1f       	adc	r23, r27
    18ce:	aa 0c       	add	r10, r10
    18d0:	bb 1c       	adc	r11, r11
    18d2:	cc 1c       	adc	r12, r12
    18d4:	dd 1c       	adc	r13, r13
    18d6:	97 fe       	sbrs	r9, 7
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <__mulsf3+0x110>
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	a8 2a       	or	r10, r24
    18e4:	b9 2a       	or	r11, r25
    18e6:	ca 2a       	or	r12, r26
    18e8:	db 2a       	or	r13, r27
    18ea:	31 96       	adiw	r30, 0x01	; 1
    18ec:	e0 32       	cpi	r30, 0x20	; 32
    18ee:	f1 05       	cpc	r31, r1
    18f0:	49 f0       	breq	.+18     	; 0x1904 <__mulsf3+0x12a>
    18f2:	66 0c       	add	r6, r6
    18f4:	77 1c       	adc	r7, r7
    18f6:	88 1c       	adc	r8, r8
    18f8:	99 1c       	adc	r9, r9
    18fa:	56 94       	lsr	r5
    18fc:	47 94       	ror	r4
    18fe:	37 94       	ror	r3
    1900:	27 94       	ror	r2
    1902:	c3 cf       	rjmp	.-122    	; 0x188a <__mulsf3+0xb0>
    1904:	fa 85       	ldd	r31, Y+10	; 0x0a
    1906:	ea 89       	ldd	r30, Y+18	; 0x12
    1908:	2b 89       	ldd	r18, Y+19	; 0x13
    190a:	3c 89       	ldd	r19, Y+20	; 0x14
    190c:	8b 85       	ldd	r24, Y+11	; 0x0b
    190e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1910:	28 0f       	add	r18, r24
    1912:	39 1f       	adc	r19, r25
    1914:	2e 5f       	subi	r18, 0xFE	; 254
    1916:	3f 4f       	sbci	r19, 0xFF	; 255
    1918:	17 c0       	rjmp	.+46     	; 0x1948 <__mulsf3+0x16e>
    191a:	ca 01       	movw	r24, r20
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	89 2b       	or	r24, r25
    1922:	61 f0       	breq	.+24     	; 0x193c <__mulsf3+0x162>
    1924:	16 95       	lsr	r17
    1926:	07 95       	ror	r16
    1928:	f7 94       	ror	r15
    192a:	e7 94       	ror	r14
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a0 e0       	ldi	r26, 0x00	; 0
    1932:	b0 e8       	ldi	r27, 0x80	; 128
    1934:	e8 2a       	or	r14, r24
    1936:	f9 2a       	or	r15, r25
    1938:	0a 2b       	or	r16, r26
    193a:	1b 2b       	or	r17, r27
    193c:	76 95       	lsr	r23
    193e:	67 95       	ror	r22
    1940:	57 95       	ror	r21
    1942:	47 95       	ror	r20
    1944:	2f 5f       	subi	r18, 0xFF	; 255
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	77 fd       	sbrc	r23, 7
    194a:	e7 cf       	rjmp	.-50     	; 0x191a <__mulsf3+0x140>
    194c:	0c c0       	rjmp	.+24     	; 0x1966 <__mulsf3+0x18c>
    194e:	44 0f       	add	r20, r20
    1950:	55 1f       	adc	r21, r21
    1952:	66 1f       	adc	r22, r22
    1954:	77 1f       	adc	r23, r23
    1956:	17 fd       	sbrc	r17, 7
    1958:	41 60       	ori	r20, 0x01	; 1
    195a:	ee 0c       	add	r14, r14
    195c:	ff 1c       	adc	r15, r15
    195e:	00 1f       	adc	r16, r16
    1960:	11 1f       	adc	r17, r17
    1962:	21 50       	subi	r18, 0x01	; 1
    1964:	30 40       	sbci	r19, 0x00	; 0
    1966:	40 30       	cpi	r20, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	59 07       	cpc	r21, r25
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	69 07       	cpc	r22, r25
    1970:	90 e4       	ldi	r25, 0x40	; 64
    1972:	79 07       	cpc	r23, r25
    1974:	60 f3       	brcs	.-40     	; 0x194e <__mulsf3+0x174>
    1976:	2b 8f       	std	Y+27, r18	; 0x1b
    1978:	3c 8f       	std	Y+28, r19	; 0x1c
    197a:	db 01       	movw	r26, r22
    197c:	ca 01       	movw	r24, r20
    197e:	8f 77       	andi	r24, 0x7F	; 127
    1980:	90 70       	andi	r25, 0x00	; 0
    1982:	a0 70       	andi	r26, 0x00	; 0
    1984:	b0 70       	andi	r27, 0x00	; 0
    1986:	80 34       	cpi	r24, 0x40	; 64
    1988:	91 05       	cpc	r25, r1
    198a:	a1 05       	cpc	r26, r1
    198c:	b1 05       	cpc	r27, r1
    198e:	61 f4       	brne	.+24     	; 0x19a8 <__mulsf3+0x1ce>
    1990:	47 fd       	sbrc	r20, 7
    1992:	0a c0       	rjmp	.+20     	; 0x19a8 <__mulsf3+0x1ce>
    1994:	e1 14       	cp	r14, r1
    1996:	f1 04       	cpc	r15, r1
    1998:	01 05       	cpc	r16, r1
    199a:	11 05       	cpc	r17, r1
    199c:	29 f0       	breq	.+10     	; 0x19a8 <__mulsf3+0x1ce>
    199e:	40 5c       	subi	r20, 0xC0	; 192
    19a0:	5f 4f       	sbci	r21, 0xFF	; 255
    19a2:	6f 4f       	sbci	r22, 0xFF	; 255
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	40 78       	andi	r20, 0x80	; 128
    19a8:	1a 8e       	std	Y+26, r1	; 0x1a
    19aa:	fe 17       	cp	r31, r30
    19ac:	11 f0       	breq	.+4      	; 0x19b2 <__mulsf3+0x1d8>
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	8a 8f       	std	Y+26, r24	; 0x1a
    19b2:	4d 8f       	std	Y+29, r20	; 0x1d
    19b4:	5e 8f       	std	Y+30, r21	; 0x1e
    19b6:	6f 8f       	std	Y+31, r22	; 0x1f
    19b8:	78 a3       	std	Y+32, r23	; 0x20
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	89 8f       	std	Y+25, r24	; 0x19
    19be:	ce 01       	movw	r24, r28
    19c0:	49 96       	adiw	r24, 0x19	; 25
    19c2:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__pack_f>
    19c6:	a0 96       	adiw	r28, 0x20	; 32
    19c8:	e2 e1       	ldi	r30, 0x12	; 18
    19ca:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__epilogue_restores__>

000019ce <__divsf3>:
    19ce:	a8 e1       	ldi	r26, 0x18	; 24
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ed ee       	ldi	r30, 0xED	; 237
    19d4:	fc e0       	ldi	r31, 0x0C	; 12
    19d6:	0c 94 25 10 	jmp	0x204a	; 0x204a <__prologue_saves__+0x10>
    19da:	69 83       	std	Y+1, r22	; 0x01
    19dc:	7a 83       	std	Y+2, r23	; 0x02
    19de:	8b 83       	std	Y+3, r24	; 0x03
    19e0:	9c 83       	std	Y+4, r25	; 0x04
    19e2:	2d 83       	std	Y+5, r18	; 0x05
    19e4:	3e 83       	std	Y+6, r19	; 0x06
    19e6:	4f 83       	std	Y+7, r20	; 0x07
    19e8:	58 87       	std	Y+8, r21	; 0x08
    19ea:	b9 e0       	ldi	r27, 0x09	; 9
    19ec:	eb 2e       	mov	r14, r27
    19ee:	f1 2c       	mov	r15, r1
    19f0:	ec 0e       	add	r14, r28
    19f2:	fd 1e       	adc	r15, r29
    19f4:	ce 01       	movw	r24, r28
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	b7 01       	movw	r22, r14
    19fa:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    19fe:	8e 01       	movw	r16, r28
    1a00:	0f 5e       	subi	r16, 0xEF	; 239
    1a02:	1f 4f       	sbci	r17, 0xFF	; 255
    1a04:	ce 01       	movw	r24, r28
    1a06:	05 96       	adiw	r24, 0x05	; 5
    1a08:	b8 01       	movw	r22, r16
    1a0a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1a0e:	29 85       	ldd	r18, Y+9	; 0x09
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	08 f4       	brcc	.+2      	; 0x1a16 <__divsf3+0x48>
    1a14:	7e c0       	rjmp	.+252    	; 0x1b12 <__divsf3+0x144>
    1a16:	39 89       	ldd	r19, Y+17	; 0x11
    1a18:	32 30       	cpi	r19, 0x02	; 2
    1a1a:	10 f4       	brcc	.+4      	; 0x1a20 <__divsf3+0x52>
    1a1c:	b8 01       	movw	r22, r16
    1a1e:	7c c0       	rjmp	.+248    	; 0x1b18 <__divsf3+0x14a>
    1a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a22:	9a 89       	ldd	r25, Y+18	; 0x12
    1a24:	89 27       	eor	r24, r25
    1a26:	8a 87       	std	Y+10, r24	; 0x0a
    1a28:	24 30       	cpi	r18, 0x04	; 4
    1a2a:	11 f0       	breq	.+4      	; 0x1a30 <__divsf3+0x62>
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 f4       	brne	.+12     	; 0x1a3c <__divsf3+0x6e>
    1a30:	23 17       	cp	r18, r19
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <__divsf3+0x68>
    1a34:	6e c0       	rjmp	.+220    	; 0x1b12 <__divsf3+0x144>
    1a36:	6a e2       	ldi	r22, 0x2A	; 42
    1a38:	72 e0       	ldi	r23, 0x02	; 2
    1a3a:	6e c0       	rjmp	.+220    	; 0x1b18 <__divsf3+0x14a>
    1a3c:	34 30       	cpi	r19, 0x04	; 4
    1a3e:	39 f4       	brne	.+14     	; 0x1a4e <__divsf3+0x80>
    1a40:	1d 86       	std	Y+13, r1	; 0x0d
    1a42:	1e 86       	std	Y+14, r1	; 0x0e
    1a44:	1f 86       	std	Y+15, r1	; 0x0f
    1a46:	18 8a       	std	Y+16, r1	; 0x10
    1a48:	1c 86       	std	Y+12, r1	; 0x0c
    1a4a:	1b 86       	std	Y+11, r1	; 0x0b
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <__divsf3+0x88>
    1a4e:	32 30       	cpi	r19, 0x02	; 2
    1a50:	21 f4       	brne	.+8      	; 0x1a5a <__divsf3+0x8c>
    1a52:	84 e0       	ldi	r24, 0x04	; 4
    1a54:	89 87       	std	Y+9, r24	; 0x09
    1a56:	b7 01       	movw	r22, r14
    1a58:	5f c0       	rjmp	.+190    	; 0x1b18 <__divsf3+0x14a>
    1a5a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a60:	9c 89       	ldd	r25, Y+20	; 0x14
    1a62:	28 1b       	sub	r18, r24
    1a64:	39 0b       	sbc	r19, r25
    1a66:	3c 87       	std	Y+12, r19	; 0x0c
    1a68:	2b 87       	std	Y+11, r18	; 0x0b
    1a6a:	ed 84       	ldd	r14, Y+13	; 0x0d
    1a6c:	fe 84       	ldd	r15, Y+14	; 0x0e
    1a6e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a70:	18 89       	ldd	r17, Y+16	; 0x10
    1a72:	ad 88       	ldd	r10, Y+21	; 0x15
    1a74:	be 88       	ldd	r11, Y+22	; 0x16
    1a76:	cf 88       	ldd	r12, Y+23	; 0x17
    1a78:	d8 8c       	ldd	r13, Y+24	; 0x18
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	40 f4       	brcc	.+16     	; 0x1a94 <__divsf3+0xc6>
    1a84:	ee 0c       	add	r14, r14
    1a86:	ff 1c       	adc	r15, r15
    1a88:	00 1f       	adc	r16, r16
    1a8a:	11 1f       	adc	r17, r17
    1a8c:	21 50       	subi	r18, 0x01	; 1
    1a8e:	30 40       	sbci	r19, 0x00	; 0
    1a90:	3c 87       	std	Y+12, r19	; 0x0c
    1a92:	2b 87       	std	Y+11, r18	; 0x0b
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	50 e0       	ldi	r21, 0x00	; 0
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b0 e4       	ldi	r27, 0x40	; 64
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	ea 14       	cp	r14, r10
    1aaa:	fb 04       	cpc	r15, r11
    1aac:	0c 05       	cpc	r16, r12
    1aae:	1d 05       	cpc	r17, r13
    1ab0:	40 f0       	brcs	.+16     	; 0x1ac2 <__divsf3+0xf4>
    1ab2:	28 2b       	or	r18, r24
    1ab4:	39 2b       	or	r19, r25
    1ab6:	4a 2b       	or	r20, r26
    1ab8:	5b 2b       	or	r21, r27
    1aba:	ea 18       	sub	r14, r10
    1abc:	fb 08       	sbc	r15, r11
    1abe:	0c 09       	sbc	r16, r12
    1ac0:	1d 09       	sbc	r17, r13
    1ac2:	b6 95       	lsr	r27
    1ac4:	a7 95       	ror	r26
    1ac6:	97 95       	ror	r25
    1ac8:	87 95       	ror	r24
    1aca:	ee 0c       	add	r14, r14
    1acc:	ff 1c       	adc	r15, r15
    1ace:	00 1f       	adc	r16, r16
    1ad0:	11 1f       	adc	r17, r17
    1ad2:	6f 5f       	subi	r22, 0xFF	; 255
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	6f 31       	cpi	r22, 0x1F	; 31
    1ad8:	71 05       	cpc	r23, r1
    1ada:	31 f7       	brne	.-52     	; 0x1aa8 <__divsf3+0xda>
    1adc:	da 01       	movw	r26, r20
    1ade:	c9 01       	movw	r24, r18
    1ae0:	8f 77       	andi	r24, 0x7F	; 127
    1ae2:	90 70       	andi	r25, 0x00	; 0
    1ae4:	a0 70       	andi	r26, 0x00	; 0
    1ae6:	b0 70       	andi	r27, 0x00	; 0
    1ae8:	80 34       	cpi	r24, 0x40	; 64
    1aea:	91 05       	cpc	r25, r1
    1aec:	a1 05       	cpc	r26, r1
    1aee:	b1 05       	cpc	r27, r1
    1af0:	61 f4       	brne	.+24     	; 0x1b0a <__divsf3+0x13c>
    1af2:	27 fd       	sbrc	r18, 7
    1af4:	0a c0       	rjmp	.+20     	; 0x1b0a <__divsf3+0x13c>
    1af6:	e1 14       	cp	r14, r1
    1af8:	f1 04       	cpc	r15, r1
    1afa:	01 05       	cpc	r16, r1
    1afc:	11 05       	cpc	r17, r1
    1afe:	29 f0       	breq	.+10     	; 0x1b0a <__divsf3+0x13c>
    1b00:	20 5c       	subi	r18, 0xC0	; 192
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	4f 4f       	sbci	r20, 0xFF	; 255
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	20 78       	andi	r18, 0x80	; 128
    1b0a:	2d 87       	std	Y+13, r18	; 0x0d
    1b0c:	3e 87       	std	Y+14, r19	; 0x0e
    1b0e:	4f 87       	std	Y+15, r20	; 0x0f
    1b10:	58 8b       	std	Y+16, r21	; 0x10
    1b12:	be 01       	movw	r22, r28
    1b14:	67 5f       	subi	r22, 0xF7	; 247
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	cb 01       	movw	r24, r22
    1b1a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__pack_f>
    1b1e:	68 96       	adiw	r28, 0x18	; 24
    1b20:	ea e0       	ldi	r30, 0x0A	; 10
    1b22:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__epilogue_restores__+0x10>

00001b26 <__gtsf2>:
    1b26:	a8 e1       	ldi	r26, 0x18	; 24
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
    1b32:	69 83       	std	Y+1, r22	; 0x01
    1b34:	7a 83       	std	Y+2, r23	; 0x02
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	2d 83       	std	Y+5, r18	; 0x05
    1b3c:	3e 83       	std	Y+6, r19	; 0x06
    1b3e:	4f 83       	std	Y+7, r20	; 0x07
    1b40:	58 87       	std	Y+8, r21	; 0x08
    1b42:	89 e0       	ldi	r24, 0x09	; 9
    1b44:	e8 2e       	mov	r14, r24
    1b46:	f1 2c       	mov	r15, r1
    1b48:	ec 0e       	add	r14, r28
    1b4a:	fd 1e       	adc	r15, r29
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	01 96       	adiw	r24, 0x01	; 1
    1b50:	b7 01       	movw	r22, r14
    1b52:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1b56:	8e 01       	movw	r16, r28
    1b58:	0f 5e       	subi	r16, 0xEF	; 239
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	05 96       	adiw	r24, 0x05	; 5
    1b60:	b8 01       	movw	r22, r16
    1b62:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	40 f0       	brcs	.+16     	; 0x1b7c <__gtsf2+0x56>
    1b6c:	89 89       	ldd	r24, Y+17	; 0x11
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	28 f0       	brcs	.+10     	; 0x1b7c <__gtsf2+0x56>
    1b72:	c7 01       	movw	r24, r14
    1b74:	b8 01       	movw	r22, r16
    1b76:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fpcmp_parts_f>
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <__gtsf2+0x58>
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	68 96       	adiw	r28, 0x18	; 24
    1b80:	e6 e0       	ldi	r30, 0x06	; 6
    1b82:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

00001b86 <__gesf2>:
    1b86:	a8 e1       	ldi	r26, 0x18	; 24
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e9 ec       	ldi	r30, 0xC9	; 201
    1b8c:	fd e0       	ldi	r31, 0x0D	; 13
    1b8e:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
    1b92:	69 83       	std	Y+1, r22	; 0x01
    1b94:	7a 83       	std	Y+2, r23	; 0x02
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	2d 83       	std	Y+5, r18	; 0x05
    1b9c:	3e 83       	std	Y+6, r19	; 0x06
    1b9e:	4f 83       	std	Y+7, r20	; 0x07
    1ba0:	58 87       	std	Y+8, r21	; 0x08
    1ba2:	89 e0       	ldi	r24, 0x09	; 9
    1ba4:	e8 2e       	mov	r14, r24
    1ba6:	f1 2c       	mov	r15, r1
    1ba8:	ec 0e       	add	r14, r28
    1baa:	fd 1e       	adc	r15, r29
    1bac:	ce 01       	movw	r24, r28
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	b7 01       	movw	r22, r14
    1bb2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	0f 5e       	subi	r16, 0xEF	; 239
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	05 96       	adiw	r24, 0x05	; 5
    1bc0:	b8 01       	movw	r22, r16
    1bc2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	40 f0       	brcs	.+16     	; 0x1bdc <__gesf2+0x56>
    1bcc:	89 89       	ldd	r24, Y+17	; 0x11
    1bce:	82 30       	cpi	r24, 0x02	; 2
    1bd0:	28 f0       	brcs	.+10     	; 0x1bdc <__gesf2+0x56>
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	b8 01       	movw	r22, r16
    1bd6:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fpcmp_parts_f>
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <__gesf2+0x58>
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	68 96       	adiw	r28, 0x18	; 24
    1be0:	e6 e0       	ldi	r30, 0x06	; 6
    1be2:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

00001be6 <__ltsf2>:
    1be6:	a8 e1       	ldi	r26, 0x18	; 24
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e9 ef       	ldi	r30, 0xF9	; 249
    1bec:	fd e0       	ldi	r31, 0x0D	; 13
    1bee:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__prologue_saves__+0x18>
    1bf2:	69 83       	std	Y+1, r22	; 0x01
    1bf4:	7a 83       	std	Y+2, r23	; 0x02
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	2d 83       	std	Y+5, r18	; 0x05
    1bfc:	3e 83       	std	Y+6, r19	; 0x06
    1bfe:	4f 83       	std	Y+7, r20	; 0x07
    1c00:	58 87       	std	Y+8, r21	; 0x08
    1c02:	89 e0       	ldi	r24, 0x09	; 9
    1c04:	e8 2e       	mov	r14, r24
    1c06:	f1 2c       	mov	r15, r1
    1c08:	ec 0e       	add	r14, r28
    1c0a:	fd 1e       	adc	r15, r29
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	b7 01       	movw	r22, r14
    1c12:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1c16:	8e 01       	movw	r16, r28
    1c18:	0f 5e       	subi	r16, 0xEF	; 239
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	05 96       	adiw	r24, 0x05	; 5
    1c20:	b8 01       	movw	r22, r16
    1c22:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	40 f0       	brcs	.+16     	; 0x1c3c <__ltsf2+0x56>
    1c2c:	89 89       	ldd	r24, Y+17	; 0x11
    1c2e:	82 30       	cpi	r24, 0x02	; 2
    1c30:	28 f0       	brcs	.+10     	; 0x1c3c <__ltsf2+0x56>
    1c32:	c7 01       	movw	r24, r14
    1c34:	b8 01       	movw	r22, r16
    1c36:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fpcmp_parts_f>
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <__ltsf2+0x58>
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	68 96       	adiw	r28, 0x18	; 24
    1c40:	e6 e0       	ldi	r30, 0x06	; 6
    1c42:	0c 94 45 10 	jmp	0x208a	; 0x208a <__epilogue_restores__+0x18>

00001c46 <__fixsfsi>:
    1c46:	ac e0       	ldi	r26, 0x0C	; 12
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e9 e2       	ldi	r30, 0x29	; 41
    1c4c:	fe e0       	ldi	r31, 0x0E	; 14
    1c4e:	0c 94 2d 10 	jmp	0x205a	; 0x205a <__prologue_saves__+0x20>
    1c52:	69 83       	std	Y+1, r22	; 0x01
    1c54:	7a 83       	std	Y+2, r23	; 0x02
    1c56:	8b 83       	std	Y+3, r24	; 0x03
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	be 01       	movw	r22, r28
    1c60:	6b 5f       	subi	r22, 0xFB	; 251
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255
    1c64:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__unpack_f>
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	61 f1       	breq	.+88     	; 0x1cc6 <__fixsfsi+0x80>
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	50 f1       	brcs	.+84     	; 0x1cc6 <__fixsfsi+0x80>
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	21 f4       	brne	.+8      	; 0x1c7e <__fixsfsi+0x38>
    1c76:	8e 81       	ldd	r24, Y+6	; 0x06
    1c78:	88 23       	and	r24, r24
    1c7a:	51 f1       	breq	.+84     	; 0x1cd0 <__fixsfsi+0x8a>
    1c7c:	2e c0       	rjmp	.+92     	; 0x1cda <__fixsfsi+0x94>
    1c7e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c80:	38 85       	ldd	r19, Y+8	; 0x08
    1c82:	37 fd       	sbrc	r19, 7
    1c84:	20 c0       	rjmp	.+64     	; 0x1cc6 <__fixsfsi+0x80>
    1c86:	6e 81       	ldd	r22, Y+6	; 0x06
    1c88:	2f 31       	cpi	r18, 0x1F	; 31
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	1c f0       	brlt	.+6      	; 0x1c94 <__fixsfsi+0x4e>
    1c8e:	66 23       	and	r22, r22
    1c90:	f9 f0       	breq	.+62     	; 0x1cd0 <__fixsfsi+0x8a>
    1c92:	23 c0       	rjmp	.+70     	; 0x1cda <__fixsfsi+0x94>
    1c94:	8e e1       	ldi	r24, 0x1E	; 30
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	82 1b       	sub	r24, r18
    1c9a:	93 0b       	sbc	r25, r19
    1c9c:	29 85       	ldd	r18, Y+9	; 0x09
    1c9e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ca0:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ca2:	5c 85       	ldd	r21, Y+12	; 0x0c
    1ca4:	04 c0       	rjmp	.+8      	; 0x1cae <__fixsfsi+0x68>
    1ca6:	56 95       	lsr	r21
    1ca8:	47 95       	ror	r20
    1caa:	37 95       	ror	r19
    1cac:	27 95       	ror	r18
    1cae:	8a 95       	dec	r24
    1cb0:	d2 f7       	brpl	.-12     	; 0x1ca6 <__fixsfsi+0x60>
    1cb2:	66 23       	and	r22, r22
    1cb4:	b1 f0       	breq	.+44     	; 0x1ce2 <__fixsfsi+0x9c>
    1cb6:	50 95       	com	r21
    1cb8:	40 95       	com	r20
    1cba:	30 95       	com	r19
    1cbc:	21 95       	neg	r18
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	4f 4f       	sbci	r20, 0xFF	; 255
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	0e c0       	rjmp	.+28     	; 0x1ce2 <__fixsfsi+0x9c>
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	09 c0       	rjmp	.+18     	; 0x1ce2 <__fixsfsi+0x9c>
    1cd0:	2f ef       	ldi	r18, 0xFF	; 255
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f ef       	ldi	r20, 0xFF	; 255
    1cd6:	5f e7       	ldi	r21, 0x7F	; 127
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <__fixsfsi+0x9c>
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	50 e8       	ldi	r21, 0x80	; 128
    1ce2:	b9 01       	movw	r22, r18
    1ce4:	ca 01       	movw	r24, r20
    1ce6:	2c 96       	adiw	r28, 0x0c	; 12
    1ce8:	e2 e0       	ldi	r30, 0x02	; 2
    1cea:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__epilogue_restores__+0x20>

00001cee <__pack_f>:
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	e4 80       	ldd	r14, Z+4	; 0x04
    1cfc:	f5 80       	ldd	r15, Z+5	; 0x05
    1cfe:	06 81       	ldd	r16, Z+6	; 0x06
    1d00:	17 81       	ldd	r17, Z+7	; 0x07
    1d02:	d1 80       	ldd	r13, Z+1	; 0x01
    1d04:	80 81       	ld	r24, Z
    1d06:	82 30       	cpi	r24, 0x02	; 2
    1d08:	48 f4       	brcc	.+18     	; 0x1d1c <__pack_f+0x2e>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a0 e1       	ldi	r26, 0x10	; 16
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e8 2a       	or	r14, r24
    1d14:	f9 2a       	or	r15, r25
    1d16:	0a 2b       	or	r16, r26
    1d18:	1b 2b       	or	r17, r27
    1d1a:	a5 c0       	rjmp	.+330    	; 0x1e66 <__pack_f+0x178>
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <__pack_f+0x34>
    1d20:	9f c0       	rjmp	.+318    	; 0x1e60 <__pack_f+0x172>
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <__pack_f+0x40>
    1d26:	ee 24       	eor	r14, r14
    1d28:	ff 24       	eor	r15, r15
    1d2a:	87 01       	movw	r16, r14
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <__pack_f+0x4a>
    1d2e:	e1 14       	cp	r14, r1
    1d30:	f1 04       	cpc	r15, r1
    1d32:	01 05       	cpc	r16, r1
    1d34:	11 05       	cpc	r17, r1
    1d36:	19 f4       	brne	.+6      	; 0x1d3e <__pack_f+0x50>
    1d38:	e0 e0       	ldi	r30, 0x00	; 0
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	96 c0       	rjmp	.+300    	; 0x1e6a <__pack_f+0x17c>
    1d3e:	62 81       	ldd	r22, Z+2	; 0x02
    1d40:	73 81       	ldd	r23, Z+3	; 0x03
    1d42:	9f ef       	ldi	r25, 0xFF	; 255
    1d44:	62 38       	cpi	r22, 0x82	; 130
    1d46:	79 07       	cpc	r23, r25
    1d48:	0c f0       	brlt	.+2      	; 0x1d4c <__pack_f+0x5e>
    1d4a:	5b c0       	rjmp	.+182    	; 0x1e02 <__pack_f+0x114>
    1d4c:	22 e8       	ldi	r18, 0x82	; 130
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	26 1b       	sub	r18, r22
    1d52:	37 0b       	sbc	r19, r23
    1d54:	2a 31       	cpi	r18, 0x1A	; 26
    1d56:	31 05       	cpc	r19, r1
    1d58:	2c f0       	brlt	.+10     	; 0x1d64 <__pack_f+0x76>
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	2a c0       	rjmp	.+84     	; 0x1db8 <__pack_f+0xca>
    1d64:	b8 01       	movw	r22, r16
    1d66:	a7 01       	movw	r20, r14
    1d68:	02 2e       	mov	r0, r18
    1d6a:	04 c0       	rjmp	.+8      	; 0x1d74 <__pack_f+0x86>
    1d6c:	76 95       	lsr	r23
    1d6e:	67 95       	ror	r22
    1d70:	57 95       	ror	r21
    1d72:	47 95       	ror	r20
    1d74:	0a 94       	dec	r0
    1d76:	d2 f7       	brpl	.-12     	; 0x1d6c <__pack_f+0x7e>
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e0       	ldi	r26, 0x00	; 0
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <__pack_f+0x9c>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	aa 1f       	adc	r26, r26
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	2a 95       	dec	r18
    1d8c:	d2 f7       	brpl	.-12     	; 0x1d82 <__pack_f+0x94>
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	a1 09       	sbc	r26, r1
    1d92:	b1 09       	sbc	r27, r1
    1d94:	8e 21       	and	r24, r14
    1d96:	9f 21       	and	r25, r15
    1d98:	a0 23       	and	r26, r16
    1d9a:	b1 23       	and	r27, r17
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	a1 05       	cpc	r26, r1
    1da0:	b1 05       	cpc	r27, r1
    1da2:	21 f0       	breq	.+8      	; 0x1dac <__pack_f+0xbe>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e0       	ldi	r26, 0x00	; 0
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	9a 01       	movw	r18, r20
    1dae:	ab 01       	movw	r20, r22
    1db0:	28 2b       	or	r18, r24
    1db2:	39 2b       	or	r19, r25
    1db4:	4a 2b       	or	r20, r26
    1db6:	5b 2b       	or	r21, r27
    1db8:	da 01       	movw	r26, r20
    1dba:	c9 01       	movw	r24, r18
    1dbc:	8f 77       	andi	r24, 0x7F	; 127
    1dbe:	90 70       	andi	r25, 0x00	; 0
    1dc0:	a0 70       	andi	r26, 0x00	; 0
    1dc2:	b0 70       	andi	r27, 0x00	; 0
    1dc4:	80 34       	cpi	r24, 0x40	; 64
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	a1 05       	cpc	r26, r1
    1dca:	b1 05       	cpc	r27, r1
    1dcc:	39 f4       	brne	.+14     	; 0x1ddc <__pack_f+0xee>
    1dce:	27 ff       	sbrs	r18, 7
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <__pack_f+0xf6>
    1dd2:	20 5c       	subi	r18, 0xC0	; 192
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	4f 4f       	sbci	r20, 0xFF	; 255
    1dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <__pack_f+0xf6>
    1ddc:	21 5c       	subi	r18, 0xC1	; 193
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	4f 4f       	sbci	r20, 0xFF	; 255
    1de2:	5f 4f       	sbci	r21, 0xFF	; 255
    1de4:	e0 e0       	ldi	r30, 0x00	; 0
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	20 30       	cpi	r18, 0x00	; 0
    1dea:	a0 e0       	ldi	r26, 0x00	; 0
    1dec:	3a 07       	cpc	r19, r26
    1dee:	a0 e0       	ldi	r26, 0x00	; 0
    1df0:	4a 07       	cpc	r20, r26
    1df2:	a0 e4       	ldi	r26, 0x40	; 64
    1df4:	5a 07       	cpc	r21, r26
    1df6:	10 f0       	brcs	.+4      	; 0x1dfc <__pack_f+0x10e>
    1df8:	e1 e0       	ldi	r30, 0x01	; 1
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	79 01       	movw	r14, r18
    1dfe:	8a 01       	movw	r16, r20
    1e00:	27 c0       	rjmp	.+78     	; 0x1e50 <__pack_f+0x162>
    1e02:	60 38       	cpi	r22, 0x80	; 128
    1e04:	71 05       	cpc	r23, r1
    1e06:	64 f5       	brge	.+88     	; 0x1e60 <__pack_f+0x172>
    1e08:	fb 01       	movw	r30, r22
    1e0a:	e1 58       	subi	r30, 0x81	; 129
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	d8 01       	movw	r26, r16
    1e10:	c7 01       	movw	r24, r14
    1e12:	8f 77       	andi	r24, 0x7F	; 127
    1e14:	90 70       	andi	r25, 0x00	; 0
    1e16:	a0 70       	andi	r26, 0x00	; 0
    1e18:	b0 70       	andi	r27, 0x00	; 0
    1e1a:	80 34       	cpi	r24, 0x40	; 64
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	a1 05       	cpc	r26, r1
    1e20:	b1 05       	cpc	r27, r1
    1e22:	39 f4       	brne	.+14     	; 0x1e32 <__pack_f+0x144>
    1e24:	e7 fe       	sbrs	r14, 7
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <__pack_f+0x154>
    1e28:	80 e4       	ldi	r24, 0x40	; 64
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 e0       	ldi	r26, 0x00	; 0
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <__pack_f+0x14c>
    1e32:	8f e3       	ldi	r24, 0x3F	; 63
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	a0 e0       	ldi	r26, 0x00	; 0
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e8 0e       	add	r14, r24
    1e3c:	f9 1e       	adc	r15, r25
    1e3e:	0a 1f       	adc	r16, r26
    1e40:	1b 1f       	adc	r17, r27
    1e42:	17 ff       	sbrs	r17, 7
    1e44:	05 c0       	rjmp	.+10     	; 0x1e50 <__pack_f+0x162>
    1e46:	16 95       	lsr	r17
    1e48:	07 95       	ror	r16
    1e4a:	f7 94       	ror	r15
    1e4c:	e7 94       	ror	r14
    1e4e:	31 96       	adiw	r30, 0x01	; 1
    1e50:	87 e0       	ldi	r24, 0x07	; 7
    1e52:	16 95       	lsr	r17
    1e54:	07 95       	ror	r16
    1e56:	f7 94       	ror	r15
    1e58:	e7 94       	ror	r14
    1e5a:	8a 95       	dec	r24
    1e5c:	d1 f7       	brne	.-12     	; 0x1e52 <__pack_f+0x164>
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <__pack_f+0x17c>
    1e60:	ee 24       	eor	r14, r14
    1e62:	ff 24       	eor	r15, r15
    1e64:	87 01       	movw	r16, r14
    1e66:	ef ef       	ldi	r30, 0xFF	; 255
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	6e 2f       	mov	r22, r30
    1e6c:	67 95       	ror	r22
    1e6e:	66 27       	eor	r22, r22
    1e70:	67 95       	ror	r22
    1e72:	90 2f       	mov	r25, r16
    1e74:	9f 77       	andi	r25, 0x7F	; 127
    1e76:	d7 94       	ror	r13
    1e78:	dd 24       	eor	r13, r13
    1e7a:	d7 94       	ror	r13
    1e7c:	8e 2f       	mov	r24, r30
    1e7e:	86 95       	lsr	r24
    1e80:	49 2f       	mov	r20, r25
    1e82:	46 2b       	or	r20, r22
    1e84:	58 2f       	mov	r21, r24
    1e86:	5d 29       	or	r21, r13
    1e88:	b7 01       	movw	r22, r14
    1e8a:	ca 01       	movw	r24, r20
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	08 95       	ret

00001e98 <__unpack_f>:
    1e98:	fc 01       	movw	r30, r24
    1e9a:	db 01       	movw	r26, r22
    1e9c:	40 81       	ld	r20, Z
    1e9e:	51 81       	ldd	r21, Z+1	; 0x01
    1ea0:	22 81       	ldd	r18, Z+2	; 0x02
    1ea2:	62 2f       	mov	r22, r18
    1ea4:	6f 77       	andi	r22, 0x7F	; 127
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	22 1f       	adc	r18, r18
    1eaa:	22 27       	eor	r18, r18
    1eac:	22 1f       	adc	r18, r18
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	89 2f       	mov	r24, r25
    1eb2:	88 0f       	add	r24, r24
    1eb4:	82 2b       	or	r24, r18
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	99 1f       	adc	r25, r25
    1ebc:	99 27       	eor	r25, r25
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	11 96       	adiw	r26, 0x01	; 1
    1ec2:	9c 93       	st	X, r25
    1ec4:	11 97       	sbiw	r26, 0x01	; 1
    1ec6:	21 15       	cp	r18, r1
    1ec8:	31 05       	cpc	r19, r1
    1eca:	a9 f5       	brne	.+106    	; 0x1f36 <__unpack_f+0x9e>
    1ecc:	41 15       	cp	r20, r1
    1ece:	51 05       	cpc	r21, r1
    1ed0:	61 05       	cpc	r22, r1
    1ed2:	71 05       	cpc	r23, r1
    1ed4:	11 f4       	brne	.+4      	; 0x1eda <__unpack_f+0x42>
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	37 c0       	rjmp	.+110    	; 0x1f48 <__unpack_f+0xb0>
    1eda:	82 e8       	ldi	r24, 0x82	; 130
    1edc:	9f ef       	ldi	r25, 0xFF	; 255
    1ede:	13 96       	adiw	r26, 0x03	; 3
    1ee0:	9c 93       	st	X, r25
    1ee2:	8e 93       	st	-X, r24
    1ee4:	12 97       	sbiw	r26, 0x02	; 2
    1ee6:	9a 01       	movw	r18, r20
    1ee8:	ab 01       	movw	r20, r22
    1eea:	67 e0       	ldi	r22, 0x07	; 7
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	44 1f       	adc	r20, r20
    1ef2:	55 1f       	adc	r21, r21
    1ef4:	6a 95       	dec	r22
    1ef6:	d1 f7       	brne	.-12     	; 0x1eec <__unpack_f+0x54>
    1ef8:	83 e0       	ldi	r24, 0x03	; 3
    1efa:	8c 93       	st	X, r24
    1efc:	0d c0       	rjmp	.+26     	; 0x1f18 <__unpack_f+0x80>
    1efe:	22 0f       	add	r18, r18
    1f00:	33 1f       	adc	r19, r19
    1f02:	44 1f       	adc	r20, r20
    1f04:	55 1f       	adc	r21, r21
    1f06:	12 96       	adiw	r26, 0x02	; 2
    1f08:	8d 91       	ld	r24, X+
    1f0a:	9c 91       	ld	r25, X
    1f0c:	13 97       	sbiw	r26, 0x03	; 3
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	13 96       	adiw	r26, 0x03	; 3
    1f12:	9c 93       	st	X, r25
    1f14:	8e 93       	st	-X, r24
    1f16:	12 97       	sbiw	r26, 0x02	; 2
    1f18:	20 30       	cpi	r18, 0x00	; 0
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	38 07       	cpc	r19, r24
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	48 07       	cpc	r20, r24
    1f22:	80 e4       	ldi	r24, 0x40	; 64
    1f24:	58 07       	cpc	r21, r24
    1f26:	58 f3       	brcs	.-42     	; 0x1efe <__unpack_f+0x66>
    1f28:	14 96       	adiw	r26, 0x04	; 4
    1f2a:	2d 93       	st	X+, r18
    1f2c:	3d 93       	st	X+, r19
    1f2e:	4d 93       	st	X+, r20
    1f30:	5c 93       	st	X, r21
    1f32:	17 97       	sbiw	r26, 0x07	; 7
    1f34:	08 95       	ret
    1f36:	2f 3f       	cpi	r18, 0xFF	; 255
    1f38:	31 05       	cpc	r19, r1
    1f3a:	79 f4       	brne	.+30     	; 0x1f5a <__unpack_f+0xc2>
    1f3c:	41 15       	cp	r20, r1
    1f3e:	51 05       	cpc	r21, r1
    1f40:	61 05       	cpc	r22, r1
    1f42:	71 05       	cpc	r23, r1
    1f44:	19 f4       	brne	.+6      	; 0x1f4c <__unpack_f+0xb4>
    1f46:	84 e0       	ldi	r24, 0x04	; 4
    1f48:	8c 93       	st	X, r24
    1f4a:	08 95       	ret
    1f4c:	64 ff       	sbrs	r22, 4
    1f4e:	03 c0       	rjmp	.+6      	; 0x1f56 <__unpack_f+0xbe>
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	8c 93       	st	X, r24
    1f54:	12 c0       	rjmp	.+36     	; 0x1f7a <__unpack_f+0xe2>
    1f56:	1c 92       	st	X, r1
    1f58:	10 c0       	rjmp	.+32     	; 0x1f7a <__unpack_f+0xe2>
    1f5a:	2f 57       	subi	r18, 0x7F	; 127
    1f5c:	30 40       	sbci	r19, 0x00	; 0
    1f5e:	13 96       	adiw	r26, 0x03	; 3
    1f60:	3c 93       	st	X, r19
    1f62:	2e 93       	st	-X, r18
    1f64:	12 97       	sbiw	r26, 0x02	; 2
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	8c 93       	st	X, r24
    1f6a:	87 e0       	ldi	r24, 0x07	; 7
    1f6c:	44 0f       	add	r20, r20
    1f6e:	55 1f       	adc	r21, r21
    1f70:	66 1f       	adc	r22, r22
    1f72:	77 1f       	adc	r23, r23
    1f74:	8a 95       	dec	r24
    1f76:	d1 f7       	brne	.-12     	; 0x1f6c <__unpack_f+0xd4>
    1f78:	70 64       	ori	r23, 0x40	; 64
    1f7a:	14 96       	adiw	r26, 0x04	; 4
    1f7c:	4d 93       	st	X+, r20
    1f7e:	5d 93       	st	X+, r21
    1f80:	6d 93       	st	X+, r22
    1f82:	7c 93       	st	X, r23
    1f84:	17 97       	sbiw	r26, 0x07	; 7
    1f86:	08 95       	ret

00001f88 <__fpcmp_parts_f>:
    1f88:	1f 93       	push	r17
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	fb 01       	movw	r30, r22
    1f8e:	9c 91       	ld	r25, X
    1f90:	92 30       	cpi	r25, 0x02	; 2
    1f92:	08 f4       	brcc	.+2      	; 0x1f96 <__fpcmp_parts_f+0xe>
    1f94:	47 c0       	rjmp	.+142    	; 0x2024 <__fpcmp_parts_f+0x9c>
    1f96:	80 81       	ld	r24, Z
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	08 f4       	brcc	.+2      	; 0x1f9e <__fpcmp_parts_f+0x16>
    1f9c:	43 c0       	rjmp	.+134    	; 0x2024 <__fpcmp_parts_f+0x9c>
    1f9e:	94 30       	cpi	r25, 0x04	; 4
    1fa0:	51 f4       	brne	.+20     	; 0x1fb6 <__fpcmp_parts_f+0x2e>
    1fa2:	11 96       	adiw	r26, 0x01	; 1
    1fa4:	1c 91       	ld	r17, X
    1fa6:	84 30       	cpi	r24, 0x04	; 4
    1fa8:	99 f5       	brne	.+102    	; 0x2010 <__fpcmp_parts_f+0x88>
    1faa:	81 81       	ldd	r24, Z+1	; 0x01
    1fac:	68 2f       	mov	r22, r24
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	61 1b       	sub	r22, r17
    1fb2:	71 09       	sbc	r23, r1
    1fb4:	3f c0       	rjmp	.+126    	; 0x2034 <__fpcmp_parts_f+0xac>
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	21 f0       	breq	.+8      	; 0x1fc2 <__fpcmp_parts_f+0x3a>
    1fba:	92 30       	cpi	r25, 0x02	; 2
    1fbc:	31 f4       	brne	.+12     	; 0x1fca <__fpcmp_parts_f+0x42>
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	b9 f1       	breq	.+110    	; 0x2030 <__fpcmp_parts_f+0xa8>
    1fc2:	81 81       	ldd	r24, Z+1	; 0x01
    1fc4:	88 23       	and	r24, r24
    1fc6:	89 f1       	breq	.+98     	; 0x202a <__fpcmp_parts_f+0xa2>
    1fc8:	2d c0       	rjmp	.+90     	; 0x2024 <__fpcmp_parts_f+0x9c>
    1fca:	11 96       	adiw	r26, 0x01	; 1
    1fcc:	1c 91       	ld	r17, X
    1fce:	11 97       	sbiw	r26, 0x01	; 1
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	f1 f0       	breq	.+60     	; 0x2010 <__fpcmp_parts_f+0x88>
    1fd4:	81 81       	ldd	r24, Z+1	; 0x01
    1fd6:	18 17       	cp	r17, r24
    1fd8:	d9 f4       	brne	.+54     	; 0x2010 <__fpcmp_parts_f+0x88>
    1fda:	12 96       	adiw	r26, 0x02	; 2
    1fdc:	2d 91       	ld	r18, X+
    1fde:	3c 91       	ld	r19, X
    1fe0:	13 97       	sbiw	r26, 0x03	; 3
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	82 17       	cp	r24, r18
    1fe8:	93 07       	cpc	r25, r19
    1fea:	94 f0       	brlt	.+36     	; 0x2010 <__fpcmp_parts_f+0x88>
    1fec:	28 17       	cp	r18, r24
    1fee:	39 07       	cpc	r19, r25
    1ff0:	bc f0       	brlt	.+46     	; 0x2020 <__fpcmp_parts_f+0x98>
    1ff2:	14 96       	adiw	r26, 0x04	; 4
    1ff4:	8d 91       	ld	r24, X+
    1ff6:	9d 91       	ld	r25, X+
    1ff8:	0d 90       	ld	r0, X+
    1ffa:	bc 91       	ld	r27, X
    1ffc:	a0 2d       	mov	r26, r0
    1ffe:	24 81       	ldd	r18, Z+4	; 0x04
    2000:	35 81       	ldd	r19, Z+5	; 0x05
    2002:	46 81       	ldd	r20, Z+6	; 0x06
    2004:	57 81       	ldd	r21, Z+7	; 0x07
    2006:	28 17       	cp	r18, r24
    2008:	39 07       	cpc	r19, r25
    200a:	4a 07       	cpc	r20, r26
    200c:	5b 07       	cpc	r21, r27
    200e:	18 f4       	brcc	.+6      	; 0x2016 <__fpcmp_parts_f+0x8e>
    2010:	11 23       	and	r17, r17
    2012:	41 f0       	breq	.+16     	; 0x2024 <__fpcmp_parts_f+0x9c>
    2014:	0a c0       	rjmp	.+20     	; 0x202a <__fpcmp_parts_f+0xa2>
    2016:	82 17       	cp	r24, r18
    2018:	93 07       	cpc	r25, r19
    201a:	a4 07       	cpc	r26, r20
    201c:	b5 07       	cpc	r27, r21
    201e:	40 f4       	brcc	.+16     	; 0x2030 <__fpcmp_parts_f+0xa8>
    2020:	11 23       	and	r17, r17
    2022:	19 f0       	breq	.+6      	; 0x202a <__fpcmp_parts_f+0xa2>
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	05 c0       	rjmp	.+10     	; 0x2034 <__fpcmp_parts_f+0xac>
    202a:	6f ef       	ldi	r22, 0xFF	; 255
    202c:	7f ef       	ldi	r23, 0xFF	; 255
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <__fpcmp_parts_f+0xac>
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	cb 01       	movw	r24, r22
    2036:	1f 91       	pop	r17
    2038:	08 95       	ret

0000203a <__prologue_saves__>:
    203a:	2f 92       	push	r2
    203c:	3f 92       	push	r3
    203e:	4f 92       	push	r4
    2040:	5f 92       	push	r5
    2042:	6f 92       	push	r6
    2044:	7f 92       	push	r7
    2046:	8f 92       	push	r8
    2048:	9f 92       	push	r9
    204a:	af 92       	push	r10
    204c:	bf 92       	push	r11
    204e:	cf 92       	push	r12
    2050:	df 92       	push	r13
    2052:	ef 92       	push	r14
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	ca 1b       	sub	r28, r26
    2064:	db 0b       	sbc	r29, r27
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	09 94       	ijmp

00002072 <__epilogue_restores__>:
    2072:	2a 88       	ldd	r2, Y+18	; 0x12
    2074:	39 88       	ldd	r3, Y+17	; 0x11
    2076:	48 88       	ldd	r4, Y+16	; 0x10
    2078:	5f 84       	ldd	r5, Y+15	; 0x0f
    207a:	6e 84       	ldd	r6, Y+14	; 0x0e
    207c:	7d 84       	ldd	r7, Y+13	; 0x0d
    207e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2080:	9b 84       	ldd	r9, Y+11	; 0x0b
    2082:	aa 84       	ldd	r10, Y+10	; 0x0a
    2084:	b9 84       	ldd	r11, Y+9	; 0x09
    2086:	c8 84       	ldd	r12, Y+8	; 0x08
    2088:	df 80       	ldd	r13, Y+7	; 0x07
    208a:	ee 80       	ldd	r14, Y+6	; 0x06
    208c:	fd 80       	ldd	r15, Y+5	; 0x05
    208e:	0c 81       	ldd	r16, Y+4	; 0x04
    2090:	1b 81       	ldd	r17, Y+3	; 0x03
    2092:	aa 81       	ldd	r26, Y+2	; 0x02
    2094:	b9 81       	ldd	r27, Y+1	; 0x01
    2096:	ce 0f       	add	r28, r30
    2098:	d1 1d       	adc	r29, r1
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	ed 01       	movw	r28, r26
    20a6:	08 95       	ret

000020a8 <printf>:
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	fe 01       	movw	r30, r28
    20b2:	35 96       	adiw	r30, 0x05	; 5
    20b4:	61 91       	ld	r22, Z+
    20b6:	71 91       	ld	r23, Z+
    20b8:	80 91 74 02 	lds	r24, 0x0274
    20bc:	90 91 75 02 	lds	r25, 0x0275
    20c0:	af 01       	movw	r20, r30
    20c2:	0e 94 9b 10 	call	0x2136	; 0x2136 <vfprintf>
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <puts>:
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	8c 01       	movw	r16, r24
    20d6:	e0 91 74 02 	lds	r30, 0x0274
    20da:	f0 91 75 02 	lds	r31, 0x0275
    20de:	83 81       	ldd	r24, Z+3	; 0x03
    20e0:	81 ff       	sbrs	r24, 1
    20e2:	21 c0       	rjmp	.+66     	; 0x2126 <puts+0x5a>
    20e4:	c0 e0       	ldi	r28, 0x00	; 0
    20e6:	d0 e0       	ldi	r29, 0x00	; 0
    20e8:	0d c0       	rjmp	.+26     	; 0x2104 <puts+0x38>
    20ea:	e0 91 74 02 	lds	r30, 0x0274
    20ee:	f0 91 75 02 	lds	r31, 0x0275
    20f2:	20 85       	ldd	r18, Z+8	; 0x08
    20f4:	31 85       	ldd	r19, Z+9	; 0x09
    20f6:	bf 01       	movw	r22, r30
    20f8:	f9 01       	movw	r30, r18
    20fa:	09 95       	icall
    20fc:	89 2b       	or	r24, r25
    20fe:	11 f0       	breq	.+4      	; 0x2104 <puts+0x38>
    2100:	cf ef       	ldi	r28, 0xFF	; 255
    2102:	df ef       	ldi	r29, 0xFF	; 255
    2104:	f8 01       	movw	r30, r16
    2106:	81 91       	ld	r24, Z+
    2108:	8f 01       	movw	r16, r30
    210a:	88 23       	and	r24, r24
    210c:	71 f7       	brne	.-36     	; 0x20ea <puts+0x1e>
    210e:	e0 91 74 02 	lds	r30, 0x0274
    2112:	f0 91 75 02 	lds	r31, 0x0275
    2116:	20 85       	ldd	r18, Z+8	; 0x08
    2118:	31 85       	ldd	r19, Z+9	; 0x09
    211a:	8a e0       	ldi	r24, 0x0A	; 10
    211c:	bf 01       	movw	r22, r30
    211e:	f9 01       	movw	r30, r18
    2120:	09 95       	icall
    2122:	89 2b       	or	r24, r25
    2124:	11 f0       	breq	.+4      	; 0x212a <puts+0x5e>
    2126:	cf ef       	ldi	r28, 0xFF	; 255
    2128:	df ef       	ldi	r29, 0xFF	; 255
    212a:	ce 01       	movw	r24, r28
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	08 95       	ret

00002136 <vfprintf>:
    2136:	2f 92       	push	r2
    2138:	3f 92       	push	r3
    213a:	4f 92       	push	r4
    213c:	5f 92       	push	r5
    213e:	6f 92       	push	r6
    2140:	7f 92       	push	r7
    2142:	8f 92       	push	r8
    2144:	9f 92       	push	r9
    2146:	af 92       	push	r10
    2148:	bf 92       	push	r11
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	0f 93       	push	r16
    2154:	1f 93       	push	r17
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	2b 97       	sbiw	r28, 0x0b	; 11
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	3c 01       	movw	r6, r24
    216c:	2b 01       	movw	r4, r22
    216e:	5a 01       	movw	r10, r20
    2170:	fc 01       	movw	r30, r24
    2172:	17 82       	std	Z+7, r1	; 0x07
    2174:	16 82       	std	Z+6, r1	; 0x06
    2176:	83 81       	ldd	r24, Z+3	; 0x03
    2178:	81 fd       	sbrc	r24, 1
    217a:	03 c0       	rjmp	.+6      	; 0x2182 <vfprintf+0x4c>
    217c:	6f ef       	ldi	r22, 0xFF	; 255
    217e:	7f ef       	ldi	r23, 0xFF	; 255
    2180:	c6 c1       	rjmp	.+908    	; 0x250e <vfprintf+0x3d8>
    2182:	9a e0       	ldi	r25, 0x0A	; 10
    2184:	89 2e       	mov	r8, r25
    2186:	1e 01       	movw	r2, r28
    2188:	08 94       	sec
    218a:	21 1c       	adc	r2, r1
    218c:	31 1c       	adc	r3, r1
    218e:	f3 01       	movw	r30, r6
    2190:	23 81       	ldd	r18, Z+3	; 0x03
    2192:	f2 01       	movw	r30, r4
    2194:	23 fd       	sbrc	r18, 3
    2196:	85 91       	lpm	r24, Z+
    2198:	23 ff       	sbrs	r18, 3
    219a:	81 91       	ld	r24, Z+
    219c:	2f 01       	movw	r4, r30
    219e:	88 23       	and	r24, r24
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <vfprintf+0x6e>
    21a2:	b2 c1       	rjmp	.+868    	; 0x2508 <vfprintf+0x3d2>
    21a4:	85 32       	cpi	r24, 0x25	; 37
    21a6:	39 f4       	brne	.+14     	; 0x21b6 <vfprintf+0x80>
    21a8:	23 fd       	sbrc	r18, 3
    21aa:	85 91       	lpm	r24, Z+
    21ac:	23 ff       	sbrs	r18, 3
    21ae:	81 91       	ld	r24, Z+
    21b0:	2f 01       	movw	r4, r30
    21b2:	85 32       	cpi	r24, 0x25	; 37
    21b4:	29 f4       	brne	.+10     	; 0x21c0 <vfprintf+0x8a>
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	b3 01       	movw	r22, r6
    21ba:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    21be:	e7 cf       	rjmp	.-50     	; 0x218e <vfprintf+0x58>
    21c0:	98 2f       	mov	r25, r24
    21c2:	ff 24       	eor	r15, r15
    21c4:	ee 24       	eor	r14, r14
    21c6:	99 24       	eor	r9, r9
    21c8:	ff e1       	ldi	r31, 0x1F	; 31
    21ca:	ff 15       	cp	r31, r15
    21cc:	d0 f0       	brcs	.+52     	; 0x2202 <vfprintf+0xcc>
    21ce:	9b 32       	cpi	r25, 0x2B	; 43
    21d0:	69 f0       	breq	.+26     	; 0x21ec <vfprintf+0xb6>
    21d2:	9c 32       	cpi	r25, 0x2C	; 44
    21d4:	28 f4       	brcc	.+10     	; 0x21e0 <vfprintf+0xaa>
    21d6:	90 32       	cpi	r25, 0x20	; 32
    21d8:	59 f0       	breq	.+22     	; 0x21f0 <vfprintf+0xba>
    21da:	93 32       	cpi	r25, 0x23	; 35
    21dc:	91 f4       	brne	.+36     	; 0x2202 <vfprintf+0xcc>
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <vfprintf+0xc6>
    21e0:	9d 32       	cpi	r25, 0x2D	; 45
    21e2:	49 f0       	breq	.+18     	; 0x21f6 <vfprintf+0xc0>
    21e4:	90 33       	cpi	r25, 0x30	; 48
    21e6:	69 f4       	brne	.+26     	; 0x2202 <vfprintf+0xcc>
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	24 c0       	rjmp	.+72     	; 0x2234 <vfprintf+0xfe>
    21ec:	52 e0       	ldi	r21, 0x02	; 2
    21ee:	f5 2a       	or	r15, r21
    21f0:	84 e0       	ldi	r24, 0x04	; 4
    21f2:	f8 2a       	or	r15, r24
    21f4:	28 c0       	rjmp	.+80     	; 0x2246 <vfprintf+0x110>
    21f6:	98 e0       	ldi	r25, 0x08	; 8
    21f8:	f9 2a       	or	r15, r25
    21fa:	25 c0       	rjmp	.+74     	; 0x2246 <vfprintf+0x110>
    21fc:	e0 e1       	ldi	r30, 0x10	; 16
    21fe:	fe 2a       	or	r15, r30
    2200:	22 c0       	rjmp	.+68     	; 0x2246 <vfprintf+0x110>
    2202:	f7 fc       	sbrc	r15, 7
    2204:	29 c0       	rjmp	.+82     	; 0x2258 <vfprintf+0x122>
    2206:	89 2f       	mov	r24, r25
    2208:	80 53       	subi	r24, 0x30	; 48
    220a:	8a 30       	cpi	r24, 0x0A	; 10
    220c:	70 f4       	brcc	.+28     	; 0x222a <vfprintf+0xf4>
    220e:	f6 fe       	sbrs	r15, 6
    2210:	05 c0       	rjmp	.+10     	; 0x221c <vfprintf+0xe6>
    2212:	98 9c       	mul	r9, r8
    2214:	90 2c       	mov	r9, r0
    2216:	11 24       	eor	r1, r1
    2218:	98 0e       	add	r9, r24
    221a:	15 c0       	rjmp	.+42     	; 0x2246 <vfprintf+0x110>
    221c:	e8 9c       	mul	r14, r8
    221e:	e0 2c       	mov	r14, r0
    2220:	11 24       	eor	r1, r1
    2222:	e8 0e       	add	r14, r24
    2224:	f0 e2       	ldi	r31, 0x20	; 32
    2226:	ff 2a       	or	r15, r31
    2228:	0e c0       	rjmp	.+28     	; 0x2246 <vfprintf+0x110>
    222a:	9e 32       	cpi	r25, 0x2E	; 46
    222c:	29 f4       	brne	.+10     	; 0x2238 <vfprintf+0x102>
    222e:	f6 fc       	sbrc	r15, 6
    2230:	6b c1       	rjmp	.+726    	; 0x2508 <vfprintf+0x3d2>
    2232:	40 e4       	ldi	r20, 0x40	; 64
    2234:	f4 2a       	or	r15, r20
    2236:	07 c0       	rjmp	.+14     	; 0x2246 <vfprintf+0x110>
    2238:	9c 36       	cpi	r25, 0x6C	; 108
    223a:	19 f4       	brne	.+6      	; 0x2242 <vfprintf+0x10c>
    223c:	50 e8       	ldi	r21, 0x80	; 128
    223e:	f5 2a       	or	r15, r21
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <vfprintf+0x110>
    2242:	98 36       	cpi	r25, 0x68	; 104
    2244:	49 f4       	brne	.+18     	; 0x2258 <vfprintf+0x122>
    2246:	f2 01       	movw	r30, r4
    2248:	23 fd       	sbrc	r18, 3
    224a:	95 91       	lpm	r25, Z+
    224c:	23 ff       	sbrs	r18, 3
    224e:	91 91       	ld	r25, Z+
    2250:	2f 01       	movw	r4, r30
    2252:	99 23       	and	r25, r25
    2254:	09 f0       	breq	.+2      	; 0x2258 <vfprintf+0x122>
    2256:	b8 cf       	rjmp	.-144    	; 0x21c8 <vfprintf+0x92>
    2258:	89 2f       	mov	r24, r25
    225a:	85 54       	subi	r24, 0x45	; 69
    225c:	83 30       	cpi	r24, 0x03	; 3
    225e:	18 f0       	brcs	.+6      	; 0x2266 <vfprintf+0x130>
    2260:	80 52       	subi	r24, 0x20	; 32
    2262:	83 30       	cpi	r24, 0x03	; 3
    2264:	38 f4       	brcc	.+14     	; 0x2274 <vfprintf+0x13e>
    2266:	44 e0       	ldi	r20, 0x04	; 4
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	a4 0e       	add	r10, r20
    226c:	b5 1e       	adc	r11, r21
    226e:	5f e3       	ldi	r21, 0x3F	; 63
    2270:	59 83       	std	Y+1, r21	; 0x01
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <vfprintf+0x15c>
    2274:	93 36       	cpi	r25, 0x63	; 99
    2276:	31 f0       	breq	.+12     	; 0x2284 <vfprintf+0x14e>
    2278:	93 37       	cpi	r25, 0x73	; 115
    227a:	79 f0       	breq	.+30     	; 0x229a <vfprintf+0x164>
    227c:	93 35       	cpi	r25, 0x53	; 83
    227e:	09 f0       	breq	.+2      	; 0x2282 <vfprintf+0x14c>
    2280:	56 c0       	rjmp	.+172    	; 0x232e <vfprintf+0x1f8>
    2282:	20 c0       	rjmp	.+64     	; 0x22c4 <vfprintf+0x18e>
    2284:	f5 01       	movw	r30, r10
    2286:	80 81       	ld	r24, Z
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	42 e0       	ldi	r20, 0x02	; 2
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	a4 0e       	add	r10, r20
    2290:	b5 1e       	adc	r11, r21
    2292:	61 01       	movw	r12, r2
    2294:	01 e0       	ldi	r16, 0x01	; 1
    2296:	10 e0       	ldi	r17, 0x00	; 0
    2298:	12 c0       	rjmp	.+36     	; 0x22be <vfprintf+0x188>
    229a:	f5 01       	movw	r30, r10
    229c:	c0 80       	ld	r12, Z
    229e:	d1 80       	ldd	r13, Z+1	; 0x01
    22a0:	f6 fc       	sbrc	r15, 6
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <vfprintf+0x174>
    22a4:	6f ef       	ldi	r22, 0xFF	; 255
    22a6:	7f ef       	ldi	r23, 0xFF	; 255
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <vfprintf+0x178>
    22aa:	69 2d       	mov	r22, r9
    22ac:	70 e0       	ldi	r23, 0x00	; 0
    22ae:	42 e0       	ldi	r20, 0x02	; 2
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	a4 0e       	add	r10, r20
    22b4:	b5 1e       	adc	r11, r21
    22b6:	c6 01       	movw	r24, r12
    22b8:	0e 94 ac 12 	call	0x2558	; 0x2558 <strnlen>
    22bc:	8c 01       	movw	r16, r24
    22be:	5f e7       	ldi	r21, 0x7F	; 127
    22c0:	f5 22       	and	r15, r21
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <vfprintf+0x1b6>
    22c4:	f5 01       	movw	r30, r10
    22c6:	c0 80       	ld	r12, Z
    22c8:	d1 80       	ldd	r13, Z+1	; 0x01
    22ca:	f6 fc       	sbrc	r15, 6
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <vfprintf+0x19e>
    22ce:	6f ef       	ldi	r22, 0xFF	; 255
    22d0:	7f ef       	ldi	r23, 0xFF	; 255
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <vfprintf+0x1a2>
    22d4:	69 2d       	mov	r22, r9
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	42 e0       	ldi	r20, 0x02	; 2
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	a4 0e       	add	r10, r20
    22de:	b5 1e       	adc	r11, r21
    22e0:	c6 01       	movw	r24, r12
    22e2:	0e 94 a1 12 	call	0x2542	; 0x2542 <strnlen_P>
    22e6:	8c 01       	movw	r16, r24
    22e8:	50 e8       	ldi	r21, 0x80	; 128
    22ea:	f5 2a       	or	r15, r21
    22ec:	f3 fe       	sbrs	r15, 3
    22ee:	07 c0       	rjmp	.+14     	; 0x22fe <vfprintf+0x1c8>
    22f0:	1a c0       	rjmp	.+52     	; 0x2326 <vfprintf+0x1f0>
    22f2:	80 e2       	ldi	r24, 0x20	; 32
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	b3 01       	movw	r22, r6
    22f8:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    22fc:	ea 94       	dec	r14
    22fe:	8e 2d       	mov	r24, r14
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	08 17       	cp	r16, r24
    2304:	19 07       	cpc	r17, r25
    2306:	a8 f3       	brcs	.-22     	; 0x22f2 <vfprintf+0x1bc>
    2308:	0e c0       	rjmp	.+28     	; 0x2326 <vfprintf+0x1f0>
    230a:	f6 01       	movw	r30, r12
    230c:	f7 fc       	sbrc	r15, 7
    230e:	85 91       	lpm	r24, Z+
    2310:	f7 fe       	sbrs	r15, 7
    2312:	81 91       	ld	r24, Z+
    2314:	6f 01       	movw	r12, r30
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	b3 01       	movw	r22, r6
    231a:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    231e:	e1 10       	cpse	r14, r1
    2320:	ea 94       	dec	r14
    2322:	01 50       	subi	r16, 0x01	; 1
    2324:	10 40       	sbci	r17, 0x00	; 0
    2326:	01 15       	cp	r16, r1
    2328:	11 05       	cpc	r17, r1
    232a:	79 f7       	brne	.-34     	; 0x230a <vfprintf+0x1d4>
    232c:	ea c0       	rjmp	.+468    	; 0x2502 <vfprintf+0x3cc>
    232e:	94 36       	cpi	r25, 0x64	; 100
    2330:	11 f0       	breq	.+4      	; 0x2336 <vfprintf+0x200>
    2332:	99 36       	cpi	r25, 0x69	; 105
    2334:	69 f5       	brne	.+90     	; 0x2390 <vfprintf+0x25a>
    2336:	f7 fe       	sbrs	r15, 7
    2338:	08 c0       	rjmp	.+16     	; 0x234a <vfprintf+0x214>
    233a:	f5 01       	movw	r30, r10
    233c:	20 81       	ld	r18, Z
    233e:	31 81       	ldd	r19, Z+1	; 0x01
    2340:	42 81       	ldd	r20, Z+2	; 0x02
    2342:	53 81       	ldd	r21, Z+3	; 0x03
    2344:	84 e0       	ldi	r24, 0x04	; 4
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	0a c0       	rjmp	.+20     	; 0x235e <vfprintf+0x228>
    234a:	f5 01       	movw	r30, r10
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	9c 01       	movw	r18, r24
    2352:	44 27       	eor	r20, r20
    2354:	37 fd       	sbrc	r19, 7
    2356:	40 95       	com	r20
    2358:	54 2f       	mov	r21, r20
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	a8 0e       	add	r10, r24
    2360:	b9 1e       	adc	r11, r25
    2362:	9f e6       	ldi	r25, 0x6F	; 111
    2364:	f9 22       	and	r15, r25
    2366:	57 ff       	sbrs	r21, 7
    2368:	09 c0       	rjmp	.+18     	; 0x237c <vfprintf+0x246>
    236a:	50 95       	com	r21
    236c:	40 95       	com	r20
    236e:	30 95       	com	r19
    2370:	21 95       	neg	r18
    2372:	3f 4f       	sbci	r19, 0xFF	; 255
    2374:	4f 4f       	sbci	r20, 0xFF	; 255
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	e0 e8       	ldi	r30, 0x80	; 128
    237a:	fe 2a       	or	r15, r30
    237c:	ca 01       	movw	r24, r20
    237e:	b9 01       	movw	r22, r18
    2380:	a1 01       	movw	r20, r2
    2382:	2a e0       	ldi	r18, 0x0A	; 10
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__ultoa_invert>
    238a:	d8 2e       	mov	r13, r24
    238c:	d2 18       	sub	r13, r2
    238e:	40 c0       	rjmp	.+128    	; 0x2410 <vfprintf+0x2da>
    2390:	95 37       	cpi	r25, 0x75	; 117
    2392:	29 f4       	brne	.+10     	; 0x239e <vfprintf+0x268>
    2394:	1f 2d       	mov	r17, r15
    2396:	1f 7e       	andi	r17, 0xEF	; 239
    2398:	2a e0       	ldi	r18, 0x0A	; 10
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	1d c0       	rjmp	.+58     	; 0x23d8 <vfprintf+0x2a2>
    239e:	1f 2d       	mov	r17, r15
    23a0:	19 7f       	andi	r17, 0xF9	; 249
    23a2:	9f 36       	cpi	r25, 0x6F	; 111
    23a4:	61 f0       	breq	.+24     	; 0x23be <vfprintf+0x288>
    23a6:	90 37       	cpi	r25, 0x70	; 112
    23a8:	20 f4       	brcc	.+8      	; 0x23b2 <vfprintf+0x27c>
    23aa:	98 35       	cpi	r25, 0x58	; 88
    23ac:	09 f0       	breq	.+2      	; 0x23b0 <vfprintf+0x27a>
    23ae:	ac c0       	rjmp	.+344    	; 0x2508 <vfprintf+0x3d2>
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <vfprintf+0x29a>
    23b2:	90 37       	cpi	r25, 0x70	; 112
    23b4:	39 f0       	breq	.+14     	; 0x23c4 <vfprintf+0x28e>
    23b6:	98 37       	cpi	r25, 0x78	; 120
    23b8:	09 f0       	breq	.+2      	; 0x23bc <vfprintf+0x286>
    23ba:	a6 c0       	rjmp	.+332    	; 0x2508 <vfprintf+0x3d2>
    23bc:	04 c0       	rjmp	.+8      	; 0x23c6 <vfprintf+0x290>
    23be:	28 e0       	ldi	r18, 0x08	; 8
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	0a c0       	rjmp	.+20     	; 0x23d8 <vfprintf+0x2a2>
    23c4:	10 61       	ori	r17, 0x10	; 16
    23c6:	14 fd       	sbrc	r17, 4
    23c8:	14 60       	ori	r17, 0x04	; 4
    23ca:	20 e1       	ldi	r18, 0x10	; 16
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <vfprintf+0x2a2>
    23d0:	14 fd       	sbrc	r17, 4
    23d2:	16 60       	ori	r17, 0x06	; 6
    23d4:	20 e1       	ldi	r18, 0x10	; 16
    23d6:	32 e0       	ldi	r19, 0x02	; 2
    23d8:	17 ff       	sbrs	r17, 7
    23da:	08 c0       	rjmp	.+16     	; 0x23ec <vfprintf+0x2b6>
    23dc:	f5 01       	movw	r30, r10
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	44 e0       	ldi	r20, 0x04	; 4
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	08 c0       	rjmp	.+16     	; 0x23fc <vfprintf+0x2c6>
    23ec:	f5 01       	movw	r30, r10
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	bc 01       	movw	r22, r24
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	42 e0       	ldi	r20, 0x02	; 2
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	a4 0e       	add	r10, r20
    23fe:	b5 1e       	adc	r11, r21
    2400:	a1 01       	movw	r20, r2
    2402:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__ultoa_invert>
    2406:	d8 2e       	mov	r13, r24
    2408:	d2 18       	sub	r13, r2
    240a:	8f e7       	ldi	r24, 0x7F	; 127
    240c:	f8 2e       	mov	r15, r24
    240e:	f1 22       	and	r15, r17
    2410:	f6 fe       	sbrs	r15, 6
    2412:	0b c0       	rjmp	.+22     	; 0x242a <vfprintf+0x2f4>
    2414:	5e ef       	ldi	r21, 0xFE	; 254
    2416:	f5 22       	and	r15, r21
    2418:	d9 14       	cp	r13, r9
    241a:	38 f4       	brcc	.+14     	; 0x242a <vfprintf+0x2f4>
    241c:	f4 fe       	sbrs	r15, 4
    241e:	07 c0       	rjmp	.+14     	; 0x242e <vfprintf+0x2f8>
    2420:	f2 fc       	sbrc	r15, 2
    2422:	05 c0       	rjmp	.+10     	; 0x242e <vfprintf+0x2f8>
    2424:	8f ee       	ldi	r24, 0xEF	; 239
    2426:	f8 22       	and	r15, r24
    2428:	02 c0       	rjmp	.+4      	; 0x242e <vfprintf+0x2f8>
    242a:	1d 2d       	mov	r17, r13
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <vfprintf+0x2fa>
    242e:	19 2d       	mov	r17, r9
    2430:	f4 fe       	sbrs	r15, 4
    2432:	0d c0       	rjmp	.+26     	; 0x244e <vfprintf+0x318>
    2434:	fe 01       	movw	r30, r28
    2436:	ed 0d       	add	r30, r13
    2438:	f1 1d       	adc	r31, r1
    243a:	80 81       	ld	r24, Z
    243c:	80 33       	cpi	r24, 0x30	; 48
    243e:	19 f4       	brne	.+6      	; 0x2446 <vfprintf+0x310>
    2440:	99 ee       	ldi	r25, 0xE9	; 233
    2442:	f9 22       	and	r15, r25
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <vfprintf+0x320>
    2446:	1f 5f       	subi	r17, 0xFF	; 255
    2448:	f2 fe       	sbrs	r15, 2
    244a:	05 c0       	rjmp	.+10     	; 0x2456 <vfprintf+0x320>
    244c:	03 c0       	rjmp	.+6      	; 0x2454 <vfprintf+0x31e>
    244e:	8f 2d       	mov	r24, r15
    2450:	86 78       	andi	r24, 0x86	; 134
    2452:	09 f0       	breq	.+2      	; 0x2456 <vfprintf+0x320>
    2454:	1f 5f       	subi	r17, 0xFF	; 255
    2456:	0f 2d       	mov	r16, r15
    2458:	f3 fc       	sbrc	r15, 3
    245a:	14 c0       	rjmp	.+40     	; 0x2484 <vfprintf+0x34e>
    245c:	f0 fe       	sbrs	r15, 0
    245e:	0f c0       	rjmp	.+30     	; 0x247e <vfprintf+0x348>
    2460:	1e 15       	cp	r17, r14
    2462:	10 f0       	brcs	.+4      	; 0x2468 <vfprintf+0x332>
    2464:	9d 2c       	mov	r9, r13
    2466:	0b c0       	rjmp	.+22     	; 0x247e <vfprintf+0x348>
    2468:	9d 2c       	mov	r9, r13
    246a:	9e 0c       	add	r9, r14
    246c:	91 1a       	sub	r9, r17
    246e:	1e 2d       	mov	r17, r14
    2470:	06 c0       	rjmp	.+12     	; 0x247e <vfprintf+0x348>
    2472:	80 e2       	ldi	r24, 0x20	; 32
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	b3 01       	movw	r22, r6
    2478:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    247c:	1f 5f       	subi	r17, 0xFF	; 255
    247e:	1e 15       	cp	r17, r14
    2480:	c0 f3       	brcs	.-16     	; 0x2472 <vfprintf+0x33c>
    2482:	04 c0       	rjmp	.+8      	; 0x248c <vfprintf+0x356>
    2484:	1e 15       	cp	r17, r14
    2486:	10 f4       	brcc	.+4      	; 0x248c <vfprintf+0x356>
    2488:	e1 1a       	sub	r14, r17
    248a:	01 c0       	rjmp	.+2      	; 0x248e <vfprintf+0x358>
    248c:	ee 24       	eor	r14, r14
    248e:	04 ff       	sbrs	r16, 4
    2490:	0f c0       	rjmp	.+30     	; 0x24b0 <vfprintf+0x37a>
    2492:	80 e3       	ldi	r24, 0x30	; 48
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	b3 01       	movw	r22, r6
    2498:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    249c:	02 ff       	sbrs	r16, 2
    249e:	1d c0       	rjmp	.+58     	; 0x24da <vfprintf+0x3a4>
    24a0:	01 fd       	sbrc	r16, 1
    24a2:	03 c0       	rjmp	.+6      	; 0x24aa <vfprintf+0x374>
    24a4:	88 e7       	ldi	r24, 0x78	; 120
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0e c0       	rjmp	.+28     	; 0x24c6 <vfprintf+0x390>
    24aa:	88 e5       	ldi	r24, 0x58	; 88
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0b c0       	rjmp	.+22     	; 0x24c6 <vfprintf+0x390>
    24b0:	80 2f       	mov	r24, r16
    24b2:	86 78       	andi	r24, 0x86	; 134
    24b4:	91 f0       	breq	.+36     	; 0x24da <vfprintf+0x3a4>
    24b6:	01 ff       	sbrs	r16, 1
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <vfprintf+0x388>
    24ba:	8b e2       	ldi	r24, 0x2B	; 43
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <vfprintf+0x38a>
    24be:	80 e2       	ldi	r24, 0x20	; 32
    24c0:	f7 fc       	sbrc	r15, 7
    24c2:	8d e2       	ldi	r24, 0x2D	; 45
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	b3 01       	movw	r22, r6
    24c8:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    24cc:	06 c0       	rjmp	.+12     	; 0x24da <vfprintf+0x3a4>
    24ce:	80 e3       	ldi	r24, 0x30	; 48
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	b3 01       	movw	r22, r6
    24d4:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    24d8:	9a 94       	dec	r9
    24da:	d9 14       	cp	r13, r9
    24dc:	c0 f3       	brcs	.-16     	; 0x24ce <vfprintf+0x398>
    24de:	da 94       	dec	r13
    24e0:	f1 01       	movw	r30, r2
    24e2:	ed 0d       	add	r30, r13
    24e4:	f1 1d       	adc	r31, r1
    24e6:	80 81       	ld	r24, Z
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	b3 01       	movw	r22, r6
    24ec:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    24f0:	dd 20       	and	r13, r13
    24f2:	a9 f7       	brne	.-22     	; 0x24de <vfprintf+0x3a8>
    24f4:	06 c0       	rjmp	.+12     	; 0x2502 <vfprintf+0x3cc>
    24f6:	80 e2       	ldi	r24, 0x20	; 32
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	b3 01       	movw	r22, r6
    24fc:	0e 94 b7 12 	call	0x256e	; 0x256e <fputc>
    2500:	ea 94       	dec	r14
    2502:	ee 20       	and	r14, r14
    2504:	c1 f7       	brne	.-16     	; 0x24f6 <vfprintf+0x3c0>
    2506:	43 ce       	rjmp	.-890    	; 0x218e <vfprintf+0x58>
    2508:	f3 01       	movw	r30, r6
    250a:	66 81       	ldd	r22, Z+6	; 0x06
    250c:	77 81       	ldd	r23, Z+7	; 0x07
    250e:	cb 01       	movw	r24, r22
    2510:	2b 96       	adiw	r28, 0x0b	; 11
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	ff 90       	pop	r15
    2526:	ef 90       	pop	r14
    2528:	df 90       	pop	r13
    252a:	cf 90       	pop	r12
    252c:	bf 90       	pop	r11
    252e:	af 90       	pop	r10
    2530:	9f 90       	pop	r9
    2532:	8f 90       	pop	r8
    2534:	7f 90       	pop	r7
    2536:	6f 90       	pop	r6
    2538:	5f 90       	pop	r5
    253a:	4f 90       	pop	r4
    253c:	3f 90       	pop	r3
    253e:	2f 90       	pop	r2
    2540:	08 95       	ret

00002542 <strnlen_P>:
    2542:	fc 01       	movw	r30, r24
    2544:	05 90       	lpm	r0, Z+
    2546:	61 50       	subi	r22, 0x01	; 1
    2548:	70 40       	sbci	r23, 0x00	; 0
    254a:	01 10       	cpse	r0, r1
    254c:	d8 f7       	brcc	.-10     	; 0x2544 <strnlen_P+0x2>
    254e:	80 95       	com	r24
    2550:	90 95       	com	r25
    2552:	8e 0f       	add	r24, r30
    2554:	9f 1f       	adc	r25, r31
    2556:	08 95       	ret

00002558 <strnlen>:
    2558:	fc 01       	movw	r30, r24
    255a:	61 50       	subi	r22, 0x01	; 1
    255c:	70 40       	sbci	r23, 0x00	; 0
    255e:	01 90       	ld	r0, Z+
    2560:	01 10       	cpse	r0, r1
    2562:	d8 f7       	brcc	.-10     	; 0x255a <strnlen+0x2>
    2564:	80 95       	com	r24
    2566:	90 95       	com	r25
    2568:	8e 0f       	add	r24, r30
    256a:	9f 1f       	adc	r25, r31
    256c:	08 95       	ret

0000256e <fputc>:
    256e:	0f 93       	push	r16
    2570:	1f 93       	push	r17
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	8c 01       	movw	r16, r24
    2578:	eb 01       	movw	r28, r22
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	81 ff       	sbrs	r24, 1
    257e:	1b c0       	rjmp	.+54     	; 0x25b6 <fputc+0x48>
    2580:	82 ff       	sbrs	r24, 2
    2582:	0d c0       	rjmp	.+26     	; 0x259e <fputc+0x30>
    2584:	2e 81       	ldd	r18, Y+6	; 0x06
    2586:	3f 81       	ldd	r19, Y+7	; 0x07
    2588:	8c 81       	ldd	r24, Y+4	; 0x04
    258a:	9d 81       	ldd	r25, Y+5	; 0x05
    258c:	28 17       	cp	r18, r24
    258e:	39 07       	cpc	r19, r25
    2590:	64 f4       	brge	.+24     	; 0x25aa <fputc+0x3c>
    2592:	e8 81       	ld	r30, Y
    2594:	f9 81       	ldd	r31, Y+1	; 0x01
    2596:	01 93       	st	Z+, r16
    2598:	f9 83       	std	Y+1, r31	; 0x01
    259a:	e8 83       	st	Y, r30
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <fputc+0x3c>
    259e:	e8 85       	ldd	r30, Y+8	; 0x08
    25a0:	f9 85       	ldd	r31, Y+9	; 0x09
    25a2:	80 2f       	mov	r24, r16
    25a4:	09 95       	icall
    25a6:	89 2b       	or	r24, r25
    25a8:	31 f4       	brne	.+12     	; 0x25b6 <fputc+0x48>
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	9f 83       	std	Y+7, r25	; 0x07
    25b2:	8e 83       	std	Y+6, r24	; 0x06
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <fputc+0x4c>
    25b6:	0f ef       	ldi	r16, 0xFF	; 255
    25b8:	1f ef       	ldi	r17, 0xFF	; 255
    25ba:	c8 01       	movw	r24, r16
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	08 95       	ret

000025c6 <__ultoa_invert>:
    25c6:	fa 01       	movw	r30, r20
    25c8:	aa 27       	eor	r26, r26
    25ca:	28 30       	cpi	r18, 0x08	; 8
    25cc:	51 f1       	breq	.+84     	; 0x2622 <__ultoa_invert+0x5c>
    25ce:	20 31       	cpi	r18, 0x10	; 16
    25d0:	81 f1       	breq	.+96     	; 0x2632 <__ultoa_invert+0x6c>
    25d2:	e8 94       	clt
    25d4:	6f 93       	push	r22
    25d6:	6e 7f       	andi	r22, 0xFE	; 254
    25d8:	6e 5f       	subi	r22, 0xFE	; 254
    25da:	7f 4f       	sbci	r23, 0xFF	; 255
    25dc:	8f 4f       	sbci	r24, 0xFF	; 255
    25de:	9f 4f       	sbci	r25, 0xFF	; 255
    25e0:	af 4f       	sbci	r26, 0xFF	; 255
    25e2:	b1 e0       	ldi	r27, 0x01	; 1
    25e4:	3e d0       	rcall	.+124    	; 0x2662 <__ultoa_invert+0x9c>
    25e6:	b4 e0       	ldi	r27, 0x04	; 4
    25e8:	3c d0       	rcall	.+120    	; 0x2662 <__ultoa_invert+0x9c>
    25ea:	67 0f       	add	r22, r23
    25ec:	78 1f       	adc	r23, r24
    25ee:	89 1f       	adc	r24, r25
    25f0:	9a 1f       	adc	r25, r26
    25f2:	a1 1d       	adc	r26, r1
    25f4:	68 0f       	add	r22, r24
    25f6:	79 1f       	adc	r23, r25
    25f8:	8a 1f       	adc	r24, r26
    25fa:	91 1d       	adc	r25, r1
    25fc:	a1 1d       	adc	r26, r1
    25fe:	6a 0f       	add	r22, r26
    2600:	71 1d       	adc	r23, r1
    2602:	81 1d       	adc	r24, r1
    2604:	91 1d       	adc	r25, r1
    2606:	a1 1d       	adc	r26, r1
    2608:	20 d0       	rcall	.+64     	; 0x264a <__ultoa_invert+0x84>
    260a:	09 f4       	brne	.+2      	; 0x260e <__ultoa_invert+0x48>
    260c:	68 94       	set
    260e:	3f 91       	pop	r19
    2610:	2a e0       	ldi	r18, 0x0A	; 10
    2612:	26 9f       	mul	r18, r22
    2614:	11 24       	eor	r1, r1
    2616:	30 19       	sub	r19, r0
    2618:	30 5d       	subi	r19, 0xD0	; 208
    261a:	31 93       	st	Z+, r19
    261c:	de f6       	brtc	.-74     	; 0x25d4 <__ultoa_invert+0xe>
    261e:	cf 01       	movw	r24, r30
    2620:	08 95       	ret
    2622:	46 2f       	mov	r20, r22
    2624:	47 70       	andi	r20, 0x07	; 7
    2626:	40 5d       	subi	r20, 0xD0	; 208
    2628:	41 93       	st	Z+, r20
    262a:	b3 e0       	ldi	r27, 0x03	; 3
    262c:	0f d0       	rcall	.+30     	; 0x264c <__ultoa_invert+0x86>
    262e:	c9 f7       	brne	.-14     	; 0x2622 <__ultoa_invert+0x5c>
    2630:	f6 cf       	rjmp	.-20     	; 0x261e <__ultoa_invert+0x58>
    2632:	46 2f       	mov	r20, r22
    2634:	4f 70       	andi	r20, 0x0F	; 15
    2636:	40 5d       	subi	r20, 0xD0	; 208
    2638:	4a 33       	cpi	r20, 0x3A	; 58
    263a:	18 f0       	brcs	.+6      	; 0x2642 <__ultoa_invert+0x7c>
    263c:	49 5d       	subi	r20, 0xD9	; 217
    263e:	31 fd       	sbrc	r19, 1
    2640:	40 52       	subi	r20, 0x20	; 32
    2642:	41 93       	st	Z+, r20
    2644:	02 d0       	rcall	.+4      	; 0x264a <__ultoa_invert+0x84>
    2646:	a9 f7       	brne	.-22     	; 0x2632 <__ultoa_invert+0x6c>
    2648:	ea cf       	rjmp	.-44     	; 0x261e <__ultoa_invert+0x58>
    264a:	b4 e0       	ldi	r27, 0x04	; 4
    264c:	a6 95       	lsr	r26
    264e:	97 95       	ror	r25
    2650:	87 95       	ror	r24
    2652:	77 95       	ror	r23
    2654:	67 95       	ror	r22
    2656:	ba 95       	dec	r27
    2658:	c9 f7       	brne	.-14     	; 0x264c <__ultoa_invert+0x86>
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	61 05       	cpc	r22, r1
    265e:	71 05       	cpc	r23, r1
    2660:	08 95       	ret
    2662:	9b 01       	movw	r18, r22
    2664:	ac 01       	movw	r20, r24
    2666:	0a 2e       	mov	r0, r26
    2668:	06 94       	lsr	r0
    266a:	57 95       	ror	r21
    266c:	47 95       	ror	r20
    266e:	37 95       	ror	r19
    2670:	27 95       	ror	r18
    2672:	ba 95       	dec	r27
    2674:	c9 f7       	brne	.-14     	; 0x2668 <__ultoa_invert+0xa2>
    2676:	62 0f       	add	r22, r18
    2678:	73 1f       	adc	r23, r19
    267a:	84 1f       	adc	r24, r20
    267c:	95 1f       	adc	r25, r21
    267e:	a0 1d       	adc	r26, r0
    2680:	08 95       	ret

00002682 <_exit>:
    2682:	f8 94       	cli

00002684 <__stop_program>:
    2684:	ff cf       	rjmp	.-2      	; 0x2684 <__stop_program>
