
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000828  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000791  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b5  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2d d0       	rcall	.+90     	; 0xf4 <main>
  9a:	36 c0       	rjmp	.+108    	; 0x108 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <key_press>:
#include <util/delay.h>


void key_press(void)
{
	PIND &=0xC0;
  9e:	80 b3       	in	r24, 0x10	; 16
  a0:	80 7c       	andi	r24, 0xC0	; 192
  a2:	80 bb       	out	0x10, r24	; 16
	switch((PIND&0xC0))
  a4:	80 b3       	in	r24, 0x10	; 16
  a6:	80 7c       	andi	r24, 0xC0	; 192
  a8:	80 34       	cpi	r24, 0x40	; 64
  aa:	41 f0       	breq	.+16     	; 0xbc <key_press+0x1e>
  ac:	80 38       	cpi	r24, 0x80	; 128
  ae:	61 f4       	brne	.+24     	; 0xc8 <key_press+0x2a>
	{
		case 0x80:  while((PIND&0xC0)==0x40);PORTA =0xAA;break;
  b0:	80 b3       	in	r24, 0x10	; 16
  b2:	80 7c       	andi	r24, 0xC0	; 192
  b4:	80 34       	cpi	r24, 0x40	; 64
  b6:	e1 f3       	breq	.-8      	; 0xb0 <key_press+0x12>
  b8:	8a ea       	ldi	r24, 0xAA	; 170
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <key_press+0x28>
		case 0x40:  while((PIND&0xC0)==0x80);PORTA =0x55;break;
  bc:	80 b3       	in	r24, 0x10	; 16
  be:	80 7c       	andi	r24, 0xC0	; 192
  c0:	80 38       	cpi	r24, 0x80	; 128
  c2:	e1 f3       	breq	.-8      	; 0xbc <key_press+0x1e>
  c4:	85 e5       	ldi	r24, 0x55	; 85
  c6:	8b bb       	out	0x1b, r24	; 27
	}

	PINE &=0xC0;
  c8:	81 b1       	in	r24, 0x01	; 1
  ca:	80 7c       	andi	r24, 0xC0	; 192
  cc:	81 b9       	out	0x01, r24	; 1
	switch((PINE&0xC0))
  ce:	81 b1       	in	r24, 0x01	; 1
  d0:	80 7c       	andi	r24, 0xC0	; 192
  d2:	80 34       	cpi	r24, 0x40	; 64
  d4:	41 f0       	breq	.+16     	; 0xe6 <key_press+0x48>
  d6:	80 38       	cpi	r24, 0x80	; 128
  d8:	61 f4       	brne	.+24     	; 0xf2 <key_press+0x54>
	{
		case 0x80:  while((PINE&0xC0)==0x40);PORTA =0x00;break;
  da:	81 b1       	in	r24, 0x01	; 1
  dc:	80 7c       	andi	r24, 0xC0	; 192
  de:	80 34       	cpi	r24, 0x40	; 64
  e0:	e1 f3       	breq	.-8      	; 0xda <key_press+0x3c>
  e2:	1b ba       	out	0x1b, r1	; 27
  e4:	08 95       	ret
		case 0x40:  while((PINE&0xC0)==0x80);PORTA =0xFF;break;
  e6:	81 b1       	in	r24, 0x01	; 1
  e8:	80 7c       	andi	r24, 0xC0	; 192
  ea:	80 38       	cpi	r24, 0x80	; 128
  ec:	e1 f3       	breq	.-8      	; 0xe6 <key_press+0x48>
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8b bb       	out	0x1b, r24	; 27
  f2:	08 95       	ret

000000f4 <main>:

}
int main(void)
{

	DDRD =0X00;
  f4:	11 ba       	out	0x11, r1	; 17
	DDRE =0X00;
  f6:	12 b8       	out	0x02, r1	; 2
	PORTD = 0xff;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	82 bb       	out	0x12, r24	; 18
	PORTE = 0xff;
  fc:	83 b9       	out	0x03, r24	; 3
	DDRA = 0xff;
  fe:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x55;
 100:	85 e5       	ldi	r24, 0x55	; 85
 102:	8b bb       	out	0x1b, r24	; 27
	while(1)
	{
		key_press();
 104:	cc df       	rcall	.-104    	; 0x9e <key_press>
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x10>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
