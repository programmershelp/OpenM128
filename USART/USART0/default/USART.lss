
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000278  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000064  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000016b  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c0  00000000  00000000  000004bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001d8  00000000  00000000  0000057b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ef  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 22 01 	call	0x244	; 0x244 <main>
  b6:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <usartInit>:
#include <avr/io.h>

/*Hardware Environment：DVK501 && M128+ EX*/
#if defined(_DVK501_M128_EX_)
void usartInit(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
// USART0 Receiver: On
// USART0 Transmitter: On
// USART0 Mode: Asynchronous
// USART0 Baud Rate: 9600

UCSR0A=0x00;
  c6:	eb e2       	ldi	r30, 0x2B	; 43
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
UCSR0B=0x98;
  cc:	ea e2       	ldi	r30, 0x2A	; 42
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	88 e9       	ldi	r24, 0x98	; 152
  d2:	80 83       	st	Z, r24
UCSR0C=0x06;
  d4:	e5 e9       	ldi	r30, 0x95	; 149
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	80 83       	st	Z, r24
UBRR0H=0x00;
  dc:	e0 e9       	ldi	r30, 0x90	; 144
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
UBRR0L=0x2F;
  e2:	e9 e2       	ldi	r30, 0x29	; 41
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	8f e2       	ldi	r24, 0x2F	; 47
  e8:	80 83       	st	Z, r24
}
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <putUsart0>:

#include <avr/io.h>

//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	0f 92       	push	r0
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	89 83       	std	Y+1, r24	; 0x01
	while(!(WS_UCSR0A & 0x20));
  fc:	eb e2       	ldi	r30, 0x2B	; 43
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 2f       	mov	r24, r24
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	80 72       	andi	r24, 0x20	; 32
 108:	90 70       	andi	r25, 0x00	; 0
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	b9 f3       	breq	.-18     	; 0xfc <putUsart0+0xc>
	WS_UDR0 = c;
 10e:	ec e2       	ldi	r30, 0x2C	; 44
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	80 83       	st	Z, r24
}
 116:	0f 90       	pop	r0
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <getUsart0>:
//从RS232接收一个字节
uint16_t getUsart0(void)
{
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	00 d0       	rcall	.+0      	; 0x124 <getUsart0+0x6>
 124:	00 d0       	rcall	.+0      	; 0x126 <getUsart0+0x8>
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
    uint8_t status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
 12a:	eb e2       	ldi	r30, 0x2B	; 43
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	2c f0       	brlt	.+10     	; 0x13e <getUsart0+0x20>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	3c 83       	std	Y+4, r19	; 0x04
 13a:	2b 83       	std	Y+3, r18	; 0x03
 13c:	1d c0       	rjmp	.+58     	; 0x178 <getUsart0+0x5a>
    status = WS_UCSR0A;
 13e:	eb e2       	ldi	r30, 0x2B	; 43
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8a 83       	std	Y+2, r24	; 0x02
    res = WS_UDR0;
 146:	ec e2       	ldi	r30, 0x2C	; 44
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	89 83       	std	Y+1, r24	; 0x01
	PORTA=res;
 14e:	eb e3       	ldi	r30, 0x3B	; 59
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	80 83       	st	Z, r24
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	8c 71       	andi	r24, 0x1C	; 28
 15e:	90 70       	andi	r25, 0x00	; 0
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	29 f0       	breq	.+10     	; 0x16e <getUsart0+0x50>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	9f ef       	ldi	r25, 0xFF	; 255
 168:	9c 83       	std	Y+4, r25	; 0x04
 16a:	8b 83       	std	Y+3, r24	; 0x03
 16c:	05 c0       	rjmp	.+10     	; 0x178 <getUsart0+0x5a>
	

    return res;
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	3c 83       	std	Y+4, r19	; 0x04
 176:	2b 83       	std	Y+3, r18	; 0x03
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	9c 81       	ldd	r25, Y+4	; 0x04
}
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	cf 91       	pop	r28
 186:	df 91       	pop	r29
 188:	08 95       	ret

0000018a <waitUsart0>:
//等待从RS232接收一个有效的字节
uint8_t waitUsart0(void)
{
 18a:	df 93       	push	r29
 18c:	cf 93       	push	r28
 18e:	00 d0       	rcall	.+0      	; 0x190 <waitUsart0+0x6>
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
    uint16_t c;
    while((c=getUsart0())==0xFFFF);
 194:	0e 94 8f 00 	call	0x11e	; 0x11e <getUsart0>
 198:	9a 83       	std	Y+2, r25	; 0x02
 19a:	89 83       	std	Y+1, r24	; 0x01
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	9a 81       	ldd	r25, Y+2	; 0x02
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	8f 3f       	cpi	r24, 0xFF	; 255
 1a4:	92 07       	cpc	r25, r18
 1a6:	b1 f3       	breq	.-20     	; 0x194 <waitUsart0+0xa>

    return (uint8_t)c;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	08 95       	ret

000001b4 <__vector_18>:
#include <avr/interrupt.h>
#include "ws_usart_port.h"
#include <util/delay.h>

ISR(USART0_RX_vect)
{      
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	00 90 5b 00 	lds	r0, 0x005B
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <__vector_18+0x2e>
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t status,res;
    if(!(WS_UCSR0A & 0x80)) //return 0xFFFF;        //no data to be received 
 1e6:	eb e2       	ldi	r30, 0x2B	; 43
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	88 23       	and	r24, r24
 1ee:	24 f0       	brlt	.+8      	; 0x1f8 <__vector_18+0x44>
    status = WS_UCSR0A;
 1f0:	eb e2       	ldi	r30, 0x2B	; 43
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8a 83       	std	Y+2, r24	; 0x02
    res = WS_UDR0;
 1f8:	ec e2       	ldi	r30, 0x2C	; 44
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	89 83       	std	Y+1, r24	; 0x01
    if (status & 0x1c) //return 0xFFFF;        // If error, return 0xFFFF
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	8c 71       	andi	r24, 0x1C	; 28
 208:	90 70       	andi	r25, 0x00	; 0
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	19 f0       	breq	.+6      	; 0x214 <__vector_18+0x60>
	putUsart0(res); 
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	0e 94 78 00 	call	0xf0	; 0xf0 <putUsart0>
    //return res;
}  
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	cf 91       	pop	r28
 21a:	df 91       	pop	r29
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	00 92 5b 00 	sts	0x005B, r0
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <main>:

int main(void)
{unsigned char tmp;
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	0f 92       	push	r0
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
	DDRA=0XFF;
 24e:	ea e3       	ldi	r30, 0x3A	; 58
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	80 83       	st	Z, r24
	PORTA=0X55;
 256:	eb e3       	ldi	r30, 0x3B	; 59
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	85 e5       	ldi	r24, 0x55	; 85
 25c:	80 83       	st	Z, r24
	DDRB=0xFF;
 25e:	e7 e3       	ldi	r30, 0x37	; 55
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	80 83       	st	Z, r24
	PORTB=0x00;
 266:	e8 e3       	ldi	r30, 0x38	; 56
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	10 82       	st	Z, r1
	sei();			//turn on global interrupt
 26c:	78 94       	sei
	usartInit();
 26e:	0e 94 5f 00 	call	0xbe	; 0xbe <usartInit>
 272:	ff cf       	rjmp	.-2      	; 0x272 <main+0x2e>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
