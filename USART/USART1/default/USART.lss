
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000064  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000015c  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c0  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001cb  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000070  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ea  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_30>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  b6:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <usartInit>:
#include <avr/io.h>

/*Hardware Environment：DVK501 && M128+ EX*/
#if defined(_DVK501_M128_EX_)
void usartInit(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
// USART1 Receiver: On
// USART1 Transmitter: On
// USART1 Mode: Asynchronous
// USART1 Baud Rate: 9600

UCSR1A=0x00;
  c6:	eb e9       	ldi	r30, 0x9B	; 155
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
UCSR1B=0x98;
  cc:	ea e9       	ldi	r30, 0x9A	; 154
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	88 e9       	ldi	r24, 0x98	; 152
  d2:	80 83       	st	Z, r24
UCSR1C=0x06;
  d4:	ed e9       	ldi	r30, 0x9D	; 157
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	80 83       	st	Z, r24
UBRR1H=0x00;
  dc:	e8 e9       	ldi	r30, 0x98	; 152
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
UBRR1L=0x2F;
  e2:	e9 e9       	ldi	r30, 0x99	; 153
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	8f e2       	ldi	r24, 0x2F	; 47
  e8:	80 83       	st	Z, r24
}
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <putUsart0>:
#define _WS_USART_H_


//从RS232发送一个字节
void putUsart0(uint8_t c)
{ 
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	0f 92       	push	r0
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	89 83       	std	Y+1, r24	; 0x01
	while(!(WS_UCSR1A & 0x20));
  fc:	eb e9       	ldi	r30, 0x9B	; 155
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 2f       	mov	r24, r24
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	80 72       	andi	r24, 0x20	; 32
 108:	90 70       	andi	r25, 0x00	; 0
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	b9 f3       	breq	.-18     	; 0xfc <putUsart0+0xc>
	WS_UDR1 = c;
 10e:	ec e9       	ldi	r30, 0x9C	; 156
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	89 81       	ldd	r24, Y+1	; 0x01
 114:	80 83       	st	Z, r24
}
 116:	0f 90       	pop	r0
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <getUsart0>:
//从RS232接收一个字节
uint16_t getUsart0(void)
{
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	00 d0       	rcall	.+0      	; 0x124 <getUsart0+0x6>
 124:	00 d0       	rcall	.+0      	; 0x126 <getUsart0+0x8>
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
    uint8_t status,res;
	if(!(WS_UCSR1A & 0x80)) return 0xFFFF;        //no data to be received 
 12a:	eb e9       	ldi	r30, 0x9B	; 155
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	2c f0       	brlt	.+10     	; 0x13e <getUsart0+0x20>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	3c 83       	std	Y+4, r19	; 0x04
 13a:	2b 83       	std	Y+3, r18	; 0x03
 13c:	19 c0       	rjmp	.+50     	; 0x170 <getUsart0+0x52>
    status = WS_UCSR1A;
 13e:	eb e9       	ldi	r30, 0x9B	; 155
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8a 83       	std	Y+2, r24	; 0x02
    res = WS_UDR1;
 146:	ec e9       	ldi	r30, 0x9C	; 156
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	89 83       	std	Y+1, r24	; 0x01
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	88 2f       	mov	r24, r24
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	8c 71       	andi	r24, 0x1C	; 28
 156:	90 70       	andi	r25, 0x00	; 0
 158:	00 97       	sbiw	r24, 0x00	; 0
 15a:	29 f0       	breq	.+10     	; 0x166 <getUsart0+0x48>
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	9c 83       	std	Y+4, r25	; 0x04
 162:	8b 83       	std	Y+3, r24	; 0x03
 164:	05 c0       	rjmp	.+10     	; 0x170 <getUsart0+0x52>
    return res;
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	3c 83       	std	Y+4, r19	; 0x04
 16e:	2b 83       	std	Y+3, r18	; 0x03
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
}
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	cf 91       	pop	r28
 17e:	df 91       	pop	r29
 180:	08 95       	ret

00000182 <waitUsart0>:
//等待从RS232接收一个有效的字节
uint8_t waitUsart0(void)
{
 182:	df 93       	push	r29
 184:	cf 93       	push	r28
 186:	00 d0       	rcall	.+0      	; 0x188 <waitUsart0+0x6>
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
    uint16_t c;
    while((c=getUsart0())==0xFFFF);
 18c:	0e 94 8f 00 	call	0x11e	; 0x11e <getUsart0>
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	8f 3f       	cpi	r24, 0xFF	; 255
 19c:	92 07       	cpc	r25, r18
 19e:	b1 f3       	breq	.-20     	; 0x18c <waitUsart0+0xa>
    return (uint8_t)c;
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
}
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

000001ac <__vector_30>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "ws_usart_port.h"

ISR(USART1_RX_vect)
{      
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	00 90 5b 00 	lds	r0, 0x005B
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	00 d0       	rcall	.+0      	; 0x1da <__vector_30+0x2e>
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t status,res;
    if(!(WS_UCSR1A & 0x80)) //return 0xFFFF;        //no data to be received 
 1de:	eb e9       	ldi	r30, 0x9B	; 155
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 23       	and	r24, r24
 1e6:	24 f0       	brlt	.+8      	; 0x1f0 <__vector_30+0x44>
    status = WS_UCSR1A;
 1e8:	eb e9       	ldi	r30, 0x9B	; 155
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8a 83       	std	Y+2, r24	; 0x02
    res = WS_UDR1;
 1f0:	ec e9       	ldi	r30, 0x9C	; 156
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	89 83       	std	Y+1, r24	; 0x01
    if (status & 0x1c) //return 0xFFFF;        // If error, return 0xFFFF
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	88 2f       	mov	r24, r24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	8c 71       	andi	r24, 0x1C	; 28
 200:	90 70       	andi	r25, 0x00	; 0
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	19 f0       	breq	.+6      	; 0x20c <__vector_30+0x60>
	putUsart0(res); 
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	0e 94 78 00 	call	0xf0	; 0xf0 <putUsart0>
    //return res;
}  
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	cf 91       	pop	r28
 212:	df 91       	pop	r29
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	00 92 5b 00 	sts	0x005B, r0
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <main>:

int main(void)
{
 23c:	df 93       	push	r29
 23e:	cf 93       	push	r28
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xFF;
 244:	e7 e3       	ldi	r30, 0x37	; 55
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	80 83       	st	Z, r24
	PORTB=0x00;
 24c:	e8 e3       	ldi	r30, 0x38	; 56
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	10 82       	st	Z, r1
	sei();			//turn on global interrupt
 252:	78 94       	sei
	usartInit();
 254:	0e 94 5f 00 	call	0xbe	; 0xbe <usartInit>
	while(1)
	{

	putUsart0(0x55);
 258:	85 e5       	ldi	r24, 0x55	; 85
 25a:	0e 94 78 00 	call	0xf0	; 0xf0 <putUsart0>
 25e:	fc cf       	rjmp	.-8      	; 0x258 <main+0x1c>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
