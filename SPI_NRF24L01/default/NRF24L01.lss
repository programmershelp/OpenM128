
NRF24L01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00002566  000025fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002566  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080021e  0080021e  00002718  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000030e  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a92  00000000  00000000  00002be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000141c  00000000  00000000  00005678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ad9  00000000  00000000  00006a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00008570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000503  00000000  00000000  00008850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  00008d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000095e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e6       	ldi	r30, 0x66	; 102
      a0:	f5 e2       	ldi	r31, 0x25	; 37
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ae e1       	ldi	r26, 0x1E	; 30
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 36       	cpi	r26, 0x64	; 100
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 67 00 	call	0xce	; 0xce <main>
      c6:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

extern uint8_t RX_BUF[];
extern uint8_t TX_BUF[];

int main(void)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
	usartInit();
      d6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <usartInit>
	printf("*--------------------------------------------------- *\r\n");
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	91 e0       	ldi	r25, 0x01	; 1
      de:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts>
	printf("*-------------------NRF24L01 experiment-------------- *\r\n");
      e2:	88 e3       	ldi	r24, 0x38	; 56
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts>
	printf("*--------------------------------------------------- *\r\n");
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts>

	nRF24L01_Initial();
      f2:	0e 94 28 06 	call	0xc50	; 0xc50 <nRF24L01_Initial>
			TX_BUF[0]=0x55;
			NRF24L01_Send();
			printf("\r\nSend data：0x%x\r\n",TX_BUF[0]);
			_delay_ms(1000);
		#else
			NRF24L01_Receive();
      f6:	0e 94 b8 07 	call	0xf70	; 0xf70 <NRF24L01_Receive>
      fa:	fd cf       	rjmp	.-6      	; 0xf6 <main+0x28>

000000fc <SPI_RW>:

uint8_t TX_BUF[TX_PLOAD_WIDTH];


uint8_t SPI_RW(uint8_t Data)
{
      fc:	df 93       	push	r29
      fe:	cf 93       	push	r28
     100:	0f 92       	push	r0
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
     106:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Data;
     108:	ef e2       	ldi	r30, 0x2F	; 47
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	80 83       	st	Z, r24
    while(!(SPSR&0x80));
     110:	ee e2       	ldi	r30, 0x2E	; 46
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	88 23       	and	r24, r24
     118:	dc f7       	brge	.-10     	; 0x110 <SPI_RW+0x14>
	return SPDR;
     11a:	ef e2       	ldi	r30, 0x2F	; 47
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
}
     120:	0f 90       	pop	r0
     122:	cf 91       	pop	r28
     124:	df 91       	pop	r29
     126:	08 95       	ret

00000128 <SPI_RW_Reg>:

/****向寄存器reg写一个字节，同时返回状态字节**************/
/****Reg to register a byte written while returning state bytes****/
uint8_t SPI_RW_Reg(uint8_t reg,uint8_t value)
{
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	00 d0       	rcall	.+0      	; 0x12e <SPI_RW_Reg+0x6>
     12e:	0f 92       	push	r0
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	8a 83       	std	Y+2, r24	; 0x02
     136:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t status;

	CSN_0;
     138:	a2 e3       	ldi	r26, 0x32	; 50
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	e2 e3       	ldi	r30, 0x32	; 50
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	8f 7b       	andi	r24, 0xBF	; 191
     144:	8c 93       	st	X, r24
	status=SPI_RW(reg);   //select register  and write value to it
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
     14c:	89 83       	std	Y+1, r24	; 0x01
	SPI_RW(value);   
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
	CSN_1;
     154:	a2 e3       	ldi	r26, 0x32	; 50
     156:	b0 e0       	ldi	r27, 0x00	; 0
     158:	e2 e3       	ldi	r30, 0x32	; 50
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	80 64       	ori	r24, 0x40	; 64
     160:	8c 93       	st	X, r24
	return(status); 
     162:	89 81       	ldd	r24, Y+1	; 0x01
}
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	cf 91       	pop	r28
     16c:	df 91       	pop	r29
     16e:	08 95       	ret

00000170 <SPI_Read_Reg>:

/****向寄存器reg读一个字节，同时返回状态字节**************/
/****To register reg read a byte, and return to state bytes*****/
uint8_t SPI_Read_Reg(uint8_t reg)
{
     170:	df 93       	push	r29
     172:	cf 93       	push	r28
     174:	00 d0       	rcall	.+0      	; 0x176 <SPI_Read_Reg+0x6>
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;
	CSN_0;
     17c:	a2 e3       	ldi	r26, 0x32	; 50
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e2 e3       	ldi	r30, 0x32	; 50
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	8f 7b       	andi	r24, 0xBF	; 191
     188:	8c 93       	st	X, r24
	SPI_RW(reg);
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
    status = SPI_RW(0);
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
     196:	89 83       	std	Y+1, r24	; 0x01

	CSN_1;
     198:	a2 e3       	ldi	r26, 0x32	; 50
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	e2 e3       	ldi	r30, 0x32	; 50
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	80 64       	ori	r24, 0x40	; 64
     1a4:	8c 93       	st	X, r24
	return(status);
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
}
     1a8:	0f 90       	pop	r0
     1aa:	0f 90       	pop	r0
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <SPI_Read_Buf>:

/********读出bytes字节的数据*************************/
/********Read the bytes bytes of data****************/

uint8_t SPI_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t bytes)
{
     1b2:	0f 93       	push	r16
     1b4:	1f 93       	push	r17
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <SPI_Read_Buf+0xa>
     1bc:	00 d0       	rcall	.+0      	; 0x1be <SPI_Read_Buf+0xc>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <SPI_Read_Buf+0xe>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	8b 83       	std	Y+3, r24	; 0x03
     1c6:	7d 83       	std	Y+5, r23	; 0x05
     1c8:	6c 83       	std	Y+4, r22	; 0x04
     1ca:	4e 83       	std	Y+6, r20	; 0x06
	uint8_t status,byte_ctr;

	CSN_0;
     1cc:	a2 e3       	ldi	r26, 0x32	; 50
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	e2 e3       	ldi	r30, 0x32	; 50
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	8f 7b       	andi	r24, 0xBF	; 191
     1d8:	8c 93       	st	X, r24
	status=SPI_RW(reg);       
     1da:	8b 81       	ldd	r24, Y+3	; 0x03
     1dc:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
     1e0:	8a 83       	std	Y+2, r24	; 0x02
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
     1e2:	19 82       	std	Y+1, r1	; 0x01
     1e4:	10 c0       	rjmp	.+32     	; 0x206 <SPI_Read_Buf+0x54>
		pBuf[byte_ctr]=SPI_RW(0);
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	9d 81       	ldd	r25, Y+5	; 0x05
     1f0:	8c 01       	movw	r16, r24
     1f2:	02 0f       	add	r16, r18
     1f4:	13 1f       	adc	r17, r19
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
     1fc:	f8 01       	movw	r30, r16
     1fe:	80 83       	st	Z, r24
{
	uint8_t status,byte_ctr;

	CSN_0;
	status=SPI_RW(reg);       
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	8f 5f       	subi	r24, 0xFF	; 255
     204:	89 83       	std	Y+1, r24	; 0x01
     206:	99 81       	ldd	r25, Y+1	; 0x01
     208:	8e 81       	ldd	r24, Y+6	; 0x06
     20a:	98 17       	cp	r25, r24
     20c:	60 f3       	brcs	.-40     	; 0x1e6 <SPI_Read_Buf+0x34>
		pBuf[byte_ctr]=SPI_RW(0);

	CSN_1;
     20e:	a2 e3       	ldi	r26, 0x32	; 50
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e2 e3       	ldi	r30, 0x32	; 50
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 64       	ori	r24, 0x40	; 64
     21a:	8c 93       	st	X, r24
	return(status);
     21c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     21e:	26 96       	adiw	r28, 0x06	; 6
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	cf 91       	pop	r28
     22c:	df 91       	pop	r29
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	08 95       	ret

00000234 <SPI_Write_Buf>:

/****************写入bytes字节的数据*******************/
/****************Write bytes bytes of data*************/
uint8_t SPI_Write_Buf(uint8_t reg,uint8_t *pBuf,uint8_t bytes)
{
     234:	df 93       	push	r29
     236:	cf 93       	push	r28
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	6e 97       	sbiw	r28, 0x1e	; 30
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	8b 8f       	std	Y+27, r24	; 0x1b
     24a:	7d 8f       	std	Y+29, r23	; 0x1d
     24c:	6c 8f       	std	Y+28, r22	; 0x1c
     24e:	4e 8f       	std	Y+30, r20	; 0x1e
	uint8_t status,byte_ctr;
	CSN_0;
     250:	a2 e3       	ldi	r26, 0x32	; 50
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e2 e3       	ldi	r30, 0x32	; 50
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	8f 7b       	andi	r24, 0xBF	; 191
     25c:	8c 93       	st	X, r24
	status=SPI_RW(reg); 
     25e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     260:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
     264:	8a 8f       	std	Y+26, r24	; 0x1a
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	a0 e2       	ldi	r26, 0x20	; 32
     26c:	b1 e4       	ldi	r27, 0x41	; 65
     26e:	8d 8b       	std	Y+21, r24	; 0x15
     270:	9e 8b       	std	Y+22, r25	; 0x16
     272:	af 8b       	std	Y+23, r26	; 0x17
     274:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     276:	6d 89       	ldd	r22, Y+21	; 0x15
     278:	7e 89       	ldd	r23, Y+22	; 0x16
     27a:	8f 89       	ldd	r24, Y+23	; 0x17
     27c:	98 8d       	ldd	r25, Y+24	; 0x18
     27e:	22 e5       	ldi	r18, 0x52	; 82
     280:	39 e4       	ldi	r19, 0x49	; 73
     282:	4d e1       	ldi	r20, 0x1D	; 29
     284:	50 e4       	ldi	r21, 0x40	; 64
     286:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	89 8b       	std	Y+17, r24	; 0x11
     290:	9a 8b       	std	Y+18, r25	; 0x12
     292:	ab 8b       	std	Y+19, r26	; 0x13
     294:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     296:	69 89       	ldd	r22, Y+17	; 0x11
     298:	7a 89       	ldd	r23, Y+18	; 0x12
     29a:	8b 89       	ldd	r24, Y+19	; 0x13
     29c:	9c 89       	ldd	r25, Y+20	; 0x14
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e8       	ldi	r20, 0x80	; 128
     2a4:	5f e3       	ldi	r21, 0x3F	; 63
     2a6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     2aa:	88 23       	and	r24, r24
     2ac:	1c f4       	brge	.+6      	; 0x2b4 <SPI_Write_Buf+0x80>
		__ticks = 1;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	88 8b       	std	Y+16, r24	; 0x10
     2b2:	91 c0       	rjmp	.+290    	; 0x3d6 <SPI_Write_Buf+0x1a2>
	else if (__tmp > 255)
     2b4:	69 89       	ldd	r22, Y+17	; 0x11
     2b6:	7a 89       	ldd	r23, Y+18	; 0x12
     2b8:	8b 89       	ldd	r24, Y+19	; 0x13
     2ba:	9c 89       	ldd	r25, Y+20	; 0x14
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	4f e7       	ldi	r20, 0x7F	; 127
     2c2:	53 e4       	ldi	r21, 0x43	; 67
     2c4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     2c8:	18 16       	cp	r1, r24
     2ca:	0c f0       	brlt	.+2      	; 0x2ce <SPI_Write_Buf+0x9a>
     2cc:	7b c0       	rjmp	.+246    	; 0x3c4 <SPI_Write_Buf+0x190>
	{
		_delay_ms(__us / 1000.0);
     2ce:	6d 89       	ldd	r22, Y+21	; 0x15
     2d0:	7e 89       	ldd	r23, Y+22	; 0x16
     2d2:	8f 89       	ldd	r24, Y+23	; 0x17
     2d4:	98 8d       	ldd	r25, Y+24	; 0x18
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	4a e7       	ldi	r20, 0x7A	; 122
     2dc:	54 e4       	ldi	r21, 0x44	; 68
     2de:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	8c 87       	std	Y+12, r24	; 0x0c
     2e8:	9d 87       	std	Y+13, r25	; 0x0d
     2ea:	ae 87       	std	Y+14, r26	; 0x0e
     2ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2ee:	6c 85       	ldd	r22, Y+12	; 0x0c
     2f0:	7d 85       	ldd	r23, Y+13	; 0x0d
     2f2:	8e 85       	ldd	r24, Y+14	; 0x0e
     2f4:	9f 85       	ldd	r25, Y+15	; 0x0f
     2f6:	26 e6       	ldi	r18, 0x66	; 102
     2f8:	36 e6       	ldi	r19, 0x66	; 102
     2fa:	46 ee       	ldi	r20, 0xE6	; 230
     2fc:	54 e4       	ldi	r21, 0x44	; 68
     2fe:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     302:	dc 01       	movw	r26, r24
     304:	cb 01       	movw	r24, r22
     306:	88 87       	std	Y+8, r24	; 0x08
     308:	99 87       	std	Y+9, r25	; 0x09
     30a:	aa 87       	std	Y+10, r26	; 0x0a
     30c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     30e:	68 85       	ldd	r22, Y+8	; 0x08
     310:	79 85       	ldd	r23, Y+9	; 0x09
     312:	8a 85       	ldd	r24, Y+10	; 0x0a
     314:	9b 85       	ldd	r25, Y+11	; 0x0b
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e8       	ldi	r20, 0x80	; 128
     31c:	5f e3       	ldi	r21, 0x3F	; 63
     31e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     322:	88 23       	and	r24, r24
     324:	2c f4       	brge	.+10     	; 0x330 <SPI_Write_Buf+0xfc>
		__ticks = 1;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	9f 83       	std	Y+7, r25	; 0x07
     32c:	8e 83       	std	Y+6, r24	; 0x06
     32e:	3f c0       	rjmp	.+126    	; 0x3ae <SPI_Write_Buf+0x17a>
	else if (__tmp > 65535)
     330:	68 85       	ldd	r22, Y+8	; 0x08
     332:	79 85       	ldd	r23, Y+9	; 0x09
     334:	8a 85       	ldd	r24, Y+10	; 0x0a
     336:	9b 85       	ldd	r25, Y+11	; 0x0b
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	3f ef       	ldi	r19, 0xFF	; 255
     33c:	4f e7       	ldi	r20, 0x7F	; 127
     33e:	57 e4       	ldi	r21, 0x47	; 71
     340:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     344:	18 16       	cp	r1, r24
     346:	4c f5       	brge	.+82     	; 0x39a <SPI_Write_Buf+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     348:	6c 85       	ldd	r22, Y+12	; 0x0c
     34a:	7d 85       	ldd	r23, Y+13	; 0x0d
     34c:	8e 85       	ldd	r24, Y+14	; 0x0e
     34e:	9f 85       	ldd	r25, Y+15	; 0x0f
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e2       	ldi	r20, 0x20	; 32
     356:	51 e4       	ldi	r21, 0x41	; 65
     358:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     35c:	dc 01       	movw	r26, r24
     35e:	cb 01       	movw	r24, r22
     360:	bc 01       	movw	r22, r24
     362:	cd 01       	movw	r24, r26
     364:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     368:	dc 01       	movw	r26, r24
     36a:	cb 01       	movw	r24, r22
     36c:	9f 83       	std	Y+7, r25	; 0x07
     36e:	8e 83       	std	Y+6, r24	; 0x06
     370:	0f c0       	rjmp	.+30     	; 0x390 <SPI_Write_Buf+0x15c>
     372:	88 eb       	ldi	r24, 0xB8	; 184
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	9d 83       	std	Y+5, r25	; 0x05
     378:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     37a:	8c 81       	ldd	r24, Y+4	; 0x04
     37c:	9d 81       	ldd	r25, Y+5	; 0x05
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <SPI_Write_Buf+0x14a>
     382:	9d 83       	std	Y+5, r25	; 0x05
     384:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     386:	8e 81       	ldd	r24, Y+6	; 0x06
     388:	9f 81       	ldd	r25, Y+7	; 0x07
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	9f 83       	std	Y+7, r25	; 0x07
     38e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     390:	8e 81       	ldd	r24, Y+6	; 0x06
     392:	9f 81       	ldd	r25, Y+7	; 0x07
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	69 f7       	brne	.-38     	; 0x372 <SPI_Write_Buf+0x13e>
     398:	24 c0       	rjmp	.+72     	; 0x3e2 <SPI_Write_Buf+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     39a:	68 85       	ldd	r22, Y+8	; 0x08
     39c:	79 85       	ldd	r23, Y+9	; 0x09
     39e:	8a 85       	ldd	r24, Y+10	; 0x0a
     3a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     3a2:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     3a6:	dc 01       	movw	r26, r24
     3a8:	cb 01       	movw	r24, r22
     3aa:	9f 83       	std	Y+7, r25	; 0x07
     3ac:	8e 83       	std	Y+6, r24	; 0x06
     3ae:	8e 81       	ldd	r24, Y+6	; 0x06
     3b0:	9f 81       	ldd	r25, Y+7	; 0x07
     3b2:	9b 83       	std	Y+3, r25	; 0x03
     3b4:	8a 83       	std	Y+2, r24	; 0x02
     3b6:	8a 81       	ldd	r24, Y+2	; 0x02
     3b8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <SPI_Write_Buf+0x186>
     3be:	9b 83       	std	Y+3, r25	; 0x03
     3c0:	8a 83       	std	Y+2, r24	; 0x02
     3c2:	0f c0       	rjmp	.+30     	; 0x3e2 <SPI_Write_Buf+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3c4:	69 89       	ldd	r22, Y+17	; 0x11
     3c6:	7a 89       	ldd	r23, Y+18	; 0x12
     3c8:	8b 89       	ldd	r24, Y+19	; 0x13
     3ca:	9c 89       	ldd	r25, Y+20	; 0x14
     3cc:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     3d0:	dc 01       	movw	r26, r24
     3d2:	cb 01       	movw	r24, r22
     3d4:	88 8b       	std	Y+16, r24	; 0x10
     3d6:	88 89       	ldd	r24, Y+16	; 0x10
     3d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	8a 95       	dec	r24
     3de:	f1 f7       	brne	.-4      	; 0x3dc <SPI_Write_Buf+0x1a8>
     3e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
     3e2:	19 8e       	std	Y+25, r1	; 0x19
     3e4:	0e c0       	rjmp	.+28     	; 0x402 <SPI_Write_Buf+0x1ce>
		SPI_RW(*pBuf++);
     3e6:	ec 8d       	ldd	r30, Y+28	; 0x1c
     3e8:	fd 8d       	ldd	r31, Y+29	; 0x1d
     3ea:	20 81       	ld	r18, Z
     3ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	9d 8f       	std	Y+29, r25	; 0x1d
     3f4:	8c 8f       	std	Y+28, r24	; 0x1c
     3f6:	82 2f       	mov	r24, r18
     3f8:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
{
	uint8_t status,byte_ctr;
	CSN_0;
	status=SPI_RW(reg); 
	_delay_us(10);
	for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
     3fc:	89 8d       	ldd	r24, Y+25	; 0x19
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	89 8f       	std	Y+25, r24	; 0x19
     402:	99 8d       	ldd	r25, Y+25	; 0x19
     404:	8e 8d       	ldd	r24, Y+30	; 0x1e
     406:	98 17       	cp	r25, r24
     408:	70 f3       	brcs	.-36     	; 0x3e6 <SPI_Write_Buf+0x1b2>
		SPI_RW(*pBuf++);
	CSN_1;
     40a:	a2 e3       	ldi	r26, 0x32	; 50
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	e2 e3       	ldi	r30, 0x32	; 50
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	80 64       	ori	r24, 0x40	; 64
     416:	8c 93       	st	X, r24
	return(status);
     418:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
     41a:	6e 96       	adiw	r28, 0x1e	; 30
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	cf 91       	pop	r28
     428:	df 91       	pop	r29
     42a:	08 95       	ret

0000042c <nRF24L01_RxPacket>:

/*接收函数，返回1表示有数据收到，否则没有数据接收到**/
/*Receive function, and returns 1 said data received, or no data to receive*/
uint8_t nRF24L01_RxPacket(uint8_t* rx_buf)
{
     42c:	df 93       	push	r29
     42e:	cf 93       	push	r28
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	6c 97       	sbiw	r28, 0x1c	; 28
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	9c 8f       	std	Y+28, r25	; 0x1c
     442:	8b 8f       	std	Y+27, r24	; 0x1b
    uint8_t status,revale=0;
     444:	19 8e       	std	Y+25, r1	; 0x19
	CE_0;
     446:	a2 e3       	ldi	r26, 0x32	; 50
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	e2 e3       	ldi	r30, 0x32	; 50
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	8f 77       	andi	r24, 0x7F	; 127
     452:	8c 93       	st	X, r24
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	a0 e2       	ldi	r26, 0x20	; 32
     45a:	b1 e4       	ldi	r27, 0x41	; 65
     45c:	8d 8b       	std	Y+21, r24	; 0x15
     45e:	9e 8b       	std	Y+22, r25	; 0x16
     460:	af 8b       	std	Y+23, r26	; 0x17
     462:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     464:	6d 89       	ldd	r22, Y+21	; 0x15
     466:	7e 89       	ldd	r23, Y+22	; 0x16
     468:	8f 89       	ldd	r24, Y+23	; 0x17
     46a:	98 8d       	ldd	r25, Y+24	; 0x18
     46c:	22 e5       	ldi	r18, 0x52	; 82
     46e:	39 e4       	ldi	r19, 0x49	; 73
     470:	4d e1       	ldi	r20, 0x1D	; 29
     472:	50 e4       	ldi	r21, 0x40	; 64
     474:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	89 8b       	std	Y+17, r24	; 0x11
     47e:	9a 8b       	std	Y+18, r25	; 0x12
     480:	ab 8b       	std	Y+19, r26	; 0x13
     482:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     484:	69 89       	ldd	r22, Y+17	; 0x11
     486:	7a 89       	ldd	r23, Y+18	; 0x12
     488:	8b 89       	ldd	r24, Y+19	; 0x13
     48a:	9c 89       	ldd	r25, Y+20	; 0x14
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e8       	ldi	r20, 0x80	; 128
     492:	5f e3       	ldi	r21, 0x3F	; 63
     494:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     498:	88 23       	and	r24, r24
     49a:	1c f4       	brge	.+6      	; 0x4a2 <nRF24L01_RxPacket+0x76>
		__ticks = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	88 8b       	std	Y+16, r24	; 0x10
     4a0:	91 c0       	rjmp	.+290    	; 0x5c4 <nRF24L01_RxPacket+0x198>
	else if (__tmp > 255)
     4a2:	69 89       	ldd	r22, Y+17	; 0x11
     4a4:	7a 89       	ldd	r23, Y+18	; 0x12
     4a6:	8b 89       	ldd	r24, Y+19	; 0x13
     4a8:	9c 89       	ldd	r25, Y+20	; 0x14
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4f e7       	ldi	r20, 0x7F	; 127
     4b0:	53 e4       	ldi	r21, 0x43	; 67
     4b2:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     4b6:	18 16       	cp	r1, r24
     4b8:	0c f0       	brlt	.+2      	; 0x4bc <nRF24L01_RxPacket+0x90>
     4ba:	7b c0       	rjmp	.+246    	; 0x5b2 <nRF24L01_RxPacket+0x186>
	{
		_delay_ms(__us / 1000.0);
     4bc:	6d 89       	ldd	r22, Y+21	; 0x15
     4be:	7e 89       	ldd	r23, Y+22	; 0x16
     4c0:	8f 89       	ldd	r24, Y+23	; 0x17
     4c2:	98 8d       	ldd	r25, Y+24	; 0x18
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	4a e7       	ldi	r20, 0x7A	; 122
     4ca:	54 e4       	ldi	r21, 0x44	; 68
     4cc:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3>
     4d0:	dc 01       	movw	r26, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	8c 87       	std	Y+12, r24	; 0x0c
     4d6:	9d 87       	std	Y+13, r25	; 0x0d
     4d8:	ae 87       	std	Y+14, r26	; 0x0e
     4da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4dc:	6c 85       	ldd	r22, Y+12	; 0x0c
     4de:	7d 85       	ldd	r23, Y+13	; 0x0d
     4e0:	8e 85       	ldd	r24, Y+14	; 0x0e
     4e2:	9f 85       	ldd	r25, Y+15	; 0x0f
     4e4:	26 e6       	ldi	r18, 0x66	; 102
     4e6:	36 e6       	ldi	r19, 0x66	; 102
     4e8:	46 ee       	ldi	r20, 0xE6	; 230
     4ea:	54 e4       	ldi	r21, 0x44	; 68
     4ec:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	88 87       	std	Y+8, r24	; 0x08
     4f6:	99 87       	std	Y+9, r25	; 0x09
     4f8:	aa 87       	std	Y+10, r26	; 0x0a
     4fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     4fc:	68 85       	ldd	r22, Y+8	; 0x08
     4fe:	79 85       	ldd	r23, Y+9	; 0x09
     500:	8a 85       	ldd	r24, Y+10	; 0x0a
     502:	9b 85       	ldd	r25, Y+11	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e8       	ldi	r20, 0x80	; 128
     50a:	5f e3       	ldi	r21, 0x3F	; 63
     50c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     510:	88 23       	and	r24, r24
     512:	2c f4       	brge	.+10     	; 0x51e <nRF24L01_RxPacket+0xf2>
		__ticks = 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	9f 83       	std	Y+7, r25	; 0x07
     51a:	8e 83       	std	Y+6, r24	; 0x06
     51c:	3f c0       	rjmp	.+126    	; 0x59c <nRF24L01_RxPacket+0x170>
	else if (__tmp > 65535)
     51e:	68 85       	ldd	r22, Y+8	; 0x08
     520:	79 85       	ldd	r23, Y+9	; 0x09
     522:	8a 85       	ldd	r24, Y+10	; 0x0a
     524:	9b 85       	ldd	r25, Y+11	; 0x0b
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	3f ef       	ldi	r19, 0xFF	; 255
     52a:	4f e7       	ldi	r20, 0x7F	; 127
     52c:	57 e4       	ldi	r21, 0x47	; 71
     52e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     532:	18 16       	cp	r1, r24
     534:	4c f5       	brge	.+82     	; 0x588 <nRF24L01_RxPacket+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     536:	6c 85       	ldd	r22, Y+12	; 0x0c
     538:	7d 85       	ldd	r23, Y+13	; 0x0d
     53a:	8e 85       	ldd	r24, Y+14	; 0x0e
     53c:	9f 85       	ldd	r25, Y+15	; 0x0f
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e2       	ldi	r20, 0x20	; 32
     544:	51 e4       	ldi	r21, 0x41	; 65
     546:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	bc 01       	movw	r22, r24
     550:	cd 01       	movw	r24, r26
     552:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	9f 83       	std	Y+7, r25	; 0x07
     55c:	8e 83       	std	Y+6, r24	; 0x06
     55e:	0f c0       	rjmp	.+30     	; 0x57e <nRF24L01_RxPacket+0x152>
     560:	88 eb       	ldi	r24, 0xB8	; 184
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9d 83       	std	Y+5, r25	; 0x05
     566:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     568:	8c 81       	ldd	r24, Y+4	; 0x04
     56a:	9d 81       	ldd	r25, Y+5	; 0x05
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <nRF24L01_RxPacket+0x140>
     570:	9d 83       	std	Y+5, r25	; 0x05
     572:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     574:	8e 81       	ldd	r24, Y+6	; 0x06
     576:	9f 81       	ldd	r25, Y+7	; 0x07
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	9f 83       	std	Y+7, r25	; 0x07
     57c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57e:	8e 81       	ldd	r24, Y+6	; 0x06
     580:	9f 81       	ldd	r25, Y+7	; 0x07
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	69 f7       	brne	.-38     	; 0x560 <nRF24L01_RxPacket+0x134>
     586:	24 c0       	rjmp	.+72     	; 0x5d0 <nRF24L01_RxPacket+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     588:	68 85       	ldd	r22, Y+8	; 0x08
     58a:	79 85       	ldd	r23, Y+9	; 0x09
     58c:	8a 85       	ldd	r24, Y+10	; 0x0a
     58e:	9b 85       	ldd	r25, Y+11	; 0x0b
     590:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	9f 83       	std	Y+7, r25	; 0x07
     59a:	8e 83       	std	Y+6, r24	; 0x06
     59c:	8e 81       	ldd	r24, Y+6	; 0x06
     59e:	9f 81       	ldd	r25, Y+7	; 0x07
     5a0:	9b 83       	std	Y+3, r25	; 0x03
     5a2:	8a 83       	std	Y+2, r24	; 0x02
     5a4:	8a 81       	ldd	r24, Y+2	; 0x02
     5a6:	9b 81       	ldd	r25, Y+3	; 0x03
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <nRF24L01_RxPacket+0x17c>
     5ac:	9b 83       	std	Y+3, r25	; 0x03
     5ae:	8a 83       	std	Y+2, r24	; 0x02
     5b0:	0f c0       	rjmp	.+30     	; 0x5d0 <nRF24L01_RxPacket+0x1a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5b2:	69 89       	ldd	r22, Y+17	; 0x11
     5b4:	7a 89       	ldd	r23, Y+18	; 0x12
     5b6:	8b 89       	ldd	r24, Y+19	; 0x13
     5b8:	9c 89       	ldd	r25, Y+20	; 0x14
     5ba:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	88 8b       	std	Y+16, r24	; 0x10
     5c4:	88 89       	ldd	r24, Y+16	; 0x10
     5c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	8a 95       	dec	r24
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <nRF24L01_RxPacket+0x19e>
     5ce:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	status=SPI_RW(STATUS);	// 读取状态寄存其来判断数据接收状况	(Check the state judge read data receiving condition)
     5d0:	87 e0       	ldi	r24, 0x07	; 7
     5d2:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_RW>
     5d6:	8a 8f       	std	Y+26, r24	; 0x1a

	printf("STATUS接受状态：0x%2x\r\n",status);
     5d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <nRF24L01_RxPacket+0x1b4>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <nRF24L01_RxPacket+0x1b6>
     5e2:	ed b7       	in	r30, 0x3d	; 61
     5e4:	fe b7       	in	r31, 0x3e	; 62
     5e6:	31 96       	adiw	r30, 0x01	; 1
     5e8:	86 e7       	ldi	r24, 0x76	; 118
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	91 83       	std	Z+1, r25	; 0x01
     5ee:	80 83       	st	Z, r24
     5f0:	33 83       	std	Z+3, r19	; 0x03
     5f2:	22 83       	std	Z+2, r18	; 0x02
     5f4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <printf>
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0

	if(status & RX_DR)				// 判断是否接收到数据(Judge whether to receive data)
     600:	8a 8d       	ldd	r24, Y+26	; 0x1a
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	80 74       	andi	r24, 0x40	; 64
     608:	90 70       	andi	r25, 0x00	; 0
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	49 f0       	breq	.+18     	; 0x620 <nRF24L01_RxPacket+0x1f4>
	{
		SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
     60e:	2b 8d       	ldd	r18, Y+27	; 0x1b
     610:	3c 8d       	ldd	r19, Y+28	; 0x1c
     612:	81 e6       	ldi	r24, 0x61	; 97
     614:	b9 01       	movw	r22, r18
     616:	40 e2       	ldi	r20, 0x20	; 32
     618:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Read_Buf>

		revale =1;			
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	89 8f       	std	Y+25, r24	; 0x19
	}
	SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS,status);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
     620:	87 e2       	ldi	r24, 0x27	; 39
     622:	6a 8d       	ldd	r22, Y+26	; 0x1a
     624:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
	CE_1;
     628:	a2 e3       	ldi	r26, 0x32	; 50
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	e2 e3       	ldi	r30, 0x32	; 50
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	80 68       	ori	r24, 0x80	; 128
     634:	8c 93       	st	X, r24
	return revale;	
     636:	89 8d       	ldd	r24, Y+25	; 0x19
}
     638:	6c 96       	adiw	r28, 0x1c	; 28
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	08 95       	ret

0000064a <nRF24L01_TxPacket>:

 /****************发送函数***************************/
void nRF24L01_TxPacket(unsigned char * tx_buf)
{
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	6a 97       	sbiw	r28, 0x1a	; 26
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	9a 8f       	std	Y+26, r25	; 0x1a
     660:	89 8f       	std	Y+25, r24	; 0x19
	CE_0;			//StandBy I模式	
     662:	a2 e3       	ldi	r26, 0x32	; 50
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	e2 e3       	ldi	r30, 0x32	; 50
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	8f 77       	andi	r24, 0x7F	; 127
     66e:	8c 93       	st	X, r24
	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址	(Loading the receiver address)
     670:	21 e7       	ldi	r18, 0x71	; 113
     672:	31 e0       	ldi	r19, 0x01	; 1
     674:	8a e2       	ldi	r24, 0x2A	; 42
     676:	b9 01       	movw	r22, r18
     678:	45 e0       	ldi	r20, 0x05	; 5
     67a:	0e 94 1a 01 	call	0x234	; 0x234 <SPI_Write_Buf>
	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); 			 // 装载数据(Load data)	
     67e:	29 8d       	ldd	r18, Y+25	; 0x19
     680:	3a 8d       	ldd	r19, Y+26	; 0x1a
     682:	80 ea       	ldi	r24, 0xA0	; 160
     684:	b9 01       	movw	r22, r18
     686:	40 e2       	ldi	r20, 0x20	; 32
     688:	0e 94 1a 01 	call	0x234	; 0x234 <SPI_Write_Buf>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e);   		 // IRQ收发完成中断响应，16位CRC，主发送(IRQ transceiver complete interrupt response, 16 CRC, the Lord sent)
     68c:	80 e2       	ldi	r24, 0x20	; 32
     68e:	6e e0       	ldi	r22, 0x0E	; 14
     690:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
	CE_1;		 //置高CE，激发数据发送(Buy high CE, stimulate the data sent)
     694:	a2 e3       	ldi	r26, 0x32	; 50
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	e2 e3       	ldi	r30, 0x32	; 50
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	80 68       	ori	r24, 0x80	; 128
     6a0:	8c 93       	st	X, r24
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	a0 e2       	ldi	r26, 0x20	; 32
     6a8:	b1 e4       	ldi	r27, 0x41	; 65
     6aa:	8d 8b       	std	Y+21, r24	; 0x15
     6ac:	9e 8b       	std	Y+22, r25	; 0x16
     6ae:	af 8b       	std	Y+23, r26	; 0x17
     6b0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6b2:	6d 89       	ldd	r22, Y+21	; 0x15
     6b4:	7e 89       	ldd	r23, Y+22	; 0x16
     6b6:	8f 89       	ldd	r24, Y+23	; 0x17
     6b8:	98 8d       	ldd	r25, Y+24	; 0x18
     6ba:	22 e5       	ldi	r18, 0x52	; 82
     6bc:	39 e4       	ldi	r19, 0x49	; 73
     6be:	4d e1       	ldi	r20, 0x1D	; 29
     6c0:	50 e4       	ldi	r21, 0x40	; 64
     6c2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	89 8b       	std	Y+17, r24	; 0x11
     6cc:	9a 8b       	std	Y+18, r25	; 0x12
     6ce:	ab 8b       	std	Y+19, r26	; 0x13
     6d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     6d2:	69 89       	ldd	r22, Y+17	; 0x11
     6d4:	7a 89       	ldd	r23, Y+18	; 0x12
     6d6:	8b 89       	ldd	r24, Y+19	; 0x13
     6d8:	9c 89       	ldd	r25, Y+20	; 0x14
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e8       	ldi	r20, 0x80	; 128
     6e0:	5f e3       	ldi	r21, 0x3F	; 63
     6e2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     6e6:	88 23       	and	r24, r24
     6e8:	1c f4       	brge	.+6      	; 0x6f0 <nRF24L01_TxPacket+0xa6>
		__ticks = 1;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	88 8b       	std	Y+16, r24	; 0x10
     6ee:	91 c0       	rjmp	.+290    	; 0x812 <nRF24L01_TxPacket+0x1c8>
	else if (__tmp > 255)
     6f0:	69 89       	ldd	r22, Y+17	; 0x11
     6f2:	7a 89       	ldd	r23, Y+18	; 0x12
     6f4:	8b 89       	ldd	r24, Y+19	; 0x13
     6f6:	9c 89       	ldd	r25, Y+20	; 0x14
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	4f e7       	ldi	r20, 0x7F	; 127
     6fe:	53 e4       	ldi	r21, 0x43	; 67
     700:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     704:	18 16       	cp	r1, r24
     706:	0c f0       	brlt	.+2      	; 0x70a <nRF24L01_TxPacket+0xc0>
     708:	7b c0       	rjmp	.+246    	; 0x800 <nRF24L01_TxPacket+0x1b6>
	{
		_delay_ms(__us / 1000.0);
     70a:	6d 89       	ldd	r22, Y+21	; 0x15
     70c:	7e 89       	ldd	r23, Y+22	; 0x16
     70e:	8f 89       	ldd	r24, Y+23	; 0x17
     710:	98 8d       	ldd	r25, Y+24	; 0x18
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	4a e7       	ldi	r20, 0x7A	; 122
     718:	54 e4       	ldi	r21, 0x44	; 68
     71a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	8c 87       	std	Y+12, r24	; 0x0c
     724:	9d 87       	std	Y+13, r25	; 0x0d
     726:	ae 87       	std	Y+14, r26	; 0x0e
     728:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     72a:	6c 85       	ldd	r22, Y+12	; 0x0c
     72c:	7d 85       	ldd	r23, Y+13	; 0x0d
     72e:	8e 85       	ldd	r24, Y+14	; 0x0e
     730:	9f 85       	ldd	r25, Y+15	; 0x0f
     732:	26 e6       	ldi	r18, 0x66	; 102
     734:	36 e6       	ldi	r19, 0x66	; 102
     736:	46 ee       	ldi	r20, 0xE6	; 230
     738:	54 e4       	ldi	r21, 0x44	; 68
     73a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	88 87       	std	Y+8, r24	; 0x08
     744:	99 87       	std	Y+9, r25	; 0x09
     746:	aa 87       	std	Y+10, r26	; 0x0a
     748:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     74a:	68 85       	ldd	r22, Y+8	; 0x08
     74c:	79 85       	ldd	r23, Y+9	; 0x09
     74e:	8a 85       	ldd	r24, Y+10	; 0x0a
     750:	9b 85       	ldd	r25, Y+11	; 0x0b
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	40 e8       	ldi	r20, 0x80	; 128
     758:	5f e3       	ldi	r21, 0x3F	; 63
     75a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     75e:	88 23       	and	r24, r24
     760:	2c f4       	brge	.+10     	; 0x76c <nRF24L01_TxPacket+0x122>
		__ticks = 1;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	9f 83       	std	Y+7, r25	; 0x07
     768:	8e 83       	std	Y+6, r24	; 0x06
     76a:	3f c0       	rjmp	.+126    	; 0x7ea <nRF24L01_TxPacket+0x1a0>
	else if (__tmp > 65535)
     76c:	68 85       	ldd	r22, Y+8	; 0x08
     76e:	79 85       	ldd	r23, Y+9	; 0x09
     770:	8a 85       	ldd	r24, Y+10	; 0x0a
     772:	9b 85       	ldd	r25, Y+11	; 0x0b
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	3f ef       	ldi	r19, 0xFF	; 255
     778:	4f e7       	ldi	r20, 0x7F	; 127
     77a:	57 e4       	ldi	r21, 0x47	; 71
     77c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     780:	18 16       	cp	r1, r24
     782:	4c f5       	brge	.+82     	; 0x7d6 <nRF24L01_TxPacket+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     784:	6c 85       	ldd	r22, Y+12	; 0x0c
     786:	7d 85       	ldd	r23, Y+13	; 0x0d
     788:	8e 85       	ldd	r24, Y+14	; 0x0e
     78a:	9f 85       	ldd	r25, Y+15	; 0x0f
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e2       	ldi	r20, 0x20	; 32
     792:	51 e4       	ldi	r21, 0x41	; 65
     794:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	bc 01       	movw	r22, r24
     79e:	cd 01       	movw	r24, r26
     7a0:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     7a4:	dc 01       	movw	r26, r24
     7a6:	cb 01       	movw	r24, r22
     7a8:	9f 83       	std	Y+7, r25	; 0x07
     7aa:	8e 83       	std	Y+6, r24	; 0x06
     7ac:	0f c0       	rjmp	.+30     	; 0x7cc <nRF24L01_TxPacket+0x182>
     7ae:	88 eb       	ldi	r24, 0xB8	; 184
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <nRF24L01_TxPacket+0x170>
     7be:	9d 83       	std	Y+5, r25	; 0x05
     7c0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c2:	8e 81       	ldd	r24, Y+6	; 0x06
     7c4:	9f 81       	ldd	r25, Y+7	; 0x07
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	9f 83       	std	Y+7, r25	; 0x07
     7ca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7cc:	8e 81       	ldd	r24, Y+6	; 0x06
     7ce:	9f 81       	ldd	r25, Y+7	; 0x07
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	69 f7       	brne	.-38     	; 0x7ae <nRF24L01_TxPacket+0x164>
     7d4:	24 c0       	rjmp	.+72     	; 0x81e <nRF24L01_TxPacket+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7d6:	68 85       	ldd	r22, Y+8	; 0x08
     7d8:	79 85       	ldd	r23, Y+9	; 0x09
     7da:	8a 85       	ldd	r24, Y+10	; 0x0a
     7dc:	9b 85       	ldd	r25, Y+11	; 0x0b
     7de:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     7e2:	dc 01       	movw	r26, r24
     7e4:	cb 01       	movw	r24, r22
     7e6:	9f 83       	std	Y+7, r25	; 0x07
     7e8:	8e 83       	std	Y+6, r24	; 0x06
     7ea:	8e 81       	ldd	r24, Y+6	; 0x06
     7ec:	9f 81       	ldd	r25, Y+7	; 0x07
     7ee:	9b 83       	std	Y+3, r25	; 0x03
     7f0:	8a 83       	std	Y+2, r24	; 0x02
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	9b 81       	ldd	r25, Y+3	; 0x03
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <nRF24L01_TxPacket+0x1ac>
     7fa:	9b 83       	std	Y+3, r25	; 0x03
     7fc:	8a 83       	std	Y+2, r24	; 0x02
     7fe:	0f c0       	rjmp	.+30     	; 0x81e <nRF24L01_TxPacket+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     800:	69 89       	ldd	r22, Y+17	; 0x11
     802:	7a 89       	ldd	r23, Y+18	; 0x12
     804:	8b 89       	ldd	r24, Y+19	; 0x13
     806:	9c 89       	ldd	r25, Y+20	; 0x14
     808:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	88 8b       	std	Y+16, r24	; 0x10
     812:	88 89       	ldd	r24, Y+16	; 0x10
     814:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	8a 95       	dec	r24
     81a:	f1 f7       	brne	.-4      	; 0x818 <nRF24L01_TxPacket+0x1ce>
     81c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
     81e:	6a 96       	adiw	r28, 0x1a	; 26
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	cf 91       	pop	r28
     82c:	df 91       	pop	r29
     82e:	08 95       	ret

00000830 <RX_Mode>:


void RX_Mode(void)
{
     830:	df 93       	push	r29
     832:	cf 93       	push	r28
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	68 97       	sbiw	r28, 0x18	; 24
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
	CE_0;
     844:	a2 e3       	ldi	r26, 0x32	; 50
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	e2 e3       	ldi	r30, 0x32	; 50
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8f 77       	andi	r24, 0x7F	; 127
     850:	8c 93       	st	X, r24
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);  // 接收设备接收通道0使用和发送设备相同的发送地址
     852:	21 e7       	ldi	r18, 0x71	; 113
     854:	31 e0       	ldi	r19, 0x01	; 1
     856:	8a e2       	ldi	r24, 0x2A	; 42
     858:	b9 01       	movw	r22, r18
     85a:	45 e0       	ldi	r20, 0x05	; 5
     85c:	0e 94 1a 01 	call	0x234	; 0x234 <SPI_Write_Buf>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH);  // 接收通道0选择和发送通道相同有效数据宽度 
     860:	81 e3       	ldi	r24, 0x31	; 49
     862:	60 e2       	ldi	r22, 0x20	; 32
     864:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
 
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);               // 使能接收通道0自动应答
     868:	81 e2       	ldi	r24, 0x21	; 33
     86a:	6f e3       	ldi	r22, 0x3F	; 63
     86c:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f);           // 使能接收通道0
     870:	82 e2       	ldi	r24, 0x22	; 34
     872:	6f e3       	ldi	r22, 0x3F	; 63
     874:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40);                 // 选择射频通道0x40
     878:	85 e2       	ldi	r24, 0x25	; 37
     87a:	68 e2       	ldi	r22, 0x28	; 40
     87c:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>

  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07);            // 数据传输率1Mbps，发射功率0dBm，低噪声放大器增益
     880:	86 e2       	ldi	r24, 0x26	; 38
     882:	67 e0       	ldi	r22, 0x07	; 7
     884:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0f);              // CRC使能，16位CRC校验，上电，接收模式
     888:	80 e2       	ldi	r24, 0x20	; 32
     88a:	6f e0       	ldi	r22, 0x0F	; 15
     88c:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	CE_1;
     890:	a2 e3       	ldi	r26, 0x32	; 50
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	e2 e3       	ldi	r30, 0x32	; 50
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	80 68       	ori	r24, 0x80	; 128
     89c:	8c 93       	st	X, r24
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	a0 e2       	ldi	r26, 0x20	; 32
     8a4:	b1 e4       	ldi	r27, 0x41	; 65
     8a6:	8d 8b       	std	Y+21, r24	; 0x15
     8a8:	9e 8b       	std	Y+22, r25	; 0x16
     8aa:	af 8b       	std	Y+23, r26	; 0x17
     8ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     8ae:	6d 89       	ldd	r22, Y+21	; 0x15
     8b0:	7e 89       	ldd	r23, Y+22	; 0x16
     8b2:	8f 89       	ldd	r24, Y+23	; 0x17
     8b4:	98 8d       	ldd	r25, Y+24	; 0x18
     8b6:	22 e5       	ldi	r18, 0x52	; 82
     8b8:	39 e4       	ldi	r19, 0x49	; 73
     8ba:	4d e1       	ldi	r20, 0x1D	; 29
     8bc:	50 e4       	ldi	r21, 0x40	; 64
     8be:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     8c2:	dc 01       	movw	r26, r24
     8c4:	cb 01       	movw	r24, r22
     8c6:	89 8b       	std	Y+17, r24	; 0x11
     8c8:	9a 8b       	std	Y+18, r25	; 0x12
     8ca:	ab 8b       	std	Y+19, r26	; 0x13
     8cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     8ce:	69 89       	ldd	r22, Y+17	; 0x11
     8d0:	7a 89       	ldd	r23, Y+18	; 0x12
     8d2:	8b 89       	ldd	r24, Y+19	; 0x13
     8d4:	9c 89       	ldd	r25, Y+20	; 0x14
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e8       	ldi	r20, 0x80	; 128
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     8e2:	88 23       	and	r24, r24
     8e4:	1c f4       	brge	.+6      	; 0x8ec <RX_Mode+0xbc>
		__ticks = 1;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	88 8b       	std	Y+16, r24	; 0x10
     8ea:	91 c0       	rjmp	.+290    	; 0xa0e <RX_Mode+0x1de>
	else if (__tmp > 255)
     8ec:	69 89       	ldd	r22, Y+17	; 0x11
     8ee:	7a 89       	ldd	r23, Y+18	; 0x12
     8f0:	8b 89       	ldd	r24, Y+19	; 0x13
     8f2:	9c 89       	ldd	r25, Y+20	; 0x14
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	4f e7       	ldi	r20, 0x7F	; 127
     8fa:	53 e4       	ldi	r21, 0x43	; 67
     8fc:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     900:	18 16       	cp	r1, r24
     902:	0c f0       	brlt	.+2      	; 0x906 <RX_Mode+0xd6>
     904:	7b c0       	rjmp	.+246    	; 0x9fc <RX_Mode+0x1cc>
	{
		_delay_ms(__us / 1000.0);
     906:	6d 89       	ldd	r22, Y+21	; 0x15
     908:	7e 89       	ldd	r23, Y+22	; 0x16
     90a:	8f 89       	ldd	r24, Y+23	; 0x17
     90c:	98 8d       	ldd	r25, Y+24	; 0x18
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	4a e7       	ldi	r20, 0x7A	; 122
     914:	54 e4       	ldi	r21, 0x44	; 68
     916:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	8c 87       	std	Y+12, r24	; 0x0c
     920:	9d 87       	std	Y+13, r25	; 0x0d
     922:	ae 87       	std	Y+14, r26	; 0x0e
     924:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     926:	6c 85       	ldd	r22, Y+12	; 0x0c
     928:	7d 85       	ldd	r23, Y+13	; 0x0d
     92a:	8e 85       	ldd	r24, Y+14	; 0x0e
     92c:	9f 85       	ldd	r25, Y+15	; 0x0f
     92e:	26 e6       	ldi	r18, 0x66	; 102
     930:	36 e6       	ldi	r19, 0x66	; 102
     932:	46 ee       	ldi	r20, 0xE6	; 230
     934:	54 e4       	ldi	r21, 0x44	; 68
     936:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	88 87       	std	Y+8, r24	; 0x08
     940:	99 87       	std	Y+9, r25	; 0x09
     942:	aa 87       	std	Y+10, r26	; 0x0a
     944:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     946:	68 85       	ldd	r22, Y+8	; 0x08
     948:	79 85       	ldd	r23, Y+9	; 0x09
     94a:	8a 85       	ldd	r24, Y+10	; 0x0a
     94c:	9b 85       	ldd	r25, Y+11	; 0x0b
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e8       	ldi	r20, 0x80	; 128
     954:	5f e3       	ldi	r21, 0x3F	; 63
     956:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     95a:	88 23       	and	r24, r24
     95c:	2c f4       	brge	.+10     	; 0x968 <RX_Mode+0x138>
		__ticks = 1;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	9f 83       	std	Y+7, r25	; 0x07
     964:	8e 83       	std	Y+6, r24	; 0x06
     966:	3f c0       	rjmp	.+126    	; 0x9e6 <RX_Mode+0x1b6>
	else if (__tmp > 65535)
     968:	68 85       	ldd	r22, Y+8	; 0x08
     96a:	79 85       	ldd	r23, Y+9	; 0x09
     96c:	8a 85       	ldd	r24, Y+10	; 0x0a
     96e:	9b 85       	ldd	r25, Y+11	; 0x0b
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	3f ef       	ldi	r19, 0xFF	; 255
     974:	4f e7       	ldi	r20, 0x7F	; 127
     976:	57 e4       	ldi	r21, 0x47	; 71
     978:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     97c:	18 16       	cp	r1, r24
     97e:	4c f5       	brge	.+82     	; 0x9d2 <RX_Mode+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     980:	6c 85       	ldd	r22, Y+12	; 0x0c
     982:	7d 85       	ldd	r23, Y+13	; 0x0d
     984:	8e 85       	ldd	r24, Y+14	; 0x0e
     986:	9f 85       	ldd	r25, Y+15	; 0x0f
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e2       	ldi	r20, 0x20	; 32
     98e:	51 e4       	ldi	r21, 0x41	; 65
     990:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     994:	dc 01       	movw	r26, r24
     996:	cb 01       	movw	r24, r22
     998:	bc 01       	movw	r22, r24
     99a:	cd 01       	movw	r24, r26
     99c:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     9a0:	dc 01       	movw	r26, r24
     9a2:	cb 01       	movw	r24, r22
     9a4:	9f 83       	std	Y+7, r25	; 0x07
     9a6:	8e 83       	std	Y+6, r24	; 0x06
     9a8:	0f c0       	rjmp	.+30     	; 0x9c8 <RX_Mode+0x198>
     9aa:	88 eb       	ldi	r24, 0xB8	; 184
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	9d 83       	std	Y+5, r25	; 0x05
     9b0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9b2:	8c 81       	ldd	r24, Y+4	; 0x04
     9b4:	9d 81       	ldd	r25, Y+5	; 0x05
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <RX_Mode+0x186>
     9ba:	9d 83       	std	Y+5, r25	; 0x05
     9bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9be:	8e 81       	ldd	r24, Y+6	; 0x06
     9c0:	9f 81       	ldd	r25, Y+7	; 0x07
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	9f 83       	std	Y+7, r25	; 0x07
     9c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c8:	8e 81       	ldd	r24, Y+6	; 0x06
     9ca:	9f 81       	ldd	r25, Y+7	; 0x07
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	69 f7       	brne	.-38     	; 0x9aa <RX_Mode+0x17a>
     9d0:	24 c0       	rjmp	.+72     	; 0xa1a <RX_Mode+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d2:	68 85       	ldd	r22, Y+8	; 0x08
     9d4:	79 85       	ldd	r23, Y+9	; 0x09
     9d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     9da:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     9de:	dc 01       	movw	r26, r24
     9e0:	cb 01       	movw	r24, r22
     9e2:	9f 83       	std	Y+7, r25	; 0x07
     9e4:	8e 83       	std	Y+6, r24	; 0x06
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ea:	9b 83       	std	Y+3, r25	; 0x03
     9ec:	8a 83       	std	Y+2, r24	; 0x02
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	9b 81       	ldd	r25, Y+3	; 0x03
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <RX_Mode+0x1c2>
     9f6:	9b 83       	std	Y+3, r25	; 0x03
     9f8:	8a 83       	std	Y+2, r24	; 0x02
     9fa:	0f c0       	rjmp	.+30     	; 0xa1a <RX_Mode+0x1ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     9fc:	69 89       	ldd	r22, Y+17	; 0x11
     9fe:	7a 89       	ldd	r23, Y+18	; 0x12
     a00:	8b 89       	ldd	r24, Y+19	; 0x13
     a02:	9c 89       	ldd	r25, Y+20	; 0x14
     a04:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	88 8b       	std	Y+16, r24	; 0x10
     a0e:	88 89       	ldd	r24, Y+16	; 0x10
     a10:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	8a 95       	dec	r24
     a16:	f1 f7       	brne	.-4      	; 0xa14 <RX_Mode+0x1e4>
     a18:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
}
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	cf 91       	pop	r28
     a28:	df 91       	pop	r29
     a2a:	08 95       	ret

00000a2c <TX_Mode>:

void TX_Mode(uint8_t * tx_buf)
{
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	6a 97       	sbiw	r28, 0x1a	; 26
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	9a 8f       	std	Y+26, r25	; 0x1a
     a42:	89 8f       	std	Y+25, r24	; 0x19
	CE_0;
     a44:	a2 e3       	ldi	r26, 0x32	; 50
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	e2 e3       	ldi	r30, 0x32	; 50
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	8f 77       	andi	r24, 0x7F	; 127
     a50:	8c 93       	st	X, r24
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);     // 写入发送地址
     a52:	21 e7       	ldi	r18, 0x71	; 113
     a54:	31 e0       	ldi	r19, 0x01	; 1
     a56:	80 e3       	ldi	r24, 0x30	; 48
     a58:	b9 01       	movw	r22, r18
     a5a:	45 e0       	ldi	r20, 0x05	; 5
     a5c:	0e 94 1a 01 	call	0x234	; 0x234 <SPI_Write_Buf>
  	SPI_Write_Buf(WRITE_REG_NRF24L01 + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);  // 为了应答接收设备，接收通道0地址和发送地址相同
     a60:	21 e7       	ldi	r18, 0x71	; 113
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	8a e2       	ldi	r24, 0x2A	; 42
     a66:	b9 01       	movw	r22, r18
     a68:	45 e0       	ldi	r20, 0x05	; 5
     a6a:	0e 94 1a 01 	call	0x234	; 0x234 <SPI_Write_Buf>
  	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); 			 // 装载数据
     a6e:	29 8d       	ldd	r18, Y+25	; 0x19
     a70:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a72:	80 ea       	ldi	r24, 0xA0	; 160
     a74:	b9 01       	movw	r22, r18
     a76:	40 e2       	ldi	r20, 0x20	; 32
     a78:	0e 94 1a 01 	call	0x234	; 0x234 <SPI_Write_Buf>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);       // 使能接收通道0自动应答
     a7c:	81 e2       	ldi	r24, 0x21	; 33
     a7e:	6f e3       	ldi	r22, 0x3F	; 63
     a80:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f);   // 使能接收通道0
     a84:	82 e2       	ldi	r24, 0x22	; 34
     a86:	6f e3       	ldi	r22, 0x3F	; 63
     a88:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x0a);  // 自动重发延时等待250us+86us，自动重发10次
     a8c:	84 e2       	ldi	r24, 0x24	; 36
     a8e:	6a e0       	ldi	r22, 0x0A	; 10
     a90:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40);         // 选择射频通道0x40
     a94:	85 e2       	ldi	r24, 0x25	; 37
     a96:	68 e2       	ldi	r22, 0x28	; 40
     a98:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP, 0x07);    // 数据传输率1Mbps，发射功率0dBm，低噪声放大器增益
     a9c:	86 e2       	ldi	r24, 0x26	; 38
     a9e:	67 e0       	ldi	r22, 0x07	; 7
     aa0:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RX_PW_P0, TX_PLOAD_WIDTH);  // 接收通道0选择和发送通道相同有效数据宽度
     aa4:	81 e3       	ldi	r24, 0x31	; 49
     aa6:	60 e2       	ldi	r22, 0x20	; 32
     aa8:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
  	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e);      // CRC使能，16位CRC校验，上电
     aac:	80 e2       	ldi	r24, 0x20	; 32
     aae:	6e e0       	ldi	r22, 0x0E	; 14
     ab0:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
	CE_1;
     ab4:	a2 e3       	ldi	r26, 0x32	; 50
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e2 e3       	ldi	r30, 0x32	; 50
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	80 68       	ori	r24, 0x80	; 128
     ac0:	8c 93       	st	X, r24
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a0 e2       	ldi	r26, 0x20	; 32
     ac8:	b1 e4       	ldi	r27, 0x41	; 65
     aca:	8d 8b       	std	Y+21, r24	; 0x15
     acc:	9e 8b       	std	Y+22, r25	; 0x16
     ace:	af 8b       	std	Y+23, r26	; 0x17
     ad0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ad2:	6d 89       	ldd	r22, Y+21	; 0x15
     ad4:	7e 89       	ldd	r23, Y+22	; 0x16
     ad6:	8f 89       	ldd	r24, Y+23	; 0x17
     ad8:	98 8d       	ldd	r25, Y+24	; 0x18
     ada:	22 e5       	ldi	r18, 0x52	; 82
     adc:	39 e4       	ldi	r19, 0x49	; 73
     ade:	4d e1       	ldi	r20, 0x1D	; 29
     ae0:	50 e4       	ldi	r21, 0x40	; 64
     ae2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	89 8b       	std	Y+17, r24	; 0x11
     aec:	9a 8b       	std	Y+18, r25	; 0x12
     aee:	ab 8b       	std	Y+19, r26	; 0x13
     af0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     af2:	69 89       	ldd	r22, Y+17	; 0x11
     af4:	7a 89       	ldd	r23, Y+18	; 0x12
     af6:	8b 89       	ldd	r24, Y+19	; 0x13
     af8:	9c 89       	ldd	r25, Y+20	; 0x14
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	5f e3       	ldi	r21, 0x3F	; 63
     b02:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     b06:	88 23       	and	r24, r24
     b08:	1c f4       	brge	.+6      	; 0xb10 <TX_Mode+0xe4>
		__ticks = 1;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	88 8b       	std	Y+16, r24	; 0x10
     b0e:	91 c0       	rjmp	.+290    	; 0xc32 <TX_Mode+0x206>
	else if (__tmp > 255)
     b10:	69 89       	ldd	r22, Y+17	; 0x11
     b12:	7a 89       	ldd	r23, Y+18	; 0x12
     b14:	8b 89       	ldd	r24, Y+19	; 0x13
     b16:	9c 89       	ldd	r25, Y+20	; 0x14
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	4f e7       	ldi	r20, 0x7F	; 127
     b1e:	53 e4       	ldi	r21, 0x43	; 67
     b20:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     b24:	18 16       	cp	r1, r24
     b26:	0c f0       	brlt	.+2      	; 0xb2a <TX_Mode+0xfe>
     b28:	7b c0       	rjmp	.+246    	; 0xc20 <TX_Mode+0x1f4>
	{
		_delay_ms(__us / 1000.0);
     b2a:	6d 89       	ldd	r22, Y+21	; 0x15
     b2c:	7e 89       	ldd	r23, Y+22	; 0x16
     b2e:	8f 89       	ldd	r24, Y+23	; 0x17
     b30:	98 8d       	ldd	r25, Y+24	; 0x18
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	4a e7       	ldi	r20, 0x7A	; 122
     b38:	54 e4       	ldi	r21, 0x44	; 68
     b3a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	8c 87       	std	Y+12, r24	; 0x0c
     b44:	9d 87       	std	Y+13, r25	; 0x0d
     b46:	ae 87       	std	Y+14, r26	; 0x0e
     b48:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4a:	6c 85       	ldd	r22, Y+12	; 0x0c
     b4c:	7d 85       	ldd	r23, Y+13	; 0x0d
     b4e:	8e 85       	ldd	r24, Y+14	; 0x0e
     b50:	9f 85       	ldd	r25, Y+15	; 0x0f
     b52:	26 e6       	ldi	r18, 0x66	; 102
     b54:	36 e6       	ldi	r19, 0x66	; 102
     b56:	46 ee       	ldi	r20, 0xE6	; 230
     b58:	54 e4       	ldi	r21, 0x44	; 68
     b5a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     b5e:	dc 01       	movw	r26, r24
     b60:	cb 01       	movw	r24, r22
     b62:	88 87       	std	Y+8, r24	; 0x08
     b64:	99 87       	std	Y+9, r25	; 0x09
     b66:	aa 87       	std	Y+10, r26	; 0x0a
     b68:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     b6a:	68 85       	ldd	r22, Y+8	; 0x08
     b6c:	79 85       	ldd	r23, Y+9	; 0x09
     b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b70:	9b 85       	ldd	r25, Y+11	; 0x0b
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e8       	ldi	r20, 0x80	; 128
     b78:	5f e3       	ldi	r21, 0x3F	; 63
     b7a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     b7e:	88 23       	and	r24, r24
     b80:	2c f4       	brge	.+10     	; 0xb8c <TX_Mode+0x160>
		__ticks = 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	9f 83       	std	Y+7, r25	; 0x07
     b88:	8e 83       	std	Y+6, r24	; 0x06
     b8a:	3f c0       	rjmp	.+126    	; 0xc0a <TX_Mode+0x1de>
	else if (__tmp > 65535)
     b8c:	68 85       	ldd	r22, Y+8	; 0x08
     b8e:	79 85       	ldd	r23, Y+9	; 0x09
     b90:	8a 85       	ldd	r24, Y+10	; 0x0a
     b92:	9b 85       	ldd	r25, Y+11	; 0x0b
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	3f ef       	ldi	r19, 0xFF	; 255
     b98:	4f e7       	ldi	r20, 0x7F	; 127
     b9a:	57 e4       	ldi	r21, 0x47	; 71
     b9c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     ba0:	18 16       	cp	r1, r24
     ba2:	4c f5       	brge	.+82     	; 0xbf6 <TX_Mode+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba4:	6c 85       	ldd	r22, Y+12	; 0x0c
     ba6:	7d 85       	ldd	r23, Y+13	; 0x0d
     ba8:	8e 85       	ldd	r24, Y+14	; 0x0e
     baa:	9f 85       	ldd	r25, Y+15	; 0x0f
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e2       	ldi	r20, 0x20	; 32
     bb2:	51 e4       	ldi	r21, 0x41	; 65
     bb4:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	9f 83       	std	Y+7, r25	; 0x07
     bca:	8e 83       	std	Y+6, r24	; 0x06
     bcc:	0f c0       	rjmp	.+30     	; 0xbec <TX_Mode+0x1c0>
     bce:	88 eb       	ldi	r24, 0xB8	; 184
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9d 83       	std	Y+5, r25	; 0x05
     bd4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <TX_Mode+0x1ae>
     bde:	9d 83       	std	Y+5, r25	; 0x05
     be0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be2:	8e 81       	ldd	r24, Y+6	; 0x06
     be4:	9f 81       	ldd	r25, Y+7	; 0x07
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	9f 83       	std	Y+7, r25	; 0x07
     bea:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bec:	8e 81       	ldd	r24, Y+6	; 0x06
     bee:	9f 81       	ldd	r25, Y+7	; 0x07
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	69 f7       	brne	.-38     	; 0xbce <TX_Mode+0x1a2>
     bf4:	24 c0       	rjmp	.+72     	; 0xc3e <TX_Mode+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf6:	68 85       	ldd	r22, Y+8	; 0x08
     bf8:	79 85       	ldd	r23, Y+9	; 0x09
     bfa:	8a 85       	ldd	r24, Y+10	; 0x0a
     bfc:	9b 85       	ldd	r25, Y+11	; 0x0b
     bfe:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9f 83       	std	Y+7, r25	; 0x07
     c08:	8e 83       	std	Y+6, r24	; 0x06
     c0a:	8e 81       	ldd	r24, Y+6	; 0x06
     c0c:	9f 81       	ldd	r25, Y+7	; 0x07
     c0e:	9b 83       	std	Y+3, r25	; 0x03
     c10:	8a 83       	std	Y+2, r24	; 0x02
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <TX_Mode+0x1ea>
     c1a:	9b 83       	std	Y+3, r25	; 0x03
     c1c:	8a 83       	std	Y+2, r24	; 0x02
     c1e:	0f c0       	rjmp	.+30     	; 0xc3e <TX_Mode+0x212>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c20:	69 89       	ldd	r22, Y+17	; 0x11
     c22:	7a 89       	ldd	r23, Y+18	; 0x12
     c24:	8b 89       	ldd	r24, Y+19	; 0x13
     c26:	9c 89       	ldd	r25, Y+20	; 0x14
     c28:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	88 8b       	std	Y+16, r24	; 0x10
     c32:	88 89       	ldd	r24, Y+16	; 0x10
     c34:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	8a 95       	dec	r24
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <TX_Mode+0x20c>
     c3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
} 
     c3e:	6a 96       	adiw	r28, 0x1a	; 26
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <nRF24L01_Initial>:

void nRF24L01_Initial(void)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
/* IRQ(PB4)   CSN(PD6)   CE(PD7) */
/* MISO(PB3)  MOSI(PB2)  SCK(PB1) SS(PB0) */

	DDRB |= (1<<1) | (1<<2) | (1<<0) ;        // ->output
     c58:	a7 e3       	ldi	r26, 0x37	; 55
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e7 e3       	ldi	r30, 0x37	; 55
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	87 60       	ori	r24, 0x07	; 7
     c64:	8c 93       	st	X, r24
	DDRB &= ~((1<<4)|(1<<3));
     c66:	a7 e3       	ldi	r26, 0x37	; 55
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e7 e3       	ldi	r30, 0x37	; 55
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	87 7e       	andi	r24, 0xE7	; 231
     c72:	8c 93       	st	X, r24
	PORTB |=  (1<<3) |(1<<4) |(1<<2) |(1<<1);
     c74:	a8 e3       	ldi	r26, 0x38	; 56
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e8 e3       	ldi	r30, 0x38	; 56
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8e 61       	ori	r24, 0x1E	; 30
     c80:	8c 93       	st	X, r24
	PORTB &= ~(1<<0);
     c82:	a8 e3       	ldi	r26, 0x38	; 56
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e8 e3       	ldi	r30, 0x38	; 56
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	8e 7f       	andi	r24, 0xFE	; 254
     c8e:	8c 93       	st	X, r24

	DDRD |= (1<<6) | (1<<7);
     c90:	a1 e3       	ldi	r26, 0x31	; 49
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e1 e3       	ldi	r30, 0x31	; 49
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	80 6c       	ori	r24, 0xC0	; 192
     c9c:	8c 93       	st	X, r24
	PORTD |=  (1<<6) |(1<<7);
     c9e:	a2 e3       	ldi	r26, 0x32	; 50
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e2 e3       	ldi	r30, 0x32	; 50
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 6c       	ori	r24, 0xC0	; 192
     caa:	8c 93       	st	X, r24
//    while(1);
//	SPCR = 0X5E;
//    SPSR=0x00;
	SPCR=0x50;          //使能SPI ， 设置SPI为主模式，空闲时CLI为1，第一个上升沿采集数据，时钟    FOSC/16
     cac:	ed e2       	ldi	r30, 0x2D	; 45
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 e5       	ldi	r24, 0x50	; 80
     cb2:	80 83       	st	Z, r24
	SPSR=0x00;			//setup SPI
     cb4:	ee e2       	ldi	r30, 0x2E	; 46
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
	
	 
 	CSN_1;
     cba:	a2 e3       	ldi	r26, 0x32	; 50
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e2 e3       	ldi	r30, 0x32	; 50
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 64       	ori	r24, 0x40	; 64
     cc6:	8c 93       	st	X, r24
	CE_0; 
     cc8:	a2 e3       	ldi	r26, 0x32	; 50
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e2 e3       	ldi	r30, 0x32	; 50
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 77       	andi	r24, 0x7F	; 127
     cd4:	8c 93       	st	X, r24
}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <nRF24L01_Config>:


/****************** 配置函数********************************/
void nRF24L01_Config(void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62

	SPI_RW_Reg(WRITE_REG_NRF24L01 + CONFIG, 0x0e); // Set PWR_UP bit, enable CRC(2 bytes) &Prim:RX. RX_DR enabled..
     ce4:	80 e2       	ldi	r24, 0x20	; 32
     ce6:	6e e0       	ldi	r22, 0x0E	; 14
     ce8:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_AA, 0x3f);
     cec:	81 e2       	ldi	r24, 0x21	; 33
     cee:	6f e3       	ldi	r22, 0x3F	; 63
     cf0:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + EN_RXADDR, 0x3f); // Enable Pipe0
     cf4:	82 e2       	ldi	r24, 0x22	; 34
     cf6:	6f e3       	ldi	r22, 0x3F	; 63
     cf8:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_AW, 0x02); // Setup address width=5 bytes
//	SPI_RW_Reg(WRITE_REG_NRF24L01 + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_CH, 40);
     cfc:	85 e2       	ldi	r24, 0x25	; 37
     cfe:	68 e2       	ldi	r22, 0x28	; 40
     d00:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
	SPI_RW_Reg(WRITE_REG_NRF24L01 + RF_SETUP,0x07); // TX_PWR:0dBm, Datarate:2Mbps,
     d04:	86 e2       	ldi	r24, 0x26	; 38
     d06:	67 e0       	ldi	r22, 0x07	; 7
     d08:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <NRF24L01_Send>:
 
void NRF24L01_Send(void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	69 97       	sbiw	r28, 0x19	; 25
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
    uint8_t status=0x00;
     d26:	19 8e       	std	Y+25, r1	; 0x19
	


	CE_0;
     d28:	a2 e3       	ldi	r26, 0x32	; 50
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e2 e3       	ldi	r30, 0x32	; 50
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 77       	andi	r24, 0x7F	; 127
     d34:	8c 93       	st	X, r24
	TX_Mode(TX_BUF);
     d36:	8e e3       	ldi	r24, 0x3E	; 62
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	0e 94 16 05 	call	0xa2c	; 0xa2c <TX_Mode>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a0 e2       	ldi	r26, 0x20	; 32
     d44:	b1 e4       	ldi	r27, 0x41	; 65
     d46:	8d 8b       	std	Y+21, r24	; 0x15
     d48:	9e 8b       	std	Y+22, r25	; 0x16
     d4a:	af 8b       	std	Y+23, r26	; 0x17
     d4c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d4e:	6d 89       	ldd	r22, Y+21	; 0x15
     d50:	7e 89       	ldd	r23, Y+22	; 0x16
     d52:	8f 89       	ldd	r24, Y+23	; 0x17
     d54:	98 8d       	ldd	r25, Y+24	; 0x18
     d56:	22 e5       	ldi	r18, 0x52	; 82
     d58:	39 e4       	ldi	r19, 0x49	; 73
     d5a:	4d e1       	ldi	r20, 0x1D	; 29
     d5c:	50 e4       	ldi	r21, 0x40	; 64
     d5e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	89 8b       	std	Y+17, r24	; 0x11
     d68:	9a 8b       	std	Y+18, r25	; 0x12
     d6a:	ab 8b       	std	Y+19, r26	; 0x13
     d6c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d6e:	69 89       	ldd	r22, Y+17	; 0x11
     d70:	7a 89       	ldd	r23, Y+18	; 0x12
     d72:	8b 89       	ldd	r24, Y+19	; 0x13
     d74:	9c 89       	ldd	r25, Y+20	; 0x14
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e8       	ldi	r20, 0x80	; 128
     d7c:	5f e3       	ldi	r21, 0x3F	; 63
     d7e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     d82:	88 23       	and	r24, r24
     d84:	1c f4       	brge	.+6      	; 0xd8c <NRF24L01_Send+0x7a>
		__ticks = 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	88 8b       	std	Y+16, r24	; 0x10
     d8a:	91 c0       	rjmp	.+290    	; 0xeae <NRF24L01_Send+0x19c>
	else if (__tmp > 255)
     d8c:	69 89       	ldd	r22, Y+17	; 0x11
     d8e:	7a 89       	ldd	r23, Y+18	; 0x12
     d90:	8b 89       	ldd	r24, Y+19	; 0x13
     d92:	9c 89       	ldd	r25, Y+20	; 0x14
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	53 e4       	ldi	r21, 0x43	; 67
     d9c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	0c f0       	brlt	.+2      	; 0xda6 <NRF24L01_Send+0x94>
     da4:	7b c0       	rjmp	.+246    	; 0xe9c <NRF24L01_Send+0x18a>
	{
		_delay_ms(__us / 1000.0);
     da6:	6d 89       	ldd	r22, Y+21	; 0x15
     da8:	7e 89       	ldd	r23, Y+22	; 0x16
     daa:	8f 89       	ldd	r24, Y+23	; 0x17
     dac:	98 8d       	ldd	r25, Y+24	; 0x18
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	4a e7       	ldi	r20, 0x7A	; 122
     db4:	54 e4       	ldi	r21, 0x44	; 68
     db6:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8c 87       	std	Y+12, r24	; 0x0c
     dc0:	9d 87       	std	Y+13, r25	; 0x0d
     dc2:	ae 87       	std	Y+14, r26	; 0x0e
     dc4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc6:	6c 85       	ldd	r22, Y+12	; 0x0c
     dc8:	7d 85       	ldd	r23, Y+13	; 0x0d
     dca:	8e 85       	ldd	r24, Y+14	; 0x0e
     dcc:	9f 85       	ldd	r25, Y+15	; 0x0f
     dce:	26 e6       	ldi	r18, 0x66	; 102
     dd0:	36 e6       	ldi	r19, 0x66	; 102
     dd2:	46 ee       	ldi	r20, 0xE6	; 230
     dd4:	54 e4       	ldi	r21, 0x44	; 68
     dd6:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	88 87       	std	Y+8, r24	; 0x08
     de0:	99 87       	std	Y+9, r25	; 0x09
     de2:	aa 87       	std	Y+10, r26	; 0x0a
     de4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     de6:	68 85       	ldd	r22, Y+8	; 0x08
     de8:	79 85       	ldd	r23, Y+9	; 0x09
     dea:	8a 85       	ldd	r24, Y+10	; 0x0a
     dec:	9b 85       	ldd	r25, Y+11	; 0x0b
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e8       	ldi	r20, 0x80	; 128
     df4:	5f e3       	ldi	r21, 0x3F	; 63
     df6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	2c f4       	brge	.+10     	; 0xe08 <NRF24L01_Send+0xf6>
		__ticks = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9f 83       	std	Y+7, r25	; 0x07
     e04:	8e 83       	std	Y+6, r24	; 0x06
     e06:	3f c0       	rjmp	.+126    	; 0xe86 <NRF24L01_Send+0x174>
	else if (__tmp > 65535)
     e08:	68 85       	ldd	r22, Y+8	; 0x08
     e0a:	79 85       	ldd	r23, Y+9	; 0x09
     e0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	3f ef       	ldi	r19, 0xFF	; 255
     e14:	4f e7       	ldi	r20, 0x7F	; 127
     e16:	57 e4       	ldi	r21, 0x47	; 71
     e18:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	4c f5       	brge	.+82     	; 0xe72 <NRF24L01_Send+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	6c 85       	ldd	r22, Y+12	; 0x0c
     e22:	7d 85       	ldd	r23, Y+13	; 0x0d
     e24:	8e 85       	ldd	r24, Y+14	; 0x0e
     e26:	9f 85       	ldd	r25, Y+15	; 0x0f
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e2       	ldi	r20, 0x20	; 32
     e2e:	51 e4       	ldi	r21, 0x41	; 65
     e30:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9f 83       	std	Y+7, r25	; 0x07
     e46:	8e 83       	std	Y+6, r24	; 0x06
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <NRF24L01_Send+0x156>
     e4a:	88 eb       	ldi	r24, 0xB8	; 184
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9d 83       	std	Y+5, r25	; 0x05
     e50:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <NRF24L01_Send+0x144>
     e5a:	9d 83       	std	Y+5, r25	; 0x05
     e5c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5e:	8e 81       	ldd	r24, Y+6	; 0x06
     e60:	9f 81       	ldd	r25, Y+7	; 0x07
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	9f 83       	std	Y+7, r25	; 0x07
     e66:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	8e 81       	ldd	r24, Y+6	; 0x06
     e6a:	9f 81       	ldd	r25, Y+7	; 0x07
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	69 f7       	brne	.-38     	; 0xe4a <NRF24L01_Send+0x138>
     e70:	24 c0       	rjmp	.+72     	; 0xeba <NRF24L01_Send+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	68 85       	ldd	r22, Y+8	; 0x08
     e74:	79 85       	ldd	r23, Y+9	; 0x09
     e76:	8a 85       	ldd	r24, Y+10	; 0x0a
     e78:	9b 85       	ldd	r25, Y+11	; 0x0b
     e7a:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	9f 83       	std	Y+7, r25	; 0x07
     e84:	8e 83       	std	Y+6, r24	; 0x06
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	9b 83       	std	Y+3, r25	; 0x03
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <NRF24L01_Send+0x180>
     e96:	9b 83       	std	Y+3, r25	; 0x03
     e98:	8a 83       	std	Y+2, r24	; 0x02
     e9a:	0f c0       	rjmp	.+30     	; 0xeba <NRF24L01_Send+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e9c:	69 89       	ldd	r22, Y+17	; 0x11
     e9e:	7a 89       	ldd	r23, Y+18	; 0x12
     ea0:	8b 89       	ldd	r24, Y+19	; 0x13
     ea2:	9c 89       	ldd	r25, Y+20	; 0x14
     ea4:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	88 8b       	std	Y+16, r24	; 0x10
     eae:	88 89       	ldd	r24, Y+16	; 0x10
     eb0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	8a 95       	dec	r24
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <NRF24L01_Send+0x1a2>
     eb8:	89 83       	std	Y+1, r24	; 0x01
//	while(IRQ);
	_delay_us(10);
	status=SPI_Read_Reg(STATUS);	// 读取状态寄存其来判断数据接收状况
     eba:	87 e0       	ldi	r24, 0x07	; 7
     ebc:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_Read_Reg>
     ec0:	89 8f       	std	Y+25, r24	; 0x19
	printf("STATUS=0x%2x\r\n",status);
     ec2:	89 8d       	ldd	r24, Y+25	; 0x19
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	00 d0       	rcall	.+0      	; 0xeca <NRF24L01_Send+0x1b8>
     eca:	00 d0       	rcall	.+0      	; 0xecc <NRF24L01_Send+0x1ba>
     ecc:	ed b7       	in	r30, 0x3d	; 61
     ece:	fe b7       	in	r31, 0x3e	; 62
     ed0:	31 96       	adiw	r30, 0x01	; 1
     ed2:	8e e8       	ldi	r24, 0x8E	; 142
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
     eda:	33 83       	std	Z+3, r19	; 0x03
     edc:	22 83       	std	Z+2, r18	; 0x02
     ede:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <printf>
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
	if(status&TX_DS)	/*tx_ds == 0x20*/
     eea:	89 8d       	ldd	r24, Y+25	; 0x19
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	80 72       	andi	r24, 0x20	; 32
     ef2:	90 70       	andi	r25, 0x00	; 0
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	e9 f0       	breq	.+58     	; 0xf32 <NRF24L01_Send+0x220>
	{
		printf("STATUS=0x%x\r\n",status);
     ef8:	89 8d       	ldd	r24, Y+25	; 0x19
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	00 d0       	rcall	.+0      	; 0xf00 <NRF24L01_Send+0x1ee>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <NRF24L01_Send+0x1f0>
     f02:	ed b7       	in	r30, 0x3d	; 61
     f04:	fe b7       	in	r31, 0x3e	; 62
     f06:	31 96       	adiw	r30, 0x01	; 1
     f08:	8d e9       	ldi	r24, 0x9D	; 157
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
     f10:	33 83       	std	Z+3, r19	; 0x03
     f12:	22 83       	std	Z+2, r18	; 0x02
     f14:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <printf>
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
		printf("XXXXXX!!\r\n");	
     f20:	8b ea       	ldi	r24, 0xAB	; 171
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts>
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x20);      // 清除TX，让IRQ拉低；	
     f28:	87 e2       	ldi	r24, 0x27	; 39
     f2a:	60 e2       	ldi	r22, 0x20	; 32
     f2c:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <NRF24L01_Send+0x23e>
	}
	else if(status&MAX_RT)  /* status = 0x10*/
     f32:	89 8d       	ldd	r24, Y+25	; 0x19
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	80 71       	andi	r24, 0x10	; 16
     f3a:	90 70       	andi	r25, 0x00	; 0
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	41 f0       	breq	.+16     	; 0xf50 <NRF24L01_Send+0x23e>
		{
			printf("Send to achieve maximum number of sending!!\r\n");	
     f40:	85 eb       	ldi	r24, 0xB5	; 181
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <puts>
			SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x10);      // 清除TX，让IRQ拉低；			
     f48:	87 e2       	ldi	r24, 0x27	; 39
     f4a:	60 e1       	ldi	r22, 0x10	; 16
     f4c:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
		}
	CE_1;
     f50:	a2 e3       	ldi	r26, 0x32	; 50
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e2 e3       	ldi	r30, 0x32	; 50
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 68       	ori	r24, 0x80	; 128
     f5c:	8c 93       	st	X, r24
}
     f5e:	69 96       	adiw	r28, 0x19	; 25
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <NRF24L01_Receive>:

void NRF24L01_Receive(void)
{   
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	69 97       	sbiw	r28, 0x19	; 25
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
    uint8_t status=0x01;  
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	89 8f       	std	Y+25, r24	; 0x19
	RX_Mode();
     f88:	0e 94 18 04 	call	0x830	; 0x830 <RX_Mode>
	while(IRQ);
     f8c:	e6 e3       	ldi	r30, 0x36	; 54
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	80 71       	andi	r24, 0x10	; 16
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	b9 f7       	brne	.-18     	; 0xf8c <NRF24L01_Receive+0x1c>
	CE_0;
     f9e:	a2 e3       	ldi	r26, 0x32	; 50
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e2 e3       	ldi	r30, 0x32	; 50
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8f 77       	andi	r24, 0x7F	; 127
     faa:	8c 93       	st	X, r24
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	a0 e2       	ldi	r26, 0x20	; 32
     fb2:	b1 e4       	ldi	r27, 0x41	; 65
     fb4:	8d 8b       	std	Y+21, r24	; 0x15
     fb6:	9e 8b       	std	Y+22, r25	; 0x16
     fb8:	af 8b       	std	Y+23, r26	; 0x17
     fba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fbc:	6d 89       	ldd	r22, Y+21	; 0x15
     fbe:	7e 89       	ldd	r23, Y+22	; 0x16
     fc0:	8f 89       	ldd	r24, Y+23	; 0x17
     fc2:	98 8d       	ldd	r25, Y+24	; 0x18
     fc4:	22 e5       	ldi	r18, 0x52	; 82
     fc6:	39 e4       	ldi	r19, 0x49	; 73
     fc8:	4d e1       	ldi	r20, 0x1D	; 29
     fca:	50 e4       	ldi	r21, 0x40	; 64
     fcc:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	89 8b       	std	Y+17, r24	; 0x11
     fd6:	9a 8b       	std	Y+18, r25	; 0x12
     fd8:	ab 8b       	std	Y+19, r26	; 0x13
     fda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     fdc:	69 89       	ldd	r22, Y+17	; 0x11
     fde:	7a 89       	ldd	r23, Y+18	; 0x12
     fe0:	8b 89       	ldd	r24, Y+19	; 0x13
     fe2:	9c 89       	ldd	r25, Y+20	; 0x14
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5f e3       	ldi	r21, 0x3F	; 63
     fec:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
     ff0:	88 23       	and	r24, r24
     ff2:	1c f4       	brge	.+6      	; 0xffa <NRF24L01_Receive+0x8a>
		__ticks = 1;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	88 8b       	std	Y+16, r24	; 0x10
     ff8:	91 c0       	rjmp	.+290    	; 0x111c <__stack+0x1d>
	else if (__tmp > 255)
     ffa:	69 89       	ldd	r22, Y+17	; 0x11
     ffc:	7a 89       	ldd	r23, Y+18	; 0x12
     ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    1000:	9c 89       	ldd	r25, Y+20	; 0x14
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4f e7       	ldi	r20, 0x7F	; 127
    1008:	53 e4       	ldi	r21, 0x43	; 67
    100a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
    100e:	18 16       	cp	r1, r24
    1010:	0c f0       	brlt	.+2      	; 0x1014 <NRF24L01_Receive+0xa4>
    1012:	7b c0       	rjmp	.+246    	; 0x110a <__stack+0xb>
	{
		_delay_ms(__us / 1000.0);
    1014:	6d 89       	ldd	r22, Y+21	; 0x15
    1016:	7e 89       	ldd	r23, Y+22	; 0x16
    1018:	8f 89       	ldd	r24, Y+23	; 0x17
    101a:	98 8d       	ldd	r25, Y+24	; 0x18
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	4a e7       	ldi	r20, 0x7A	; 122
    1022:	54 e4       	ldi	r21, 0x44	; 68
    1024:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__divsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	8c 87       	std	Y+12, r24	; 0x0c
    102e:	9d 87       	std	Y+13, r25	; 0x0d
    1030:	ae 87       	std	Y+14, r26	; 0x0e
    1032:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1034:	6c 85       	ldd	r22, Y+12	; 0x0c
    1036:	7d 85       	ldd	r23, Y+13	; 0x0d
    1038:	8e 85       	ldd	r24, Y+14	; 0x0e
    103a:	9f 85       	ldd	r25, Y+15	; 0x0f
    103c:	26 e6       	ldi	r18, 0x66	; 102
    103e:	36 e6       	ldi	r19, 0x66	; 102
    1040:	46 ee       	ldi	r20, 0xE6	; 230
    1042:	54 e4       	ldi	r21, 0x44	; 68
    1044:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	88 87       	std	Y+8, r24	; 0x08
    104e:	99 87       	std	Y+9, r25	; 0x09
    1050:	aa 87       	std	Y+10, r26	; 0x0a
    1052:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1054:	68 85       	ldd	r22, Y+8	; 0x08
    1056:	79 85       	ldd	r23, Y+9	; 0x09
    1058:	8a 85       	ldd	r24, Y+10	; 0x0a
    105a:	9b 85       	ldd	r25, Y+11	; 0x0b
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e8       	ldi	r20, 0x80	; 128
    1062:	5f e3       	ldi	r21, 0x3F	; 63
    1064:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__ltsf2>
    1068:	88 23       	and	r24, r24
    106a:	2c f4       	brge	.+10     	; 0x1076 <NRF24L01_Receive+0x106>
		__ticks = 1;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9f 83       	std	Y+7, r25	; 0x07
    1072:	8e 83       	std	Y+6, r24	; 0x06
    1074:	3f c0       	rjmp	.+126    	; 0x10f4 <NRF24L01_Receive+0x184>
	else if (__tmp > 65535)
    1076:	68 85       	ldd	r22, Y+8	; 0x08
    1078:	79 85       	ldd	r23, Y+9	; 0x09
    107a:	8a 85       	ldd	r24, Y+10	; 0x0a
    107c:	9b 85       	ldd	r25, Y+11	; 0x0b
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	3f ef       	ldi	r19, 0xFF	; 255
    1082:	4f e7       	ldi	r20, 0x7F	; 127
    1084:	57 e4       	ldi	r21, 0x47	; 71
    1086:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__gtsf2>
    108a:	18 16       	cp	r1, r24
    108c:	4c f5       	brge	.+82     	; 0x10e0 <NRF24L01_Receive+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1090:	7d 85       	ldd	r23, Y+13	; 0x0d
    1092:	8e 85       	ldd	r24, Y+14	; 0x0e
    1094:	9f 85       	ldd	r25, Y+15	; 0x0f
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e2       	ldi	r20, 0x20	; 32
    109c:	51 e4       	ldi	r21, 0x41	; 65
    109e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	bc 01       	movw	r22, r24
    10a8:	cd 01       	movw	r24, r26
    10aa:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	9f 83       	std	Y+7, r25	; 0x07
    10b4:	8e 83       	std	Y+6, r24	; 0x06
    10b6:	0f c0       	rjmp	.+30     	; 0x10d6 <NRF24L01_Receive+0x166>
    10b8:	88 eb       	ldi	r24, 0xB8	; 184
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	9d 83       	std	Y+5, r25	; 0x05
    10be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <NRF24L01_Receive+0x154>
    10c8:	9d 83       	std	Y+5, r25	; 0x05
    10ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	9f 83       	std	Y+7, r25	; 0x07
    10d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d6:	8e 81       	ldd	r24, Y+6	; 0x06
    10d8:	9f 81       	ldd	r25, Y+7	; 0x07
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	69 f7       	brne	.-38     	; 0x10b8 <NRF24L01_Receive+0x148>
    10de:	24 c0       	rjmp	.+72     	; 0x1128 <__stack+0x29>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e0:	68 85       	ldd	r22, Y+8	; 0x08
    10e2:	79 85       	ldd	r23, Y+9	; 0x09
    10e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e8:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	9f 83       	std	Y+7, r25	; 0x07
    10f2:	8e 83       	std	Y+6, r24	; 0x06
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	9b 83       	std	Y+3, r25	; 0x03
    10fa:	8a 83       	std	Y+2, r24	; 0x02
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	f1 f7       	brne	.-4      	; 0x1100 <__stack+0x1>
    1104:	9b 83       	std	Y+3, r25	; 0x03
    1106:	8a 83       	std	Y+2, r24	; 0x02
    1108:	0f c0       	rjmp	.+30     	; 0x1128 <__stack+0x29>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    110a:	69 89       	ldd	r22, Y+17	; 0x11
    110c:	7a 89       	ldd	r23, Y+18	; 0x12
    110e:	8b 89       	ldd	r24, Y+19	; 0x13
    1110:	9c 89       	ldd	r25, Y+20	; 0x14
    1112:	0e 94 87 09 	call	0x130e	; 0x130e <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	88 8b       	std	Y+16, r24	; 0x10
    111c:	88 89       	ldd	r24, Y+16	; 0x10
    111e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	8a 95       	dec	r24
    1124:	f1 f7       	brne	.-4      	; 0x1122 <__stack+0x23>
    1126:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	status=SPI_Read_Reg(STATUS);					    	// 读取状态寄存其来判断数据接收状况
    1128:	87 e0       	ldi	r24, 0x07	; 7
    112a:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_Read_Reg>
    112e:	89 8f       	std	Y+25, r24	; 0x19
	printf("STATUS=：0x%x\r\n",status);
    1130:	89 8d       	ldd	r24, Y+25	; 0x19
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	00 d0       	rcall	.+0      	; 0x1138 <__stack+0x39>
    1138:	00 d0       	rcall	.+0      	; 0x113a <__stack+0x3b>
    113a:	ed b7       	in	r30, 0x3d	; 61
    113c:	fe b7       	in	r31, 0x3e	; 62
    113e:	31 96       	adiw	r30, 0x01	; 1
    1140:	82 ee       	ldi	r24, 0xE2	; 226
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
    1148:	33 83       	std	Z+3, r19	; 0x03
    114a:	22 83       	std	Z+2, r18	; 0x02
    114c:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <printf>
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
	if(status & 0x40)								        //接受中断标志位
    1158:	89 8d       	ldd	r24, Y+25	; 0x19
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	80 74       	andi	r24, 0x40	; 64
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	01 f1       	breq	.+64     	; 0x11a6 <__stack+0xa7>
	{
		SPI_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);    // read receive payload from RX_FIFO buffer
    1166:	2e e1       	ldi	r18, 0x1E	; 30
    1168:	32 e0       	ldi	r19, 0x02	; 2
    116a:	81 e6       	ldi	r24, 0x61	; 97
    116c:	b9 01       	movw	r22, r18
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPI_Read_Buf>
		SPI_RW_Reg(WRITE_REG_NRF24L01 + STATUS, 0x40);      // 清除TX，让IRQ拉低
    1174:	87 e2       	ldi	r24, 0x27	; 39
    1176:	60 e4       	ldi	r22, 0x40	; 64
    1178:	0e 94 94 00 	call	0x128	; 0x128 <SPI_RW_Reg>
		printf("Receiving data:0x%x\r\n",RX_BUF[0]);	
    117c:	80 91 1e 02 	lds	r24, 0x021E
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	00 d0       	rcall	.+0      	; 0x1186 <__stack+0x87>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <__stack+0x89>
    1188:	ed b7       	in	r30, 0x3d	; 61
    118a:	fe b7       	in	r31, 0x3e	; 62
    118c:	31 96       	adiw	r30, 0x01	; 1
    118e:	82 ef       	ldi	r24, 0xF2	; 242
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
    1196:	33 83       	std	Z+3, r19	; 0x03
    1198:	22 83       	std	Z+2, r18	; 0x02
    119a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <printf>
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
	}  
	CE_1;
    11a6:	a2 e3       	ldi	r26, 0x32	; 50
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e2 e3       	ldi	r30, 0x32	; 50
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	80 68       	ori	r24, 0x80	; 128
    11b2:	8c 93       	st	X, r24

}
    11b4:	69 96       	adiw	r28, 0x19	; 25
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <uart_putchar>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL,_FDEV_SETUP_WRITE); 


//From RS232 sends a byte
static int uart_putchar(char c, FILE *stream)    
{ 
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <uart_putchar+0x6>
    11cc:	0f 92       	push	r0
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	7b 83       	std	Y+3, r23	; 0x03
    11d6:	6a 83       	std	Y+2, r22	; 0x02
  if (c == '\n')        
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	8a 30       	cpi	r24, 0x0A	; 10
    11dc:	31 f4       	brne	.+12     	; 0x11ea <uart_putchar+0x24>
  uart_putchar('\r', stream);      
    11de:	2a 81       	ldd	r18, Y+2	; 0x02
    11e0:	3b 81       	ldd	r19, Y+3	; 0x03
    11e2:	8d e0       	ldi	r24, 0x0D	; 13
    11e4:	b9 01       	movw	r22, r18
    11e6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);      
    11ea:	eb e2       	ldi	r30, 0x2B	; 43
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	80 72       	andi	r24, 0x20	; 32
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	b9 f3       	breq	.-18     	; 0x11ea <uart_putchar+0x24>
  UDR0 = c;      
    11fc:	ec e2       	ldi	r30, 0x2C	; 44
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	80 83       	st	Z, r24
  return 0;    
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
} 
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <putUsart0>:

void putUsart0(unsigned char c)
{ 
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	89 83       	std	Y+1, r24	; 0x01
	while(!(WS_UCSR0A & 0x20));
    1220:	eb e2       	ldi	r30, 0x2B	; 43
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	80 72       	andi	r24, 0x20	; 32
    122c:	90 70       	andi	r25, 0x00	; 0
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	b9 f3       	breq	.-18     	; 0x1220 <putUsart0+0xc>
	WS_UDR0 = c;
    1232:	ec e2       	ldi	r30, 0x2C	; 44
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	80 83       	st	Z, r24
}
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <getUsart0>:
//From receiving a RS232 bytes
unsigned int getUsart0(void)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <getUsart0+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <getUsart0+0x8>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    unsigned char status,res;
	if(!(WS_UCSR0A & 0x80)) return 0xFFFF;        //no data to be received 
    124e:	eb e2       	ldi	r30, 0x2B	; 43
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	88 23       	and	r24, r24
    1256:	2c f0       	brlt	.+10     	; 0x1262 <getUsart0+0x20>
    1258:	2f ef       	ldi	r18, 0xFF	; 255
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	19 c0       	rjmp	.+50     	; 0x1294 <getUsart0+0x52>
    status = WS_UCSR0A;
    1262:	eb e2       	ldi	r30, 0x2B	; 43
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	8a 83       	std	Y+2, r24	; 0x02
    res = WS_UDR0;
    126a:	ec e2       	ldi	r30, 0x2C	; 44
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	89 83       	std	Y+1, r24	; 0x01
    if (status & 0x1c) return 0xFFFF;        // If error, return 0xFFFF 
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	8c 71       	andi	r24, 0x1C	; 28
    127a:	90 70       	andi	r25, 0x00	; 0
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	29 f0       	breq	.+10     	; 0x128a <getUsart0+0x48>
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	9f ef       	ldi	r25, 0xFF	; 255
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <getUsart0+0x52>
    return res;
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3c 83       	std	Y+4, r19	; 0x04
    1292:	2b 83       	std	Y+3, r18	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <waitUsart0>:
//Waiting for receiving a from RS232 effective bytes
unsigned char waitUsart0(void)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <waitUsart0+0x6>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    unsigned int c;
    while((c=getUsart0())==0xFFFF);
    12b0:	0e 94 21 09 	call	0x1242	; 0x1242 <getUsart0>
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	2f ef       	ldi	r18, 0xFF	; 255
    12be:	8f 3f       	cpi	r24, 0xFF	; 255
    12c0:	92 07       	cpc	r25, r18
    12c2:	b1 f3       	breq	.-20     	; 0x12b0 <waitUsart0+0xa>
    return (unsigned char)c;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <usartInit>:



void usartInit(void)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
	// USART0 Receiver: On
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud Rate: 9600
	//
	UCSR0A=0x00;
    12d8:	eb e2       	ldi	r30, 0x2B	; 43
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	10 82       	st	Z, r1
	UCSR0B=0x98;
    12de:	ea e2       	ldi	r30, 0x2A	; 42
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	88 e9       	ldi	r24, 0x98	; 152
    12e4:	80 83       	st	Z, r24
	UCSR0C=0x06;
    12e6:	e5 e9       	ldi	r30, 0x95	; 149
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	86 e0       	ldi	r24, 0x06	; 6
    12ec:	80 83       	st	Z, r24
	UBRR0H=0x00;
    12ee:	e0 e9       	ldi	r30, 0x90	; 144
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	10 82       	st	Z, r1
	UBRR0L=0x2F;
    12f4:	e9 e2       	ldi	r30, 0x29	; 41
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8f e2       	ldi	r24, 0x2F	; 47
    12fa:	80 83       	st	Z, r24
	stdout = &mystdout;       //Must add 
    12fc:	88 e0       	ldi	r24, 0x08	; 8
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	90 93 61 02 	sts	0x0261, r25
    1304:	80 93 60 02 	sts	0x0260, r24
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <__fixunssfsi>:
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	7b 01       	movw	r14, r22
    1318:	8c 01       	movw	r16, r24
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	5f e4       	ldi	r21, 0x4F	; 79
    1322:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__gesf2>
    1326:	88 23       	and	r24, r24
    1328:	8c f0       	brlt	.+34     	; 0x134c <__fixunssfsi+0x3e>
    132a:	c8 01       	movw	r24, r16
    132c:	b7 01       	movw	r22, r14
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	5f e4       	ldi	r21, 0x4F	; 79
    1336:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__subsf3>
    133a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
    133e:	9b 01       	movw	r18, r22
    1340:	ac 01       	movw	r20, r24
    1342:	20 50       	subi	r18, 0x00	; 0
    1344:	30 40       	sbci	r19, 0x00	; 0
    1346:	40 40       	sbci	r20, 0x00	; 0
    1348:	50 48       	sbci	r21, 0x80	; 128
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <__fixunssfsi+0x4a>
    134c:	c8 01       	movw	r24, r16
    134e:	b7 01       	movw	r22, r14
    1350:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__fixsfsi>
    1354:	9b 01       	movw	r18, r22
    1356:	ac 01       	movw	r20, r24
    1358:	b9 01       	movw	r22, r18
    135a:	ca 01       	movw	r24, r20
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	08 95       	ret

00001366 <_fpadd_parts>:
    1366:	a0 e0       	ldi	r26, 0x00	; 0
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e9 eb       	ldi	r30, 0xB9	; 185
    136c:	f9 e0       	ldi	r31, 0x09	; 9
    136e:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__prologue_saves__>
    1372:	dc 01       	movw	r26, r24
    1374:	2b 01       	movw	r4, r22
    1376:	fa 01       	movw	r30, r20
    1378:	9c 91       	ld	r25, X
    137a:	92 30       	cpi	r25, 0x02	; 2
    137c:	08 f4       	brcc	.+2      	; 0x1380 <_fpadd_parts+0x1a>
    137e:	39 c1       	rjmp	.+626    	; 0x15f2 <_fpadd_parts+0x28c>
    1380:	eb 01       	movw	r28, r22
    1382:	88 81       	ld	r24, Y
    1384:	82 30       	cpi	r24, 0x02	; 2
    1386:	08 f4       	brcc	.+2      	; 0x138a <_fpadd_parts+0x24>
    1388:	33 c1       	rjmp	.+614    	; 0x15f0 <_fpadd_parts+0x28a>
    138a:	94 30       	cpi	r25, 0x04	; 4
    138c:	69 f4       	brne	.+26     	; 0x13a8 <_fpadd_parts+0x42>
    138e:	84 30       	cpi	r24, 0x04	; 4
    1390:	09 f0       	breq	.+2      	; 0x1394 <_fpadd_parts+0x2e>
    1392:	2f c1       	rjmp	.+606    	; 0x15f2 <_fpadd_parts+0x28c>
    1394:	11 96       	adiw	r26, 0x01	; 1
    1396:	9c 91       	ld	r25, X
    1398:	11 97       	sbiw	r26, 0x01	; 1
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	98 17       	cp	r25, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <_fpadd_parts+0x3c>
    13a0:	28 c1       	rjmp	.+592    	; 0x15f2 <_fpadd_parts+0x28c>
    13a2:	a6 e1       	ldi	r26, 0x16	; 22
    13a4:	b2 e0       	ldi	r27, 0x02	; 2
    13a6:	25 c1       	rjmp	.+586    	; 0x15f2 <_fpadd_parts+0x28c>
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	09 f4       	brne	.+2      	; 0x13ae <_fpadd_parts+0x48>
    13ac:	21 c1       	rjmp	.+578    	; 0x15f0 <_fpadd_parts+0x28a>
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	a9 f4       	brne	.+42     	; 0x13dc <_fpadd_parts+0x76>
    13b2:	92 30       	cpi	r25, 0x02	; 2
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <_fpadd_parts+0x52>
    13b6:	1d c1       	rjmp	.+570    	; 0x15f2 <_fpadd_parts+0x28c>
    13b8:	9a 01       	movw	r18, r20
    13ba:	ad 01       	movw	r20, r26
    13bc:	88 e0       	ldi	r24, 0x08	; 8
    13be:	ea 01       	movw	r28, r20
    13c0:	09 90       	ld	r0, Y+
    13c2:	ae 01       	movw	r20, r28
    13c4:	e9 01       	movw	r28, r18
    13c6:	09 92       	st	Y+, r0
    13c8:	9e 01       	movw	r18, r28
    13ca:	81 50       	subi	r24, 0x01	; 1
    13cc:	c1 f7       	brne	.-16     	; 0x13be <_fpadd_parts+0x58>
    13ce:	e2 01       	movw	r28, r4
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	11 96       	adiw	r26, 0x01	; 1
    13d4:	9c 91       	ld	r25, X
    13d6:	89 23       	and	r24, r25
    13d8:	81 83       	std	Z+1, r24	; 0x01
    13da:	08 c1       	rjmp	.+528    	; 0x15ec <_fpadd_parts+0x286>
    13dc:	92 30       	cpi	r25, 0x02	; 2
    13de:	09 f4       	brne	.+2      	; 0x13e2 <_fpadd_parts+0x7c>
    13e0:	07 c1       	rjmp	.+526    	; 0x15f0 <_fpadd_parts+0x28a>
    13e2:	12 96       	adiw	r26, 0x02	; 2
    13e4:	2d 90       	ld	r2, X+
    13e6:	3c 90       	ld	r3, X
    13e8:	13 97       	sbiw	r26, 0x03	; 3
    13ea:	eb 01       	movw	r28, r22
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	14 96       	adiw	r26, 0x04	; 4
    13f2:	ad 90       	ld	r10, X+
    13f4:	bd 90       	ld	r11, X+
    13f6:	cd 90       	ld	r12, X+
    13f8:	dc 90       	ld	r13, X
    13fa:	17 97       	sbiw	r26, 0x07	; 7
    13fc:	ec 80       	ldd	r14, Y+4	; 0x04
    13fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1400:	0e 81       	ldd	r16, Y+6	; 0x06
    1402:	1f 81       	ldd	r17, Y+7	; 0x07
    1404:	91 01       	movw	r18, r2
    1406:	28 1b       	sub	r18, r24
    1408:	39 0b       	sbc	r19, r25
    140a:	b9 01       	movw	r22, r18
    140c:	37 ff       	sbrs	r19, 7
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <_fpadd_parts+0xb2>
    1410:	66 27       	eor	r22, r22
    1412:	77 27       	eor	r23, r23
    1414:	62 1b       	sub	r22, r18
    1416:	73 0b       	sbc	r23, r19
    1418:	60 32       	cpi	r22, 0x20	; 32
    141a:	71 05       	cpc	r23, r1
    141c:	0c f0       	brlt	.+2      	; 0x1420 <_fpadd_parts+0xba>
    141e:	61 c0       	rjmp	.+194    	; 0x14e2 <_fpadd_parts+0x17c>
    1420:	12 16       	cp	r1, r18
    1422:	13 06       	cpc	r1, r19
    1424:	6c f5       	brge	.+90     	; 0x1480 <_fpadd_parts+0x11a>
    1426:	37 01       	movw	r6, r14
    1428:	48 01       	movw	r8, r16
    142a:	06 2e       	mov	r0, r22
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <_fpadd_parts+0xd0>
    142e:	96 94       	lsr	r9
    1430:	87 94       	ror	r8
    1432:	77 94       	ror	r7
    1434:	67 94       	ror	r6
    1436:	0a 94       	dec	r0
    1438:	d2 f7       	brpl	.-12     	; 0x142e <_fpadd_parts+0xc8>
    143a:	21 e0       	ldi	r18, 0x01	; 1
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	04 c0       	rjmp	.+8      	; 0x144c <_fpadd_parts+0xe6>
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	44 1f       	adc	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	6a 95       	dec	r22
    144e:	d2 f7       	brpl	.-12     	; 0x1444 <_fpadd_parts+0xde>
    1450:	21 50       	subi	r18, 0x01	; 1
    1452:	30 40       	sbci	r19, 0x00	; 0
    1454:	40 40       	sbci	r20, 0x00	; 0
    1456:	50 40       	sbci	r21, 0x00	; 0
    1458:	2e 21       	and	r18, r14
    145a:	3f 21       	and	r19, r15
    145c:	40 23       	and	r20, r16
    145e:	51 23       	and	r21, r17
    1460:	21 15       	cp	r18, r1
    1462:	31 05       	cpc	r19, r1
    1464:	41 05       	cpc	r20, r1
    1466:	51 05       	cpc	r21, r1
    1468:	21 f0       	breq	.+8      	; 0x1472 <_fpadd_parts+0x10c>
    146a:	21 e0       	ldi	r18, 0x01	; 1
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	79 01       	movw	r14, r18
    1474:	8a 01       	movw	r16, r20
    1476:	e6 28       	or	r14, r6
    1478:	f7 28       	or	r15, r7
    147a:	08 29       	or	r16, r8
    147c:	19 29       	or	r17, r9
    147e:	3c c0       	rjmp	.+120    	; 0x14f8 <_fpadd_parts+0x192>
    1480:	23 2b       	or	r18, r19
    1482:	d1 f1       	breq	.+116    	; 0x14f8 <_fpadd_parts+0x192>
    1484:	26 0e       	add	r2, r22
    1486:	37 1e       	adc	r3, r23
    1488:	35 01       	movw	r6, r10
    148a:	46 01       	movw	r8, r12
    148c:	06 2e       	mov	r0, r22
    148e:	04 c0       	rjmp	.+8      	; 0x1498 <_fpadd_parts+0x132>
    1490:	96 94       	lsr	r9
    1492:	87 94       	ror	r8
    1494:	77 94       	ror	r7
    1496:	67 94       	ror	r6
    1498:	0a 94       	dec	r0
    149a:	d2 f7       	brpl	.-12     	; 0x1490 <_fpadd_parts+0x12a>
    149c:	21 e0       	ldi	r18, 0x01	; 1
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <_fpadd_parts+0x148>
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	44 1f       	adc	r20, r20
    14ac:	55 1f       	adc	r21, r21
    14ae:	6a 95       	dec	r22
    14b0:	d2 f7       	brpl	.-12     	; 0x14a6 <_fpadd_parts+0x140>
    14b2:	21 50       	subi	r18, 0x01	; 1
    14b4:	30 40       	sbci	r19, 0x00	; 0
    14b6:	40 40       	sbci	r20, 0x00	; 0
    14b8:	50 40       	sbci	r21, 0x00	; 0
    14ba:	2a 21       	and	r18, r10
    14bc:	3b 21       	and	r19, r11
    14be:	4c 21       	and	r20, r12
    14c0:	5d 21       	and	r21, r13
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	41 05       	cpc	r20, r1
    14c8:	51 05       	cpc	r21, r1
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <_fpadd_parts+0x16e>
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	59 01       	movw	r10, r18
    14d6:	6a 01       	movw	r12, r20
    14d8:	a6 28       	or	r10, r6
    14da:	b7 28       	or	r11, r7
    14dc:	c8 28       	or	r12, r8
    14de:	d9 28       	or	r13, r9
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <_fpadd_parts+0x192>
    14e2:	82 15       	cp	r24, r2
    14e4:	93 05       	cpc	r25, r3
    14e6:	2c f0       	brlt	.+10     	; 0x14f2 <_fpadd_parts+0x18c>
    14e8:	1c 01       	movw	r2, r24
    14ea:	aa 24       	eor	r10, r10
    14ec:	bb 24       	eor	r11, r11
    14ee:	65 01       	movw	r12, r10
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <_fpadd_parts+0x192>
    14f2:	ee 24       	eor	r14, r14
    14f4:	ff 24       	eor	r15, r15
    14f6:	87 01       	movw	r16, r14
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	9c 91       	ld	r25, X
    14fc:	d2 01       	movw	r26, r4
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	8c 91       	ld	r24, X
    1502:	98 17       	cp	r25, r24
    1504:	09 f4       	brne	.+2      	; 0x1508 <_fpadd_parts+0x1a2>
    1506:	45 c0       	rjmp	.+138    	; 0x1592 <_fpadd_parts+0x22c>
    1508:	99 23       	and	r25, r25
    150a:	39 f0       	breq	.+14     	; 0x151a <_fpadd_parts+0x1b4>
    150c:	a8 01       	movw	r20, r16
    150e:	97 01       	movw	r18, r14
    1510:	2a 19       	sub	r18, r10
    1512:	3b 09       	sbc	r19, r11
    1514:	4c 09       	sbc	r20, r12
    1516:	5d 09       	sbc	r21, r13
    1518:	06 c0       	rjmp	.+12     	; 0x1526 <_fpadd_parts+0x1c0>
    151a:	a6 01       	movw	r20, r12
    151c:	95 01       	movw	r18, r10
    151e:	2e 19       	sub	r18, r14
    1520:	3f 09       	sbc	r19, r15
    1522:	40 0b       	sbc	r20, r16
    1524:	51 0b       	sbc	r21, r17
    1526:	57 fd       	sbrc	r21, 7
    1528:	08 c0       	rjmp	.+16     	; 0x153a <_fpadd_parts+0x1d4>
    152a:	11 82       	std	Z+1, r1	; 0x01
    152c:	33 82       	std	Z+3, r3	; 0x03
    152e:	22 82       	std	Z+2, r2	; 0x02
    1530:	24 83       	std	Z+4, r18	; 0x04
    1532:	35 83       	std	Z+5, r19	; 0x05
    1534:	46 83       	std	Z+6, r20	; 0x06
    1536:	57 83       	std	Z+7, r21	; 0x07
    1538:	1d c0       	rjmp	.+58     	; 0x1574 <_fpadd_parts+0x20e>
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	81 83       	std	Z+1, r24	; 0x01
    153e:	33 82       	std	Z+3, r3	; 0x03
    1540:	22 82       	std	Z+2, r2	; 0x02
    1542:	88 27       	eor	r24, r24
    1544:	99 27       	eor	r25, r25
    1546:	dc 01       	movw	r26, r24
    1548:	82 1b       	sub	r24, r18
    154a:	93 0b       	sbc	r25, r19
    154c:	a4 0b       	sbc	r26, r20
    154e:	b5 0b       	sbc	r27, r21
    1550:	84 83       	std	Z+4, r24	; 0x04
    1552:	95 83       	std	Z+5, r25	; 0x05
    1554:	a6 83       	std	Z+6, r26	; 0x06
    1556:	b7 83       	std	Z+7, r27	; 0x07
    1558:	0d c0       	rjmp	.+26     	; 0x1574 <_fpadd_parts+0x20e>
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	44 1f       	adc	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	24 83       	std	Z+4, r18	; 0x04
    1564:	35 83       	std	Z+5, r19	; 0x05
    1566:	46 83       	std	Z+6, r20	; 0x06
    1568:	57 83       	std	Z+7, r21	; 0x07
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	93 83       	std	Z+3, r25	; 0x03
    1572:	82 83       	std	Z+2, r24	; 0x02
    1574:	24 81       	ldd	r18, Z+4	; 0x04
    1576:	35 81       	ldd	r19, Z+5	; 0x05
    1578:	46 81       	ldd	r20, Z+6	; 0x06
    157a:	57 81       	ldd	r21, Z+7	; 0x07
    157c:	da 01       	movw	r26, r20
    157e:	c9 01       	movw	r24, r18
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	a1 09       	sbc	r26, r1
    1584:	b1 09       	sbc	r27, r1
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	af 4f       	sbci	r26, 0xFF	; 255
    158c:	bf 43       	sbci	r27, 0x3F	; 63
    158e:	28 f3       	brcs	.-54     	; 0x155a <_fpadd_parts+0x1f4>
    1590:	0b c0       	rjmp	.+22     	; 0x15a8 <_fpadd_parts+0x242>
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	33 82       	std	Z+3, r3	; 0x03
    1596:	22 82       	std	Z+2, r2	; 0x02
    1598:	ea 0c       	add	r14, r10
    159a:	fb 1c       	adc	r15, r11
    159c:	0c 1d       	adc	r16, r12
    159e:	1d 1d       	adc	r17, r13
    15a0:	e4 82       	std	Z+4, r14	; 0x04
    15a2:	f5 82       	std	Z+5, r15	; 0x05
    15a4:	06 83       	std	Z+6, r16	; 0x06
    15a6:	17 83       	std	Z+7, r17	; 0x07
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	80 83       	st	Z, r24
    15ac:	24 81       	ldd	r18, Z+4	; 0x04
    15ae:	35 81       	ldd	r19, Z+5	; 0x05
    15b0:	46 81       	ldd	r20, Z+6	; 0x06
    15b2:	57 81       	ldd	r21, Z+7	; 0x07
    15b4:	57 ff       	sbrs	r21, 7
    15b6:	1a c0       	rjmp	.+52     	; 0x15ec <_fpadd_parts+0x286>
    15b8:	c9 01       	movw	r24, r18
    15ba:	aa 27       	eor	r26, r26
    15bc:	97 fd       	sbrc	r25, 7
    15be:	a0 95       	com	r26
    15c0:	ba 2f       	mov	r27, r26
    15c2:	81 70       	andi	r24, 0x01	; 1
    15c4:	90 70       	andi	r25, 0x00	; 0
    15c6:	a0 70       	andi	r26, 0x00	; 0
    15c8:	b0 70       	andi	r27, 0x00	; 0
    15ca:	56 95       	lsr	r21
    15cc:	47 95       	ror	r20
    15ce:	37 95       	ror	r19
    15d0:	27 95       	ror	r18
    15d2:	82 2b       	or	r24, r18
    15d4:	93 2b       	or	r25, r19
    15d6:	a4 2b       	or	r26, r20
    15d8:	b5 2b       	or	r27, r21
    15da:	84 83       	std	Z+4, r24	; 0x04
    15dc:	95 83       	std	Z+5, r25	; 0x05
    15de:	a6 83       	std	Z+6, r26	; 0x06
    15e0:	b7 83       	std	Z+7, r27	; 0x07
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	93 83       	std	Z+3, r25	; 0x03
    15ea:	82 83       	std	Z+2, r24	; 0x02
    15ec:	df 01       	movw	r26, r30
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <_fpadd_parts+0x28c>
    15f0:	d2 01       	movw	r26, r4
    15f2:	cd 01       	movw	r24, r26
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	e2 e1       	ldi	r30, 0x12	; 18
    15fa:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__epilogue_restores__>

000015fe <__subsf3>:
    15fe:	a0 e2       	ldi	r26, 0x20	; 32
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e0       	ldi	r30, 0x05	; 5
    1604:	fb e0       	ldi	r31, 0x0B	; 11
    1606:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__+0x18>
    160a:	69 83       	std	Y+1, r22	; 0x01
    160c:	7a 83       	std	Y+2, r23	; 0x02
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	2d 83       	std	Y+5, r18	; 0x05
    1614:	3e 83       	std	Y+6, r19	; 0x06
    1616:	4f 83       	std	Y+7, r20	; 0x07
    1618:	58 87       	std	Y+8, r21	; 0x08
    161a:	e9 e0       	ldi	r30, 0x09	; 9
    161c:	ee 2e       	mov	r14, r30
    161e:	f1 2c       	mov	r15, r1
    1620:	ec 0e       	add	r14, r28
    1622:	fd 1e       	adc	r15, r29
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	b7 01       	movw	r22, r14
    162a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    162e:	8e 01       	movw	r16, r28
    1630:	0f 5e       	subi	r16, 0xEF	; 239
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	ce 01       	movw	r24, r28
    1636:	05 96       	adiw	r24, 0x05	; 5
    1638:	b8 01       	movw	r22, r16
    163a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    163e:	8a 89       	ldd	r24, Y+18	; 0x12
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	89 27       	eor	r24, r25
    1644:	8a 8b       	std	Y+18, r24	; 0x12
    1646:	c7 01       	movw	r24, r14
    1648:	b8 01       	movw	r22, r16
    164a:	ae 01       	movw	r20, r28
    164c:	47 5e       	subi	r20, 0xE7	; 231
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	0e 94 b3 09 	call	0x1366	; 0x1366 <_fpadd_parts>
    1654:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__pack_f>
    1658:	a0 96       	adiw	r28, 0x20	; 32
    165a:	e6 e0       	ldi	r30, 0x06	; 6
    165c:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__+0x18>

00001660 <__addsf3>:
    1660:	a0 e2       	ldi	r26, 0x20	; 32
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e6 e3       	ldi	r30, 0x36	; 54
    1666:	fb e0       	ldi	r31, 0x0B	; 11
    1668:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__+0x18>
    166c:	69 83       	std	Y+1, r22	; 0x01
    166e:	7a 83       	std	Y+2, r23	; 0x02
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	2d 83       	std	Y+5, r18	; 0x05
    1676:	3e 83       	std	Y+6, r19	; 0x06
    1678:	4f 83       	std	Y+7, r20	; 0x07
    167a:	58 87       	std	Y+8, r21	; 0x08
    167c:	f9 e0       	ldi	r31, 0x09	; 9
    167e:	ef 2e       	mov	r14, r31
    1680:	f1 2c       	mov	r15, r1
    1682:	ec 0e       	add	r14, r28
    1684:	fd 1e       	adc	r15, r29
    1686:	ce 01       	movw	r24, r28
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	b7 01       	movw	r22, r14
    168c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    1690:	8e 01       	movw	r16, r28
    1692:	0f 5e       	subi	r16, 0xEF	; 239
    1694:	1f 4f       	sbci	r17, 0xFF	; 255
    1696:	ce 01       	movw	r24, r28
    1698:	05 96       	adiw	r24, 0x05	; 5
    169a:	b8 01       	movw	r22, r16
    169c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    16a0:	c7 01       	movw	r24, r14
    16a2:	b8 01       	movw	r22, r16
    16a4:	ae 01       	movw	r20, r28
    16a6:	47 5e       	subi	r20, 0xE7	; 231
    16a8:	5f 4f       	sbci	r21, 0xFF	; 255
    16aa:	0e 94 b3 09 	call	0x1366	; 0x1366 <_fpadd_parts>
    16ae:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__pack_f>
    16b2:	a0 96       	adiw	r28, 0x20	; 32
    16b4:	e6 e0       	ldi	r30, 0x06	; 6
    16b6:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__+0x18>

000016ba <__mulsf3>:
    16ba:	a0 e2       	ldi	r26, 0x20	; 32
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e3 e6       	ldi	r30, 0x63	; 99
    16c0:	fb e0       	ldi	r31, 0x0B	; 11
    16c2:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <__prologue_saves__>
    16c6:	69 83       	std	Y+1, r22	; 0x01
    16c8:	7a 83       	std	Y+2, r23	; 0x02
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	2d 83       	std	Y+5, r18	; 0x05
    16d0:	3e 83       	std	Y+6, r19	; 0x06
    16d2:	4f 83       	std	Y+7, r20	; 0x07
    16d4:	58 87       	std	Y+8, r21	; 0x08
    16d6:	ce 01       	movw	r24, r28
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	be 01       	movw	r22, r28
    16dc:	67 5f       	subi	r22, 0xF7	; 247
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    16e4:	ce 01       	movw	r24, r28
    16e6:	05 96       	adiw	r24, 0x05	; 5
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5e       	subi	r22, 0xEF	; 239
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    16f2:	99 85       	ldd	r25, Y+9	; 0x09
    16f4:	92 30       	cpi	r25, 0x02	; 2
    16f6:	88 f0       	brcs	.+34     	; 0x171a <__mulsf3+0x60>
    16f8:	89 89       	ldd	r24, Y+17	; 0x11
    16fa:	82 30       	cpi	r24, 0x02	; 2
    16fc:	c8 f0       	brcs	.+50     	; 0x1730 <__mulsf3+0x76>
    16fe:	94 30       	cpi	r25, 0x04	; 4
    1700:	19 f4       	brne	.+6      	; 0x1708 <__mulsf3+0x4e>
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	51 f4       	brne	.+20     	; 0x171a <__mulsf3+0x60>
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <__mulsf3+0x56>
    1708:	84 30       	cpi	r24, 0x04	; 4
    170a:	29 f4       	brne	.+10     	; 0x1716 <__mulsf3+0x5c>
    170c:	92 30       	cpi	r25, 0x02	; 2
    170e:	81 f4       	brne	.+32     	; 0x1730 <__mulsf3+0x76>
    1710:	86 e1       	ldi	r24, 0x16	; 22
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	c6 c0       	rjmp	.+396    	; 0x18a2 <__mulsf3+0x1e8>
    1716:	92 30       	cpi	r25, 0x02	; 2
    1718:	49 f4       	brne	.+18     	; 0x172c <__mulsf3+0x72>
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	9a 85       	ldd	r25, Y+10	; 0x0a
    171e:	8a 89       	ldd	r24, Y+18	; 0x12
    1720:	98 13       	cpse	r25, r24
    1722:	21 e0       	ldi	r18, 0x01	; 1
    1724:	2a 87       	std	Y+10, r18	; 0x0a
    1726:	ce 01       	movw	r24, r28
    1728:	09 96       	adiw	r24, 0x09	; 9
    172a:	bb c0       	rjmp	.+374    	; 0x18a2 <__mulsf3+0x1e8>
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	49 f4       	brne	.+18     	; 0x1742 <__mulsf3+0x88>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	8a 89       	ldd	r24, Y+18	; 0x12
    1736:	98 13       	cpse	r25, r24
    1738:	21 e0       	ldi	r18, 0x01	; 1
    173a:	2a 8b       	std	Y+18, r18	; 0x12
    173c:	ce 01       	movw	r24, r28
    173e:	41 96       	adiw	r24, 0x11	; 17
    1740:	b0 c0       	rjmp	.+352    	; 0x18a2 <__mulsf3+0x1e8>
    1742:	2d 84       	ldd	r2, Y+13	; 0x0d
    1744:	3e 84       	ldd	r3, Y+14	; 0x0e
    1746:	4f 84       	ldd	r4, Y+15	; 0x0f
    1748:	58 88       	ldd	r5, Y+16	; 0x10
    174a:	6d 88       	ldd	r6, Y+21	; 0x15
    174c:	7e 88       	ldd	r7, Y+22	; 0x16
    174e:	8f 88       	ldd	r8, Y+23	; 0x17
    1750:	98 8c       	ldd	r9, Y+24	; 0x18
    1752:	ee 24       	eor	r14, r14
    1754:	ff 24       	eor	r15, r15
    1756:	87 01       	movw	r16, r14
    1758:	aa 24       	eor	r10, r10
    175a:	bb 24       	eor	r11, r11
    175c:	65 01       	movw	r12, r10
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	e0 e0       	ldi	r30, 0x00	; 0
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	c1 01       	movw	r24, r2
    176c:	81 70       	andi	r24, 0x01	; 1
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	89 2b       	or	r24, r25
    1772:	e9 f0       	breq	.+58     	; 0x17ae <__mulsf3+0xf4>
    1774:	e6 0c       	add	r14, r6
    1776:	f7 1c       	adc	r15, r7
    1778:	08 1d       	adc	r16, r8
    177a:	19 1d       	adc	r17, r9
    177c:	9a 01       	movw	r18, r20
    177e:	ab 01       	movw	r20, r22
    1780:	2a 0d       	add	r18, r10
    1782:	3b 1d       	adc	r19, r11
    1784:	4c 1d       	adc	r20, r12
    1786:	5d 1d       	adc	r21, r13
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e6 14       	cp	r14, r6
    1792:	f7 04       	cpc	r15, r7
    1794:	08 05       	cpc	r16, r8
    1796:	19 05       	cpc	r17, r9
    1798:	20 f4       	brcc	.+8      	; 0x17a2 <__mulsf3+0xe8>
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e0       	ldi	r26, 0x00	; 0
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	ba 01       	movw	r22, r20
    17a4:	a9 01       	movw	r20, r18
    17a6:	48 0f       	add	r20, r24
    17a8:	59 1f       	adc	r21, r25
    17aa:	6a 1f       	adc	r22, r26
    17ac:	7b 1f       	adc	r23, r27
    17ae:	aa 0c       	add	r10, r10
    17b0:	bb 1c       	adc	r11, r11
    17b2:	cc 1c       	adc	r12, r12
    17b4:	dd 1c       	adc	r13, r13
    17b6:	97 fe       	sbrs	r9, 7
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <__mulsf3+0x110>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e0       	ldi	r26, 0x00	; 0
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	a8 2a       	or	r10, r24
    17c4:	b9 2a       	or	r11, r25
    17c6:	ca 2a       	or	r12, r26
    17c8:	db 2a       	or	r13, r27
    17ca:	31 96       	adiw	r30, 0x01	; 1
    17cc:	e0 32       	cpi	r30, 0x20	; 32
    17ce:	f1 05       	cpc	r31, r1
    17d0:	49 f0       	breq	.+18     	; 0x17e4 <__mulsf3+0x12a>
    17d2:	66 0c       	add	r6, r6
    17d4:	77 1c       	adc	r7, r7
    17d6:	88 1c       	adc	r8, r8
    17d8:	99 1c       	adc	r9, r9
    17da:	56 94       	lsr	r5
    17dc:	47 94       	ror	r4
    17de:	37 94       	ror	r3
    17e0:	27 94       	ror	r2
    17e2:	c3 cf       	rjmp	.-122    	; 0x176a <__mulsf3+0xb0>
    17e4:	fa 85       	ldd	r31, Y+10	; 0x0a
    17e6:	ea 89       	ldd	r30, Y+18	; 0x12
    17e8:	2b 89       	ldd	r18, Y+19	; 0x13
    17ea:	3c 89       	ldd	r19, Y+20	; 0x14
    17ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f0:	28 0f       	add	r18, r24
    17f2:	39 1f       	adc	r19, r25
    17f4:	2e 5f       	subi	r18, 0xFE	; 254
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	17 c0       	rjmp	.+46     	; 0x1828 <__mulsf3+0x16e>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	89 2b       	or	r24, r25
    1802:	61 f0       	breq	.+24     	; 0x181c <__mulsf3+0x162>
    1804:	16 95       	lsr	r17
    1806:	07 95       	ror	r16
    1808:	f7 94       	ror	r15
    180a:	e7 94       	ror	r14
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e8       	ldi	r27, 0x80	; 128
    1814:	e8 2a       	or	r14, r24
    1816:	f9 2a       	or	r15, r25
    1818:	0a 2b       	or	r16, r26
    181a:	1b 2b       	or	r17, r27
    181c:	76 95       	lsr	r23
    181e:	67 95       	ror	r22
    1820:	57 95       	ror	r21
    1822:	47 95       	ror	r20
    1824:	2f 5f       	subi	r18, 0xFF	; 255
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	77 fd       	sbrc	r23, 7
    182a:	e7 cf       	rjmp	.-50     	; 0x17fa <__mulsf3+0x140>
    182c:	0c c0       	rjmp	.+24     	; 0x1846 <__mulsf3+0x18c>
    182e:	44 0f       	add	r20, r20
    1830:	55 1f       	adc	r21, r21
    1832:	66 1f       	adc	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	17 fd       	sbrc	r17, 7
    1838:	41 60       	ori	r20, 0x01	; 1
    183a:	ee 0c       	add	r14, r14
    183c:	ff 1c       	adc	r15, r15
    183e:	00 1f       	adc	r16, r16
    1840:	11 1f       	adc	r17, r17
    1842:	21 50       	subi	r18, 0x01	; 1
    1844:	30 40       	sbci	r19, 0x00	; 0
    1846:	40 30       	cpi	r20, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	59 07       	cpc	r21, r25
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	69 07       	cpc	r22, r25
    1850:	90 e4       	ldi	r25, 0x40	; 64
    1852:	79 07       	cpc	r23, r25
    1854:	60 f3       	brcs	.-40     	; 0x182e <__mulsf3+0x174>
    1856:	2b 8f       	std	Y+27, r18	; 0x1b
    1858:	3c 8f       	std	Y+28, r19	; 0x1c
    185a:	db 01       	movw	r26, r22
    185c:	ca 01       	movw	r24, r20
    185e:	8f 77       	andi	r24, 0x7F	; 127
    1860:	90 70       	andi	r25, 0x00	; 0
    1862:	a0 70       	andi	r26, 0x00	; 0
    1864:	b0 70       	andi	r27, 0x00	; 0
    1866:	80 34       	cpi	r24, 0x40	; 64
    1868:	91 05       	cpc	r25, r1
    186a:	a1 05       	cpc	r26, r1
    186c:	b1 05       	cpc	r27, r1
    186e:	61 f4       	brne	.+24     	; 0x1888 <__mulsf3+0x1ce>
    1870:	47 fd       	sbrc	r20, 7
    1872:	0a c0       	rjmp	.+20     	; 0x1888 <__mulsf3+0x1ce>
    1874:	e1 14       	cp	r14, r1
    1876:	f1 04       	cpc	r15, r1
    1878:	01 05       	cpc	r16, r1
    187a:	11 05       	cpc	r17, r1
    187c:	29 f0       	breq	.+10     	; 0x1888 <__mulsf3+0x1ce>
    187e:	40 5c       	subi	r20, 0xC0	; 192
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	6f 4f       	sbci	r22, 0xFF	; 255
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	40 78       	andi	r20, 0x80	; 128
    1888:	1a 8e       	std	Y+26, r1	; 0x1a
    188a:	fe 17       	cp	r31, r30
    188c:	11 f0       	breq	.+4      	; 0x1892 <__mulsf3+0x1d8>
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	8a 8f       	std	Y+26, r24	; 0x1a
    1892:	4d 8f       	std	Y+29, r20	; 0x1d
    1894:	5e 8f       	std	Y+30, r21	; 0x1e
    1896:	6f 8f       	std	Y+31, r22	; 0x1f
    1898:	78 a3       	std	Y+32, r23	; 0x20
    189a:	83 e0       	ldi	r24, 0x03	; 3
    189c:	89 8f       	std	Y+25, r24	; 0x19
    189e:	ce 01       	movw	r24, r28
    18a0:	49 96       	adiw	r24, 0x19	; 25
    18a2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__pack_f>
    18a6:	a0 96       	adiw	r28, 0x20	; 32
    18a8:	e2 e1       	ldi	r30, 0x12	; 18
    18aa:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__epilogue_restores__>

000018ae <__divsf3>:
    18ae:	a8 e1       	ldi	r26, 0x18	; 24
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ed e5       	ldi	r30, 0x5D	; 93
    18b4:	fc e0       	ldi	r31, 0x0C	; 12
    18b6:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__prologue_saves__+0x10>
    18ba:	69 83       	std	Y+1, r22	; 0x01
    18bc:	7a 83       	std	Y+2, r23	; 0x02
    18be:	8b 83       	std	Y+3, r24	; 0x03
    18c0:	9c 83       	std	Y+4, r25	; 0x04
    18c2:	2d 83       	std	Y+5, r18	; 0x05
    18c4:	3e 83       	std	Y+6, r19	; 0x06
    18c6:	4f 83       	std	Y+7, r20	; 0x07
    18c8:	58 87       	std	Y+8, r21	; 0x08
    18ca:	b9 e0       	ldi	r27, 0x09	; 9
    18cc:	eb 2e       	mov	r14, r27
    18ce:	f1 2c       	mov	r15, r1
    18d0:	ec 0e       	add	r14, r28
    18d2:	fd 1e       	adc	r15, r29
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	b7 01       	movw	r22, r14
    18da:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    18de:	8e 01       	movw	r16, r28
    18e0:	0f 5e       	subi	r16, 0xEF	; 239
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	ce 01       	movw	r24, r28
    18e6:	05 96       	adiw	r24, 0x05	; 5
    18e8:	b8 01       	movw	r22, r16
    18ea:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    18ee:	29 85       	ldd	r18, Y+9	; 0x09
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	08 f4       	brcc	.+2      	; 0x18f6 <__divsf3+0x48>
    18f4:	7e c0       	rjmp	.+252    	; 0x19f2 <__divsf3+0x144>
    18f6:	39 89       	ldd	r19, Y+17	; 0x11
    18f8:	32 30       	cpi	r19, 0x02	; 2
    18fa:	10 f4       	brcc	.+4      	; 0x1900 <__divsf3+0x52>
    18fc:	b8 01       	movw	r22, r16
    18fe:	7c c0       	rjmp	.+248    	; 0x19f8 <__divsf3+0x14a>
    1900:	8a 85       	ldd	r24, Y+10	; 0x0a
    1902:	9a 89       	ldd	r25, Y+18	; 0x12
    1904:	89 27       	eor	r24, r25
    1906:	8a 87       	std	Y+10, r24	; 0x0a
    1908:	24 30       	cpi	r18, 0x04	; 4
    190a:	11 f0       	breq	.+4      	; 0x1910 <__divsf3+0x62>
    190c:	22 30       	cpi	r18, 0x02	; 2
    190e:	31 f4       	brne	.+12     	; 0x191c <__divsf3+0x6e>
    1910:	23 17       	cp	r18, r19
    1912:	09 f0       	breq	.+2      	; 0x1916 <__divsf3+0x68>
    1914:	6e c0       	rjmp	.+220    	; 0x19f2 <__divsf3+0x144>
    1916:	66 e1       	ldi	r22, 0x16	; 22
    1918:	72 e0       	ldi	r23, 0x02	; 2
    191a:	6e c0       	rjmp	.+220    	; 0x19f8 <__divsf3+0x14a>
    191c:	34 30       	cpi	r19, 0x04	; 4
    191e:	39 f4       	brne	.+14     	; 0x192e <__divsf3+0x80>
    1920:	1d 86       	std	Y+13, r1	; 0x0d
    1922:	1e 86       	std	Y+14, r1	; 0x0e
    1924:	1f 86       	std	Y+15, r1	; 0x0f
    1926:	18 8a       	std	Y+16, r1	; 0x10
    1928:	1c 86       	std	Y+12, r1	; 0x0c
    192a:	1b 86       	std	Y+11, r1	; 0x0b
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <__divsf3+0x88>
    192e:	32 30       	cpi	r19, 0x02	; 2
    1930:	21 f4       	brne	.+8      	; 0x193a <__divsf3+0x8c>
    1932:	84 e0       	ldi	r24, 0x04	; 4
    1934:	89 87       	std	Y+9, r24	; 0x09
    1936:	b7 01       	movw	r22, r14
    1938:	5f c0       	rjmp	.+190    	; 0x19f8 <__divsf3+0x14a>
    193a:	2b 85       	ldd	r18, Y+11	; 0x0b
    193c:	3c 85       	ldd	r19, Y+12	; 0x0c
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	28 1b       	sub	r18, r24
    1944:	39 0b       	sbc	r19, r25
    1946:	3c 87       	std	Y+12, r19	; 0x0c
    1948:	2b 87       	std	Y+11, r18	; 0x0b
    194a:	ed 84       	ldd	r14, Y+13	; 0x0d
    194c:	fe 84       	ldd	r15, Y+14	; 0x0e
    194e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1950:	18 89       	ldd	r17, Y+16	; 0x10
    1952:	ad 88       	ldd	r10, Y+21	; 0x15
    1954:	be 88       	ldd	r11, Y+22	; 0x16
    1956:	cf 88       	ldd	r12, Y+23	; 0x17
    1958:	d8 8c       	ldd	r13, Y+24	; 0x18
    195a:	ea 14       	cp	r14, r10
    195c:	fb 04       	cpc	r15, r11
    195e:	0c 05       	cpc	r16, r12
    1960:	1d 05       	cpc	r17, r13
    1962:	40 f4       	brcc	.+16     	; 0x1974 <__divsf3+0xc6>
    1964:	ee 0c       	add	r14, r14
    1966:	ff 1c       	adc	r15, r15
    1968:	00 1f       	adc	r16, r16
    196a:	11 1f       	adc	r17, r17
    196c:	21 50       	subi	r18, 0x01	; 1
    196e:	30 40       	sbci	r19, 0x00	; 0
    1970:	3c 87       	std	Y+12, r19	; 0x0c
    1972:	2b 87       	std	Y+11, r18	; 0x0b
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e4       	ldi	r27, 0x40	; 64
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	ea 14       	cp	r14, r10
    198a:	fb 04       	cpc	r15, r11
    198c:	0c 05       	cpc	r16, r12
    198e:	1d 05       	cpc	r17, r13
    1990:	40 f0       	brcs	.+16     	; 0x19a2 <__divsf3+0xf4>
    1992:	28 2b       	or	r18, r24
    1994:	39 2b       	or	r19, r25
    1996:	4a 2b       	or	r20, r26
    1998:	5b 2b       	or	r21, r27
    199a:	ea 18       	sub	r14, r10
    199c:	fb 08       	sbc	r15, r11
    199e:	0c 09       	sbc	r16, r12
    19a0:	1d 09       	sbc	r17, r13
    19a2:	b6 95       	lsr	r27
    19a4:	a7 95       	ror	r26
    19a6:	97 95       	ror	r25
    19a8:	87 95       	ror	r24
    19aa:	ee 0c       	add	r14, r14
    19ac:	ff 1c       	adc	r15, r15
    19ae:	00 1f       	adc	r16, r16
    19b0:	11 1f       	adc	r17, r17
    19b2:	6f 5f       	subi	r22, 0xFF	; 255
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	6f 31       	cpi	r22, 0x1F	; 31
    19b8:	71 05       	cpc	r23, r1
    19ba:	31 f7       	brne	.-52     	; 0x1988 <__divsf3+0xda>
    19bc:	da 01       	movw	r26, r20
    19be:	c9 01       	movw	r24, r18
    19c0:	8f 77       	andi	r24, 0x7F	; 127
    19c2:	90 70       	andi	r25, 0x00	; 0
    19c4:	a0 70       	andi	r26, 0x00	; 0
    19c6:	b0 70       	andi	r27, 0x00	; 0
    19c8:	80 34       	cpi	r24, 0x40	; 64
    19ca:	91 05       	cpc	r25, r1
    19cc:	a1 05       	cpc	r26, r1
    19ce:	b1 05       	cpc	r27, r1
    19d0:	61 f4       	brne	.+24     	; 0x19ea <__divsf3+0x13c>
    19d2:	27 fd       	sbrc	r18, 7
    19d4:	0a c0       	rjmp	.+20     	; 0x19ea <__divsf3+0x13c>
    19d6:	e1 14       	cp	r14, r1
    19d8:	f1 04       	cpc	r15, r1
    19da:	01 05       	cpc	r16, r1
    19dc:	11 05       	cpc	r17, r1
    19de:	29 f0       	breq	.+10     	; 0x19ea <__divsf3+0x13c>
    19e0:	20 5c       	subi	r18, 0xC0	; 192
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	4f 4f       	sbci	r20, 0xFF	; 255
    19e6:	5f 4f       	sbci	r21, 0xFF	; 255
    19e8:	20 78       	andi	r18, 0x80	; 128
    19ea:	2d 87       	std	Y+13, r18	; 0x0d
    19ec:	3e 87       	std	Y+14, r19	; 0x0e
    19ee:	4f 87       	std	Y+15, r20	; 0x0f
    19f0:	58 8b       	std	Y+16, r21	; 0x10
    19f2:	be 01       	movw	r22, r28
    19f4:	67 5f       	subi	r22, 0xF7	; 247
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	cb 01       	movw	r24, r22
    19fa:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__pack_f>
    19fe:	68 96       	adiw	r28, 0x18	; 24
    1a00:	ea e0       	ldi	r30, 0x0A	; 10
    1a02:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__epilogue_restores__+0x10>

00001a06 <__gtsf2>:
    1a06:	a8 e1       	ldi	r26, 0x18	; 24
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e9 e0       	ldi	r30, 0x09	; 9
    1a0c:	fd e0       	ldi	r31, 0x0D	; 13
    1a0e:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__+0x18>
    1a12:	69 83       	std	Y+1, r22	; 0x01
    1a14:	7a 83       	std	Y+2, r23	; 0x02
    1a16:	8b 83       	std	Y+3, r24	; 0x03
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	2d 83       	std	Y+5, r18	; 0x05
    1a1c:	3e 83       	std	Y+6, r19	; 0x06
    1a1e:	4f 83       	std	Y+7, r20	; 0x07
    1a20:	58 87       	std	Y+8, r21	; 0x08
    1a22:	89 e0       	ldi	r24, 0x09	; 9
    1a24:	e8 2e       	mov	r14, r24
    1a26:	f1 2c       	mov	r15, r1
    1a28:	ec 0e       	add	r14, r28
    1a2a:	fd 1e       	adc	r15, r29
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	b7 01       	movw	r22, r14
    1a32:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    1a36:	8e 01       	movw	r16, r28
    1a38:	0f 5e       	subi	r16, 0xEF	; 239
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	05 96       	adiw	r24, 0x05	; 5
    1a40:	b8 01       	movw	r22, r16
    1a42:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	40 f0       	brcs	.+16     	; 0x1a5c <__gtsf2+0x56>
    1a4c:	89 89       	ldd	r24, Y+17	; 0x11
    1a4e:	82 30       	cpi	r24, 0x02	; 2
    1a50:	28 f0       	brcs	.+10     	; 0x1a5c <__gtsf2+0x56>
    1a52:	c7 01       	movw	r24, r14
    1a54:	b8 01       	movw	r22, r16
    1a56:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fpcmp_parts_f>
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <__gtsf2+0x58>
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	68 96       	adiw	r28, 0x18	; 24
    1a60:	e6 e0       	ldi	r30, 0x06	; 6
    1a62:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__+0x18>

00001a66 <__gesf2>:
    1a66:	a8 e1       	ldi	r26, 0x18	; 24
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e9 e3       	ldi	r30, 0x39	; 57
    1a6c:	fd e0       	ldi	r31, 0x0D	; 13
    1a6e:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__+0x18>
    1a72:	69 83       	std	Y+1, r22	; 0x01
    1a74:	7a 83       	std	Y+2, r23	; 0x02
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	9c 83       	std	Y+4, r25	; 0x04
    1a7a:	2d 83       	std	Y+5, r18	; 0x05
    1a7c:	3e 83       	std	Y+6, r19	; 0x06
    1a7e:	4f 83       	std	Y+7, r20	; 0x07
    1a80:	58 87       	std	Y+8, r21	; 0x08
    1a82:	89 e0       	ldi	r24, 0x09	; 9
    1a84:	e8 2e       	mov	r14, r24
    1a86:	f1 2c       	mov	r15, r1
    1a88:	ec 0e       	add	r14, r28
    1a8a:	fd 1e       	adc	r15, r29
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	b7 01       	movw	r22, r14
    1a92:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    1a96:	8e 01       	movw	r16, r28
    1a98:	0f 5e       	subi	r16, 0xEF	; 239
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	05 96       	adiw	r24, 0x05	; 5
    1aa0:	b8 01       	movw	r22, r16
    1aa2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	40 f0       	brcs	.+16     	; 0x1abc <__gesf2+0x56>
    1aac:	89 89       	ldd	r24, Y+17	; 0x11
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	28 f0       	brcs	.+10     	; 0x1abc <__gesf2+0x56>
    1ab2:	c7 01       	movw	r24, r14
    1ab4:	b8 01       	movw	r22, r16
    1ab6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fpcmp_parts_f>
    1aba:	01 c0       	rjmp	.+2      	; 0x1abe <__gesf2+0x58>
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	68 96       	adiw	r28, 0x18	; 24
    1ac0:	e6 e0       	ldi	r30, 0x06	; 6
    1ac2:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__+0x18>

00001ac6 <__ltsf2>:
    1ac6:	a8 e1       	ldi	r26, 0x18	; 24
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e9 e6       	ldi	r30, 0x69	; 105
    1acc:	fd e0       	ldi	r31, 0x0D	; 13
    1ace:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <__prologue_saves__+0x18>
    1ad2:	69 83       	std	Y+1, r22	; 0x01
    1ad4:	7a 83       	std	Y+2, r23	; 0x02
    1ad6:	8b 83       	std	Y+3, r24	; 0x03
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	2d 83       	std	Y+5, r18	; 0x05
    1adc:	3e 83       	std	Y+6, r19	; 0x06
    1ade:	4f 83       	std	Y+7, r20	; 0x07
    1ae0:	58 87       	std	Y+8, r21	; 0x08
    1ae2:	89 e0       	ldi	r24, 0x09	; 9
    1ae4:	e8 2e       	mov	r14, r24
    1ae6:	f1 2c       	mov	r15, r1
    1ae8:	ec 0e       	add	r14, r28
    1aea:	fd 1e       	adc	r15, r29
    1aec:	ce 01       	movw	r24, r28
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	b7 01       	movw	r22, r14
    1af2:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    1af6:	8e 01       	movw	r16, r28
    1af8:	0f 5e       	subi	r16, 0xEF	; 239
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	ce 01       	movw	r24, r28
    1afe:	05 96       	adiw	r24, 0x05	; 5
    1b00:	b8 01       	movw	r22, r16
    1b02:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    1b06:	89 85       	ldd	r24, Y+9	; 0x09
    1b08:	82 30       	cpi	r24, 0x02	; 2
    1b0a:	40 f0       	brcs	.+16     	; 0x1b1c <__ltsf2+0x56>
    1b0c:	89 89       	ldd	r24, Y+17	; 0x11
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	28 f0       	brcs	.+10     	; 0x1b1c <__ltsf2+0x56>
    1b12:	c7 01       	movw	r24, r14
    1b14:	b8 01       	movw	r22, r16
    1b16:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__fpcmp_parts_f>
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <__ltsf2+0x58>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	68 96       	adiw	r28, 0x18	; 24
    1b20:	e6 e0       	ldi	r30, 0x06	; 6
    1b22:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__epilogue_restores__+0x18>

00001b26 <__fixsfsi>:
    1b26:	ac e0       	ldi	r26, 0x0C	; 12
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e9 e9       	ldi	r30, 0x99	; 153
    1b2c:	fd e0       	ldi	r31, 0x0D	; 13
    1b2e:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <__prologue_saves__+0x20>
    1b32:	69 83       	std	Y+1, r22	; 0x01
    1b34:	7a 83       	std	Y+2, r23	; 0x02
    1b36:	8b 83       	std	Y+3, r24	; 0x03
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	01 96       	adiw	r24, 0x01	; 1
    1b3e:	be 01       	movw	r22, r28
    1b40:	6b 5f       	subi	r22, 0xFB	; 251
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__unpack_f>
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	82 30       	cpi	r24, 0x02	; 2
    1b4c:	61 f1       	breq	.+88     	; 0x1ba6 <__fixsfsi+0x80>
    1b4e:	82 30       	cpi	r24, 0x02	; 2
    1b50:	50 f1       	brcs	.+84     	; 0x1ba6 <__fixsfsi+0x80>
    1b52:	84 30       	cpi	r24, 0x04	; 4
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <__fixsfsi+0x38>
    1b56:	8e 81       	ldd	r24, Y+6	; 0x06
    1b58:	88 23       	and	r24, r24
    1b5a:	51 f1       	breq	.+84     	; 0x1bb0 <__fixsfsi+0x8a>
    1b5c:	2e c0       	rjmp	.+92     	; 0x1bba <__fixsfsi+0x94>
    1b5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b60:	38 85       	ldd	r19, Y+8	; 0x08
    1b62:	37 fd       	sbrc	r19, 7
    1b64:	20 c0       	rjmp	.+64     	; 0x1ba6 <__fixsfsi+0x80>
    1b66:	6e 81       	ldd	r22, Y+6	; 0x06
    1b68:	2f 31       	cpi	r18, 0x1F	; 31
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	1c f0       	brlt	.+6      	; 0x1b74 <__fixsfsi+0x4e>
    1b6e:	66 23       	and	r22, r22
    1b70:	f9 f0       	breq	.+62     	; 0x1bb0 <__fixsfsi+0x8a>
    1b72:	23 c0       	rjmp	.+70     	; 0x1bba <__fixsfsi+0x94>
    1b74:	8e e1       	ldi	r24, 0x1E	; 30
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	82 1b       	sub	r24, r18
    1b7a:	93 0b       	sbc	r25, r19
    1b7c:	29 85       	ldd	r18, Y+9	; 0x09
    1b7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b80:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b82:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__fixsfsi+0x68>
    1b86:	56 95       	lsr	r21
    1b88:	47 95       	ror	r20
    1b8a:	37 95       	ror	r19
    1b8c:	27 95       	ror	r18
    1b8e:	8a 95       	dec	r24
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__fixsfsi+0x60>
    1b92:	66 23       	and	r22, r22
    1b94:	b1 f0       	breq	.+44     	; 0x1bc2 <__fixsfsi+0x9c>
    1b96:	50 95       	com	r21
    1b98:	40 95       	com	r20
    1b9a:	30 95       	com	r19
    1b9c:	21 95       	neg	r18
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <__fixsfsi+0x9c>
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <__fixsfsi+0x9c>
    1bb0:	2f ef       	ldi	r18, 0xFF	; 255
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f ef       	ldi	r20, 0xFF	; 255
    1bb6:	5f e7       	ldi	r21, 0x7F	; 127
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <__fixsfsi+0x9c>
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	50 e8       	ldi	r21, 0x80	; 128
    1bc2:	b9 01       	movw	r22, r18
    1bc4:	ca 01       	movw	r24, r20
    1bc6:	2c 96       	adiw	r28, 0x0c	; 12
    1bc8:	e2 e0       	ldi	r30, 0x02	; 2
    1bca:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__epilogue_restores__+0x20>

00001bce <__pack_f>:
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	fc 01       	movw	r30, r24
    1bda:	e4 80       	ldd	r14, Z+4	; 0x04
    1bdc:	f5 80       	ldd	r15, Z+5	; 0x05
    1bde:	06 81       	ldd	r16, Z+6	; 0x06
    1be0:	17 81       	ldd	r17, Z+7	; 0x07
    1be2:	d1 80       	ldd	r13, Z+1	; 0x01
    1be4:	80 81       	ld	r24, Z
    1be6:	82 30       	cpi	r24, 0x02	; 2
    1be8:	48 f4       	brcc	.+18     	; 0x1bfc <__pack_f+0x2e>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e1       	ldi	r26, 0x10	; 16
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e8 2a       	or	r14, r24
    1bf4:	f9 2a       	or	r15, r25
    1bf6:	0a 2b       	or	r16, r26
    1bf8:	1b 2b       	or	r17, r27
    1bfa:	a5 c0       	rjmp	.+330    	; 0x1d46 <__pack_f+0x178>
    1bfc:	84 30       	cpi	r24, 0x04	; 4
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <__pack_f+0x34>
    1c00:	9f c0       	rjmp	.+318    	; 0x1d40 <__pack_f+0x172>
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	21 f4       	brne	.+8      	; 0x1c0e <__pack_f+0x40>
    1c06:	ee 24       	eor	r14, r14
    1c08:	ff 24       	eor	r15, r15
    1c0a:	87 01       	movw	r16, r14
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <__pack_f+0x4a>
    1c0e:	e1 14       	cp	r14, r1
    1c10:	f1 04       	cpc	r15, r1
    1c12:	01 05       	cpc	r16, r1
    1c14:	11 05       	cpc	r17, r1
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <__pack_f+0x50>
    1c18:	e0 e0       	ldi	r30, 0x00	; 0
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	96 c0       	rjmp	.+300    	; 0x1d4a <__pack_f+0x17c>
    1c1e:	62 81       	ldd	r22, Z+2	; 0x02
    1c20:	73 81       	ldd	r23, Z+3	; 0x03
    1c22:	9f ef       	ldi	r25, 0xFF	; 255
    1c24:	62 38       	cpi	r22, 0x82	; 130
    1c26:	79 07       	cpc	r23, r25
    1c28:	0c f0       	brlt	.+2      	; 0x1c2c <__pack_f+0x5e>
    1c2a:	5b c0       	rjmp	.+182    	; 0x1ce2 <__pack_f+0x114>
    1c2c:	22 e8       	ldi	r18, 0x82	; 130
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	26 1b       	sub	r18, r22
    1c32:	37 0b       	sbc	r19, r23
    1c34:	2a 31       	cpi	r18, 0x1A	; 26
    1c36:	31 05       	cpc	r19, r1
    1c38:	2c f0       	brlt	.+10     	; 0x1c44 <__pack_f+0x76>
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	2a c0       	rjmp	.+84     	; 0x1c98 <__pack_f+0xca>
    1c44:	b8 01       	movw	r22, r16
    1c46:	a7 01       	movw	r20, r14
    1c48:	02 2e       	mov	r0, r18
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <__pack_f+0x86>
    1c4c:	76 95       	lsr	r23
    1c4e:	67 95       	ror	r22
    1c50:	57 95       	ror	r21
    1c52:	47 95       	ror	r20
    1c54:	0a 94       	dec	r0
    1c56:	d2 f7       	brpl	.-12     	; 0x1c4c <__pack_f+0x7e>
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a0 e0       	ldi	r26, 0x00	; 0
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <__pack_f+0x9c>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	aa 1f       	adc	r26, r26
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	2a 95       	dec	r18
    1c6c:	d2 f7       	brpl	.-12     	; 0x1c62 <__pack_f+0x94>
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	a1 09       	sbc	r26, r1
    1c72:	b1 09       	sbc	r27, r1
    1c74:	8e 21       	and	r24, r14
    1c76:	9f 21       	and	r25, r15
    1c78:	a0 23       	and	r26, r16
    1c7a:	b1 23       	and	r27, r17
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	a1 05       	cpc	r26, r1
    1c80:	b1 05       	cpc	r27, r1
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <__pack_f+0xbe>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	9a 01       	movw	r18, r20
    1c8e:	ab 01       	movw	r20, r22
    1c90:	28 2b       	or	r18, r24
    1c92:	39 2b       	or	r19, r25
    1c94:	4a 2b       	or	r20, r26
    1c96:	5b 2b       	or	r21, r27
    1c98:	da 01       	movw	r26, r20
    1c9a:	c9 01       	movw	r24, r18
    1c9c:	8f 77       	andi	r24, 0x7F	; 127
    1c9e:	90 70       	andi	r25, 0x00	; 0
    1ca0:	a0 70       	andi	r26, 0x00	; 0
    1ca2:	b0 70       	andi	r27, 0x00	; 0
    1ca4:	80 34       	cpi	r24, 0x40	; 64
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	a1 05       	cpc	r26, r1
    1caa:	b1 05       	cpc	r27, r1
    1cac:	39 f4       	brne	.+14     	; 0x1cbc <__pack_f+0xee>
    1cae:	27 ff       	sbrs	r18, 7
    1cb0:	09 c0       	rjmp	.+18     	; 0x1cc4 <__pack_f+0xf6>
    1cb2:	20 5c       	subi	r18, 0xC0	; 192
    1cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb6:	4f 4f       	sbci	r20, 0xFF	; 255
    1cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <__pack_f+0xf6>
    1cbc:	21 5c       	subi	r18, 0xC1	; 193
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	4f 4f       	sbci	r20, 0xFF	; 255
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	e0 e0       	ldi	r30, 0x00	; 0
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	20 30       	cpi	r18, 0x00	; 0
    1cca:	a0 e0       	ldi	r26, 0x00	; 0
    1ccc:	3a 07       	cpc	r19, r26
    1cce:	a0 e0       	ldi	r26, 0x00	; 0
    1cd0:	4a 07       	cpc	r20, r26
    1cd2:	a0 e4       	ldi	r26, 0x40	; 64
    1cd4:	5a 07       	cpc	r21, r26
    1cd6:	10 f0       	brcs	.+4      	; 0x1cdc <__pack_f+0x10e>
    1cd8:	e1 e0       	ldi	r30, 0x01	; 1
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	79 01       	movw	r14, r18
    1cde:	8a 01       	movw	r16, r20
    1ce0:	27 c0       	rjmp	.+78     	; 0x1d30 <__pack_f+0x162>
    1ce2:	60 38       	cpi	r22, 0x80	; 128
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	64 f5       	brge	.+88     	; 0x1d40 <__pack_f+0x172>
    1ce8:	fb 01       	movw	r30, r22
    1cea:	e1 58       	subi	r30, 0x81	; 129
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	d8 01       	movw	r26, r16
    1cf0:	c7 01       	movw	r24, r14
    1cf2:	8f 77       	andi	r24, 0x7F	; 127
    1cf4:	90 70       	andi	r25, 0x00	; 0
    1cf6:	a0 70       	andi	r26, 0x00	; 0
    1cf8:	b0 70       	andi	r27, 0x00	; 0
    1cfa:	80 34       	cpi	r24, 0x40	; 64
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	a1 05       	cpc	r26, r1
    1d00:	b1 05       	cpc	r27, r1
    1d02:	39 f4       	brne	.+14     	; 0x1d12 <__pack_f+0x144>
    1d04:	e7 fe       	sbrs	r14, 7
    1d06:	0d c0       	rjmp	.+26     	; 0x1d22 <__pack_f+0x154>
    1d08:	80 e4       	ldi	r24, 0x40	; 64
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	a0 e0       	ldi	r26, 0x00	; 0
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	04 c0       	rjmp	.+8      	; 0x1d1a <__pack_f+0x14c>
    1d12:	8f e3       	ldi	r24, 0x3F	; 63
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e8 0e       	add	r14, r24
    1d1c:	f9 1e       	adc	r15, r25
    1d1e:	0a 1f       	adc	r16, r26
    1d20:	1b 1f       	adc	r17, r27
    1d22:	17 ff       	sbrs	r17, 7
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <__pack_f+0x162>
    1d26:	16 95       	lsr	r17
    1d28:	07 95       	ror	r16
    1d2a:	f7 94       	ror	r15
    1d2c:	e7 94       	ror	r14
    1d2e:	31 96       	adiw	r30, 0x01	; 1
    1d30:	87 e0       	ldi	r24, 0x07	; 7
    1d32:	16 95       	lsr	r17
    1d34:	07 95       	ror	r16
    1d36:	f7 94       	ror	r15
    1d38:	e7 94       	ror	r14
    1d3a:	8a 95       	dec	r24
    1d3c:	d1 f7       	brne	.-12     	; 0x1d32 <__pack_f+0x164>
    1d3e:	05 c0       	rjmp	.+10     	; 0x1d4a <__pack_f+0x17c>
    1d40:	ee 24       	eor	r14, r14
    1d42:	ff 24       	eor	r15, r15
    1d44:	87 01       	movw	r16, r14
    1d46:	ef ef       	ldi	r30, 0xFF	; 255
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	6e 2f       	mov	r22, r30
    1d4c:	67 95       	ror	r22
    1d4e:	66 27       	eor	r22, r22
    1d50:	67 95       	ror	r22
    1d52:	90 2f       	mov	r25, r16
    1d54:	9f 77       	andi	r25, 0x7F	; 127
    1d56:	d7 94       	ror	r13
    1d58:	dd 24       	eor	r13, r13
    1d5a:	d7 94       	ror	r13
    1d5c:	8e 2f       	mov	r24, r30
    1d5e:	86 95       	lsr	r24
    1d60:	49 2f       	mov	r20, r25
    1d62:	46 2b       	or	r20, r22
    1d64:	58 2f       	mov	r21, r24
    1d66:	5d 29       	or	r21, r13
    1d68:	b7 01       	movw	r22, r14
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	08 95       	ret

00001d78 <__unpack_f>:
    1d78:	fc 01       	movw	r30, r24
    1d7a:	db 01       	movw	r26, r22
    1d7c:	40 81       	ld	r20, Z
    1d7e:	51 81       	ldd	r21, Z+1	; 0x01
    1d80:	22 81       	ldd	r18, Z+2	; 0x02
    1d82:	62 2f       	mov	r22, r18
    1d84:	6f 77       	andi	r22, 0x7F	; 127
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	22 1f       	adc	r18, r18
    1d8a:	22 27       	eor	r18, r18
    1d8c:	22 1f       	adc	r18, r18
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	89 2f       	mov	r24, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	82 2b       	or	r24, r18
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	99 27       	eor	r25, r25
    1d9e:	99 1f       	adc	r25, r25
    1da0:	11 96       	adiw	r26, 0x01	; 1
    1da2:	9c 93       	st	X, r25
    1da4:	11 97       	sbiw	r26, 0x01	; 1
    1da6:	21 15       	cp	r18, r1
    1da8:	31 05       	cpc	r19, r1
    1daa:	a9 f5       	brne	.+106    	; 0x1e16 <__unpack_f+0x9e>
    1dac:	41 15       	cp	r20, r1
    1dae:	51 05       	cpc	r21, r1
    1db0:	61 05       	cpc	r22, r1
    1db2:	71 05       	cpc	r23, r1
    1db4:	11 f4       	brne	.+4      	; 0x1dba <__unpack_f+0x42>
    1db6:	82 e0       	ldi	r24, 0x02	; 2
    1db8:	37 c0       	rjmp	.+110    	; 0x1e28 <__unpack_f+0xb0>
    1dba:	82 e8       	ldi	r24, 0x82	; 130
    1dbc:	9f ef       	ldi	r25, 0xFF	; 255
    1dbe:	13 96       	adiw	r26, 0x03	; 3
    1dc0:	9c 93       	st	X, r25
    1dc2:	8e 93       	st	-X, r24
    1dc4:	12 97       	sbiw	r26, 0x02	; 2
    1dc6:	9a 01       	movw	r18, r20
    1dc8:	ab 01       	movw	r20, r22
    1dca:	67 e0       	ldi	r22, 0x07	; 7
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	44 1f       	adc	r20, r20
    1dd2:	55 1f       	adc	r21, r21
    1dd4:	6a 95       	dec	r22
    1dd6:	d1 f7       	brne	.-12     	; 0x1dcc <__unpack_f+0x54>
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	8c 93       	st	X, r24
    1ddc:	0d c0       	rjmp	.+26     	; 0x1df8 <__unpack_f+0x80>
    1dde:	22 0f       	add	r18, r18
    1de0:	33 1f       	adc	r19, r19
    1de2:	44 1f       	adc	r20, r20
    1de4:	55 1f       	adc	r21, r21
    1de6:	12 96       	adiw	r26, 0x02	; 2
    1de8:	8d 91       	ld	r24, X+
    1dea:	9c 91       	ld	r25, X
    1dec:	13 97       	sbiw	r26, 0x03	; 3
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	13 96       	adiw	r26, 0x03	; 3
    1df2:	9c 93       	st	X, r25
    1df4:	8e 93       	st	-X, r24
    1df6:	12 97       	sbiw	r26, 0x02	; 2
    1df8:	20 30       	cpi	r18, 0x00	; 0
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	38 07       	cpc	r19, r24
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	48 07       	cpc	r20, r24
    1e02:	80 e4       	ldi	r24, 0x40	; 64
    1e04:	58 07       	cpc	r21, r24
    1e06:	58 f3       	brcs	.-42     	; 0x1dde <__unpack_f+0x66>
    1e08:	14 96       	adiw	r26, 0x04	; 4
    1e0a:	2d 93       	st	X+, r18
    1e0c:	3d 93       	st	X+, r19
    1e0e:	4d 93       	st	X+, r20
    1e10:	5c 93       	st	X, r21
    1e12:	17 97       	sbiw	r26, 0x07	; 7
    1e14:	08 95       	ret
    1e16:	2f 3f       	cpi	r18, 0xFF	; 255
    1e18:	31 05       	cpc	r19, r1
    1e1a:	79 f4       	brne	.+30     	; 0x1e3a <__unpack_f+0xc2>
    1e1c:	41 15       	cp	r20, r1
    1e1e:	51 05       	cpc	r21, r1
    1e20:	61 05       	cpc	r22, r1
    1e22:	71 05       	cpc	r23, r1
    1e24:	19 f4       	brne	.+6      	; 0x1e2c <__unpack_f+0xb4>
    1e26:	84 e0       	ldi	r24, 0x04	; 4
    1e28:	8c 93       	st	X, r24
    1e2a:	08 95       	ret
    1e2c:	64 ff       	sbrs	r22, 4
    1e2e:	03 c0       	rjmp	.+6      	; 0x1e36 <__unpack_f+0xbe>
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	8c 93       	st	X, r24
    1e34:	12 c0       	rjmp	.+36     	; 0x1e5a <__unpack_f+0xe2>
    1e36:	1c 92       	st	X, r1
    1e38:	10 c0       	rjmp	.+32     	; 0x1e5a <__unpack_f+0xe2>
    1e3a:	2f 57       	subi	r18, 0x7F	; 127
    1e3c:	30 40       	sbci	r19, 0x00	; 0
    1e3e:	13 96       	adiw	r26, 0x03	; 3
    1e40:	3c 93       	st	X, r19
    1e42:	2e 93       	st	-X, r18
    1e44:	12 97       	sbiw	r26, 0x02	; 2
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	8c 93       	st	X, r24
    1e4a:	87 e0       	ldi	r24, 0x07	; 7
    1e4c:	44 0f       	add	r20, r20
    1e4e:	55 1f       	adc	r21, r21
    1e50:	66 1f       	adc	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	8a 95       	dec	r24
    1e56:	d1 f7       	brne	.-12     	; 0x1e4c <__unpack_f+0xd4>
    1e58:	70 64       	ori	r23, 0x40	; 64
    1e5a:	14 96       	adiw	r26, 0x04	; 4
    1e5c:	4d 93       	st	X+, r20
    1e5e:	5d 93       	st	X+, r21
    1e60:	6d 93       	st	X+, r22
    1e62:	7c 93       	st	X, r23
    1e64:	17 97       	sbiw	r26, 0x07	; 7
    1e66:	08 95       	ret

00001e68 <__fpcmp_parts_f>:
    1e68:	1f 93       	push	r17
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	fb 01       	movw	r30, r22
    1e6e:	9c 91       	ld	r25, X
    1e70:	92 30       	cpi	r25, 0x02	; 2
    1e72:	08 f4       	brcc	.+2      	; 0x1e76 <__fpcmp_parts_f+0xe>
    1e74:	47 c0       	rjmp	.+142    	; 0x1f04 <__fpcmp_parts_f+0x9c>
    1e76:	80 81       	ld	r24, Z
    1e78:	82 30       	cpi	r24, 0x02	; 2
    1e7a:	08 f4       	brcc	.+2      	; 0x1e7e <__fpcmp_parts_f+0x16>
    1e7c:	43 c0       	rjmp	.+134    	; 0x1f04 <__fpcmp_parts_f+0x9c>
    1e7e:	94 30       	cpi	r25, 0x04	; 4
    1e80:	51 f4       	brne	.+20     	; 0x1e96 <__fpcmp_parts_f+0x2e>
    1e82:	11 96       	adiw	r26, 0x01	; 1
    1e84:	1c 91       	ld	r17, X
    1e86:	84 30       	cpi	r24, 0x04	; 4
    1e88:	99 f5       	brne	.+102    	; 0x1ef0 <__fpcmp_parts_f+0x88>
    1e8a:	81 81       	ldd	r24, Z+1	; 0x01
    1e8c:	68 2f       	mov	r22, r24
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	61 1b       	sub	r22, r17
    1e92:	71 09       	sbc	r23, r1
    1e94:	3f c0       	rjmp	.+126    	; 0x1f14 <__fpcmp_parts_f+0xac>
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	21 f0       	breq	.+8      	; 0x1ea2 <__fpcmp_parts_f+0x3a>
    1e9a:	92 30       	cpi	r25, 0x02	; 2
    1e9c:	31 f4       	brne	.+12     	; 0x1eaa <__fpcmp_parts_f+0x42>
    1e9e:	82 30       	cpi	r24, 0x02	; 2
    1ea0:	b9 f1       	breq	.+110    	; 0x1f10 <__fpcmp_parts_f+0xa8>
    1ea2:	81 81       	ldd	r24, Z+1	; 0x01
    1ea4:	88 23       	and	r24, r24
    1ea6:	89 f1       	breq	.+98     	; 0x1f0a <__fpcmp_parts_f+0xa2>
    1ea8:	2d c0       	rjmp	.+90     	; 0x1f04 <__fpcmp_parts_f+0x9c>
    1eaa:	11 96       	adiw	r26, 0x01	; 1
    1eac:	1c 91       	ld	r17, X
    1eae:	11 97       	sbiw	r26, 0x01	; 1
    1eb0:	82 30       	cpi	r24, 0x02	; 2
    1eb2:	f1 f0       	breq	.+60     	; 0x1ef0 <__fpcmp_parts_f+0x88>
    1eb4:	81 81       	ldd	r24, Z+1	; 0x01
    1eb6:	18 17       	cp	r17, r24
    1eb8:	d9 f4       	brne	.+54     	; 0x1ef0 <__fpcmp_parts_f+0x88>
    1eba:	12 96       	adiw	r26, 0x02	; 2
    1ebc:	2d 91       	ld	r18, X+
    1ebe:	3c 91       	ld	r19, X
    1ec0:	13 97       	sbiw	r26, 0x03	; 3
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	82 17       	cp	r24, r18
    1ec8:	93 07       	cpc	r25, r19
    1eca:	94 f0       	brlt	.+36     	; 0x1ef0 <__fpcmp_parts_f+0x88>
    1ecc:	28 17       	cp	r18, r24
    1ece:	39 07       	cpc	r19, r25
    1ed0:	bc f0       	brlt	.+46     	; 0x1f00 <__fpcmp_parts_f+0x98>
    1ed2:	14 96       	adiw	r26, 0x04	; 4
    1ed4:	8d 91       	ld	r24, X+
    1ed6:	9d 91       	ld	r25, X+
    1ed8:	0d 90       	ld	r0, X+
    1eda:	bc 91       	ld	r27, X
    1edc:	a0 2d       	mov	r26, r0
    1ede:	24 81       	ldd	r18, Z+4	; 0x04
    1ee0:	35 81       	ldd	r19, Z+5	; 0x05
    1ee2:	46 81       	ldd	r20, Z+6	; 0x06
    1ee4:	57 81       	ldd	r21, Z+7	; 0x07
    1ee6:	28 17       	cp	r18, r24
    1ee8:	39 07       	cpc	r19, r25
    1eea:	4a 07       	cpc	r20, r26
    1eec:	5b 07       	cpc	r21, r27
    1eee:	18 f4       	brcc	.+6      	; 0x1ef6 <__fpcmp_parts_f+0x8e>
    1ef0:	11 23       	and	r17, r17
    1ef2:	41 f0       	breq	.+16     	; 0x1f04 <__fpcmp_parts_f+0x9c>
    1ef4:	0a c0       	rjmp	.+20     	; 0x1f0a <__fpcmp_parts_f+0xa2>
    1ef6:	82 17       	cp	r24, r18
    1ef8:	93 07       	cpc	r25, r19
    1efa:	a4 07       	cpc	r26, r20
    1efc:	b5 07       	cpc	r27, r21
    1efe:	40 f4       	brcc	.+16     	; 0x1f10 <__fpcmp_parts_f+0xa8>
    1f00:	11 23       	and	r17, r17
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <__fpcmp_parts_f+0xa2>
    1f04:	61 e0       	ldi	r22, 0x01	; 1
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <__fpcmp_parts_f+0xac>
    1f0a:	6f ef       	ldi	r22, 0xFF	; 255
    1f0c:	7f ef       	ldi	r23, 0xFF	; 255
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <__fpcmp_parts_f+0xac>
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	70 e0       	ldi	r23, 0x00	; 0
    1f14:	cb 01       	movw	r24, r22
    1f16:	1f 91       	pop	r17
    1f18:	08 95       	ret

00001f1a <__prologue_saves__>:
    1f1a:	2f 92       	push	r2
    1f1c:	3f 92       	push	r3
    1f1e:	4f 92       	push	r4
    1f20:	5f 92       	push	r5
    1f22:	6f 92       	push	r6
    1f24:	7f 92       	push	r7
    1f26:	8f 92       	push	r8
    1f28:	9f 92       	push	r9
    1f2a:	af 92       	push	r10
    1f2c:	bf 92       	push	r11
    1f2e:	cf 92       	push	r12
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	ca 1b       	sub	r28, r26
    1f44:	db 0b       	sbc	r29, r27
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	09 94       	ijmp

00001f52 <__epilogue_restores__>:
    1f52:	2a 88       	ldd	r2, Y+18	; 0x12
    1f54:	39 88       	ldd	r3, Y+17	; 0x11
    1f56:	48 88       	ldd	r4, Y+16	; 0x10
    1f58:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f60:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f62:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f64:	b9 84       	ldd	r11, Y+9	; 0x09
    1f66:	c8 84       	ldd	r12, Y+8	; 0x08
    1f68:	df 80       	ldd	r13, Y+7	; 0x07
    1f6a:	ee 80       	ldd	r14, Y+6	; 0x06
    1f6c:	fd 80       	ldd	r15, Y+5	; 0x05
    1f6e:	0c 81       	ldd	r16, Y+4	; 0x04
    1f70:	1b 81       	ldd	r17, Y+3	; 0x03
    1f72:	aa 81       	ldd	r26, Y+2	; 0x02
    1f74:	b9 81       	ldd	r27, Y+1	; 0x01
    1f76:	ce 0f       	add	r28, r30
    1f78:	d1 1d       	adc	r29, r1
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	ed 01       	movw	r28, r26
    1f86:	08 95       	ret

00001f88 <printf>:
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	fe 01       	movw	r30, r28
    1f92:	35 96       	adiw	r30, 0x05	; 5
    1f94:	61 91       	ld	r22, Z+
    1f96:	71 91       	ld	r23, Z+
    1f98:	80 91 60 02 	lds	r24, 0x0260
    1f9c:	90 91 61 02 	lds	r25, 0x0261
    1fa0:	af 01       	movw	r20, r30
    1fa2:	0e 94 0b 10 	call	0x2016	; 0x2016 <vfprintf>
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <puts>:
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	e0 91 60 02 	lds	r30, 0x0260
    1fba:	f0 91 61 02 	lds	r31, 0x0261
    1fbe:	83 81       	ldd	r24, Z+3	; 0x03
    1fc0:	81 ff       	sbrs	r24, 1
    1fc2:	21 c0       	rjmp	.+66     	; 0x2006 <puts+0x5a>
    1fc4:	c0 e0       	ldi	r28, 0x00	; 0
    1fc6:	d0 e0       	ldi	r29, 0x00	; 0
    1fc8:	0d c0       	rjmp	.+26     	; 0x1fe4 <puts+0x38>
    1fca:	e0 91 60 02 	lds	r30, 0x0260
    1fce:	f0 91 61 02 	lds	r31, 0x0261
    1fd2:	20 85       	ldd	r18, Z+8	; 0x08
    1fd4:	31 85       	ldd	r19, Z+9	; 0x09
    1fd6:	bf 01       	movw	r22, r30
    1fd8:	f9 01       	movw	r30, r18
    1fda:	09 95       	icall
    1fdc:	89 2b       	or	r24, r25
    1fde:	11 f0       	breq	.+4      	; 0x1fe4 <puts+0x38>
    1fe0:	cf ef       	ldi	r28, 0xFF	; 255
    1fe2:	df ef       	ldi	r29, 0xFF	; 255
    1fe4:	f8 01       	movw	r30, r16
    1fe6:	81 91       	ld	r24, Z+
    1fe8:	8f 01       	movw	r16, r30
    1fea:	88 23       	and	r24, r24
    1fec:	71 f7       	brne	.-36     	; 0x1fca <puts+0x1e>
    1fee:	e0 91 60 02 	lds	r30, 0x0260
    1ff2:	f0 91 61 02 	lds	r31, 0x0261
    1ff6:	20 85       	ldd	r18, Z+8	; 0x08
    1ff8:	31 85       	ldd	r19, Z+9	; 0x09
    1ffa:	8a e0       	ldi	r24, 0x0A	; 10
    1ffc:	bf 01       	movw	r22, r30
    1ffe:	f9 01       	movw	r30, r18
    2000:	09 95       	icall
    2002:	89 2b       	or	r24, r25
    2004:	11 f0       	breq	.+4      	; 0x200a <puts+0x5e>
    2006:	cf ef       	ldi	r28, 0xFF	; 255
    2008:	df ef       	ldi	r29, 0xFF	; 255
    200a:	ce 01       	movw	r24, r28
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	08 95       	ret

00002016 <vfprintf>:
    2016:	2f 92       	push	r2
    2018:	3f 92       	push	r3
    201a:	4f 92       	push	r4
    201c:	5f 92       	push	r5
    201e:	6f 92       	push	r6
    2020:	7f 92       	push	r7
    2022:	8f 92       	push	r8
    2024:	9f 92       	push	r9
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	2b 97       	sbiw	r28, 0x0b	; 11
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	3c 01       	movw	r6, r24
    204c:	2b 01       	movw	r4, r22
    204e:	5a 01       	movw	r10, r20
    2050:	fc 01       	movw	r30, r24
    2052:	17 82       	std	Z+7, r1	; 0x07
    2054:	16 82       	std	Z+6, r1	; 0x06
    2056:	83 81       	ldd	r24, Z+3	; 0x03
    2058:	81 fd       	sbrc	r24, 1
    205a:	03 c0       	rjmp	.+6      	; 0x2062 <vfprintf+0x4c>
    205c:	6f ef       	ldi	r22, 0xFF	; 255
    205e:	7f ef       	ldi	r23, 0xFF	; 255
    2060:	c6 c1       	rjmp	.+908    	; 0x23ee <vfprintf+0x3d8>
    2062:	9a e0       	ldi	r25, 0x0A	; 10
    2064:	89 2e       	mov	r8, r25
    2066:	1e 01       	movw	r2, r28
    2068:	08 94       	sec
    206a:	21 1c       	adc	r2, r1
    206c:	31 1c       	adc	r3, r1
    206e:	f3 01       	movw	r30, r6
    2070:	23 81       	ldd	r18, Z+3	; 0x03
    2072:	f2 01       	movw	r30, r4
    2074:	23 fd       	sbrc	r18, 3
    2076:	85 91       	lpm	r24, Z+
    2078:	23 ff       	sbrs	r18, 3
    207a:	81 91       	ld	r24, Z+
    207c:	2f 01       	movw	r4, r30
    207e:	88 23       	and	r24, r24
    2080:	09 f4       	brne	.+2      	; 0x2084 <vfprintf+0x6e>
    2082:	b2 c1       	rjmp	.+868    	; 0x23e8 <vfprintf+0x3d2>
    2084:	85 32       	cpi	r24, 0x25	; 37
    2086:	39 f4       	brne	.+14     	; 0x2096 <vfprintf+0x80>
    2088:	23 fd       	sbrc	r18, 3
    208a:	85 91       	lpm	r24, Z+
    208c:	23 ff       	sbrs	r18, 3
    208e:	81 91       	ld	r24, Z+
    2090:	2f 01       	movw	r4, r30
    2092:	85 32       	cpi	r24, 0x25	; 37
    2094:	29 f4       	brne	.+10     	; 0x20a0 <vfprintf+0x8a>
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	b3 01       	movw	r22, r6
    209a:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    209e:	e7 cf       	rjmp	.-50     	; 0x206e <vfprintf+0x58>
    20a0:	98 2f       	mov	r25, r24
    20a2:	ff 24       	eor	r15, r15
    20a4:	ee 24       	eor	r14, r14
    20a6:	99 24       	eor	r9, r9
    20a8:	ff e1       	ldi	r31, 0x1F	; 31
    20aa:	ff 15       	cp	r31, r15
    20ac:	d0 f0       	brcs	.+52     	; 0x20e2 <vfprintf+0xcc>
    20ae:	9b 32       	cpi	r25, 0x2B	; 43
    20b0:	69 f0       	breq	.+26     	; 0x20cc <vfprintf+0xb6>
    20b2:	9c 32       	cpi	r25, 0x2C	; 44
    20b4:	28 f4       	brcc	.+10     	; 0x20c0 <vfprintf+0xaa>
    20b6:	90 32       	cpi	r25, 0x20	; 32
    20b8:	59 f0       	breq	.+22     	; 0x20d0 <vfprintf+0xba>
    20ba:	93 32       	cpi	r25, 0x23	; 35
    20bc:	91 f4       	brne	.+36     	; 0x20e2 <vfprintf+0xcc>
    20be:	0e c0       	rjmp	.+28     	; 0x20dc <vfprintf+0xc6>
    20c0:	9d 32       	cpi	r25, 0x2D	; 45
    20c2:	49 f0       	breq	.+18     	; 0x20d6 <vfprintf+0xc0>
    20c4:	90 33       	cpi	r25, 0x30	; 48
    20c6:	69 f4       	brne	.+26     	; 0x20e2 <vfprintf+0xcc>
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	24 c0       	rjmp	.+72     	; 0x2114 <vfprintf+0xfe>
    20cc:	52 e0       	ldi	r21, 0x02	; 2
    20ce:	f5 2a       	or	r15, r21
    20d0:	84 e0       	ldi	r24, 0x04	; 4
    20d2:	f8 2a       	or	r15, r24
    20d4:	28 c0       	rjmp	.+80     	; 0x2126 <vfprintf+0x110>
    20d6:	98 e0       	ldi	r25, 0x08	; 8
    20d8:	f9 2a       	or	r15, r25
    20da:	25 c0       	rjmp	.+74     	; 0x2126 <vfprintf+0x110>
    20dc:	e0 e1       	ldi	r30, 0x10	; 16
    20de:	fe 2a       	or	r15, r30
    20e0:	22 c0       	rjmp	.+68     	; 0x2126 <vfprintf+0x110>
    20e2:	f7 fc       	sbrc	r15, 7
    20e4:	29 c0       	rjmp	.+82     	; 0x2138 <vfprintf+0x122>
    20e6:	89 2f       	mov	r24, r25
    20e8:	80 53       	subi	r24, 0x30	; 48
    20ea:	8a 30       	cpi	r24, 0x0A	; 10
    20ec:	70 f4       	brcc	.+28     	; 0x210a <vfprintf+0xf4>
    20ee:	f6 fe       	sbrs	r15, 6
    20f0:	05 c0       	rjmp	.+10     	; 0x20fc <vfprintf+0xe6>
    20f2:	98 9c       	mul	r9, r8
    20f4:	90 2c       	mov	r9, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	98 0e       	add	r9, r24
    20fa:	15 c0       	rjmp	.+42     	; 0x2126 <vfprintf+0x110>
    20fc:	e8 9c       	mul	r14, r8
    20fe:	e0 2c       	mov	r14, r0
    2100:	11 24       	eor	r1, r1
    2102:	e8 0e       	add	r14, r24
    2104:	f0 e2       	ldi	r31, 0x20	; 32
    2106:	ff 2a       	or	r15, r31
    2108:	0e c0       	rjmp	.+28     	; 0x2126 <vfprintf+0x110>
    210a:	9e 32       	cpi	r25, 0x2E	; 46
    210c:	29 f4       	brne	.+10     	; 0x2118 <vfprintf+0x102>
    210e:	f6 fc       	sbrc	r15, 6
    2110:	6b c1       	rjmp	.+726    	; 0x23e8 <vfprintf+0x3d2>
    2112:	40 e4       	ldi	r20, 0x40	; 64
    2114:	f4 2a       	or	r15, r20
    2116:	07 c0       	rjmp	.+14     	; 0x2126 <vfprintf+0x110>
    2118:	9c 36       	cpi	r25, 0x6C	; 108
    211a:	19 f4       	brne	.+6      	; 0x2122 <vfprintf+0x10c>
    211c:	50 e8       	ldi	r21, 0x80	; 128
    211e:	f5 2a       	or	r15, r21
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <vfprintf+0x110>
    2122:	98 36       	cpi	r25, 0x68	; 104
    2124:	49 f4       	brne	.+18     	; 0x2138 <vfprintf+0x122>
    2126:	f2 01       	movw	r30, r4
    2128:	23 fd       	sbrc	r18, 3
    212a:	95 91       	lpm	r25, Z+
    212c:	23 ff       	sbrs	r18, 3
    212e:	91 91       	ld	r25, Z+
    2130:	2f 01       	movw	r4, r30
    2132:	99 23       	and	r25, r25
    2134:	09 f0       	breq	.+2      	; 0x2138 <vfprintf+0x122>
    2136:	b8 cf       	rjmp	.-144    	; 0x20a8 <vfprintf+0x92>
    2138:	89 2f       	mov	r24, r25
    213a:	85 54       	subi	r24, 0x45	; 69
    213c:	83 30       	cpi	r24, 0x03	; 3
    213e:	18 f0       	brcs	.+6      	; 0x2146 <vfprintf+0x130>
    2140:	80 52       	subi	r24, 0x20	; 32
    2142:	83 30       	cpi	r24, 0x03	; 3
    2144:	38 f4       	brcc	.+14     	; 0x2154 <vfprintf+0x13e>
    2146:	44 e0       	ldi	r20, 0x04	; 4
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	a4 0e       	add	r10, r20
    214c:	b5 1e       	adc	r11, r21
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	59 83       	std	Y+1, r21	; 0x01
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <vfprintf+0x15c>
    2154:	93 36       	cpi	r25, 0x63	; 99
    2156:	31 f0       	breq	.+12     	; 0x2164 <vfprintf+0x14e>
    2158:	93 37       	cpi	r25, 0x73	; 115
    215a:	79 f0       	breq	.+30     	; 0x217a <vfprintf+0x164>
    215c:	93 35       	cpi	r25, 0x53	; 83
    215e:	09 f0       	breq	.+2      	; 0x2162 <vfprintf+0x14c>
    2160:	56 c0       	rjmp	.+172    	; 0x220e <vfprintf+0x1f8>
    2162:	20 c0       	rjmp	.+64     	; 0x21a4 <vfprintf+0x18e>
    2164:	f5 01       	movw	r30, r10
    2166:	80 81       	ld	r24, Z
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	42 e0       	ldi	r20, 0x02	; 2
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	a4 0e       	add	r10, r20
    2170:	b5 1e       	adc	r11, r21
    2172:	61 01       	movw	r12, r2
    2174:	01 e0       	ldi	r16, 0x01	; 1
    2176:	10 e0       	ldi	r17, 0x00	; 0
    2178:	12 c0       	rjmp	.+36     	; 0x219e <vfprintf+0x188>
    217a:	f5 01       	movw	r30, r10
    217c:	c0 80       	ld	r12, Z
    217e:	d1 80       	ldd	r13, Z+1	; 0x01
    2180:	f6 fc       	sbrc	r15, 6
    2182:	03 c0       	rjmp	.+6      	; 0x218a <vfprintf+0x174>
    2184:	6f ef       	ldi	r22, 0xFF	; 255
    2186:	7f ef       	ldi	r23, 0xFF	; 255
    2188:	02 c0       	rjmp	.+4      	; 0x218e <vfprintf+0x178>
    218a:	69 2d       	mov	r22, r9
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	42 e0       	ldi	r20, 0x02	; 2
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	a4 0e       	add	r10, r20
    2194:	b5 1e       	adc	r11, r21
    2196:	c6 01       	movw	r24, r12
    2198:	0e 94 1c 12 	call	0x2438	; 0x2438 <strnlen>
    219c:	8c 01       	movw	r16, r24
    219e:	5f e7       	ldi	r21, 0x7F	; 127
    21a0:	f5 22       	and	r15, r21
    21a2:	14 c0       	rjmp	.+40     	; 0x21cc <vfprintf+0x1b6>
    21a4:	f5 01       	movw	r30, r10
    21a6:	c0 80       	ld	r12, Z
    21a8:	d1 80       	ldd	r13, Z+1	; 0x01
    21aa:	f6 fc       	sbrc	r15, 6
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <vfprintf+0x19e>
    21ae:	6f ef       	ldi	r22, 0xFF	; 255
    21b0:	7f ef       	ldi	r23, 0xFF	; 255
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <vfprintf+0x1a2>
    21b4:	69 2d       	mov	r22, r9
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	42 e0       	ldi	r20, 0x02	; 2
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	a4 0e       	add	r10, r20
    21be:	b5 1e       	adc	r11, r21
    21c0:	c6 01       	movw	r24, r12
    21c2:	0e 94 11 12 	call	0x2422	; 0x2422 <strnlen_P>
    21c6:	8c 01       	movw	r16, r24
    21c8:	50 e8       	ldi	r21, 0x80	; 128
    21ca:	f5 2a       	or	r15, r21
    21cc:	f3 fe       	sbrs	r15, 3
    21ce:	07 c0       	rjmp	.+14     	; 0x21de <vfprintf+0x1c8>
    21d0:	1a c0       	rjmp	.+52     	; 0x2206 <vfprintf+0x1f0>
    21d2:	80 e2       	ldi	r24, 0x20	; 32
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	b3 01       	movw	r22, r6
    21d8:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    21dc:	ea 94       	dec	r14
    21de:	8e 2d       	mov	r24, r14
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	08 17       	cp	r16, r24
    21e4:	19 07       	cpc	r17, r25
    21e6:	a8 f3       	brcs	.-22     	; 0x21d2 <vfprintf+0x1bc>
    21e8:	0e c0       	rjmp	.+28     	; 0x2206 <vfprintf+0x1f0>
    21ea:	f6 01       	movw	r30, r12
    21ec:	f7 fc       	sbrc	r15, 7
    21ee:	85 91       	lpm	r24, Z+
    21f0:	f7 fe       	sbrs	r15, 7
    21f2:	81 91       	ld	r24, Z+
    21f4:	6f 01       	movw	r12, r30
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	b3 01       	movw	r22, r6
    21fa:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    21fe:	e1 10       	cpse	r14, r1
    2200:	ea 94       	dec	r14
    2202:	01 50       	subi	r16, 0x01	; 1
    2204:	10 40       	sbci	r17, 0x00	; 0
    2206:	01 15       	cp	r16, r1
    2208:	11 05       	cpc	r17, r1
    220a:	79 f7       	brne	.-34     	; 0x21ea <vfprintf+0x1d4>
    220c:	ea c0       	rjmp	.+468    	; 0x23e2 <vfprintf+0x3cc>
    220e:	94 36       	cpi	r25, 0x64	; 100
    2210:	11 f0       	breq	.+4      	; 0x2216 <vfprintf+0x200>
    2212:	99 36       	cpi	r25, 0x69	; 105
    2214:	69 f5       	brne	.+90     	; 0x2270 <vfprintf+0x25a>
    2216:	f7 fe       	sbrs	r15, 7
    2218:	08 c0       	rjmp	.+16     	; 0x222a <vfprintf+0x214>
    221a:	f5 01       	movw	r30, r10
    221c:	20 81       	ld	r18, Z
    221e:	31 81       	ldd	r19, Z+1	; 0x01
    2220:	42 81       	ldd	r20, Z+2	; 0x02
    2222:	53 81       	ldd	r21, Z+3	; 0x03
    2224:	84 e0       	ldi	r24, 0x04	; 4
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0a c0       	rjmp	.+20     	; 0x223e <vfprintf+0x228>
    222a:	f5 01       	movw	r30, r10
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	9c 01       	movw	r18, r24
    2232:	44 27       	eor	r20, r20
    2234:	37 fd       	sbrc	r19, 7
    2236:	40 95       	com	r20
    2238:	54 2f       	mov	r21, r20
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a8 0e       	add	r10, r24
    2240:	b9 1e       	adc	r11, r25
    2242:	9f e6       	ldi	r25, 0x6F	; 111
    2244:	f9 22       	and	r15, r25
    2246:	57 ff       	sbrs	r21, 7
    2248:	09 c0       	rjmp	.+18     	; 0x225c <vfprintf+0x246>
    224a:	50 95       	com	r21
    224c:	40 95       	com	r20
    224e:	30 95       	com	r19
    2250:	21 95       	neg	r18
    2252:	3f 4f       	sbci	r19, 0xFF	; 255
    2254:	4f 4f       	sbci	r20, 0xFF	; 255
    2256:	5f 4f       	sbci	r21, 0xFF	; 255
    2258:	e0 e8       	ldi	r30, 0x80	; 128
    225a:	fe 2a       	or	r15, r30
    225c:	ca 01       	movw	r24, r20
    225e:	b9 01       	movw	r22, r18
    2260:	a1 01       	movw	r20, r2
    2262:	2a e0       	ldi	r18, 0x0A	; 10
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__ultoa_invert>
    226a:	d8 2e       	mov	r13, r24
    226c:	d2 18       	sub	r13, r2
    226e:	40 c0       	rjmp	.+128    	; 0x22f0 <vfprintf+0x2da>
    2270:	95 37       	cpi	r25, 0x75	; 117
    2272:	29 f4       	brne	.+10     	; 0x227e <vfprintf+0x268>
    2274:	1f 2d       	mov	r17, r15
    2276:	1f 7e       	andi	r17, 0xEF	; 239
    2278:	2a e0       	ldi	r18, 0x0A	; 10
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	1d c0       	rjmp	.+58     	; 0x22b8 <vfprintf+0x2a2>
    227e:	1f 2d       	mov	r17, r15
    2280:	19 7f       	andi	r17, 0xF9	; 249
    2282:	9f 36       	cpi	r25, 0x6F	; 111
    2284:	61 f0       	breq	.+24     	; 0x229e <vfprintf+0x288>
    2286:	90 37       	cpi	r25, 0x70	; 112
    2288:	20 f4       	brcc	.+8      	; 0x2292 <vfprintf+0x27c>
    228a:	98 35       	cpi	r25, 0x58	; 88
    228c:	09 f0       	breq	.+2      	; 0x2290 <vfprintf+0x27a>
    228e:	ac c0       	rjmp	.+344    	; 0x23e8 <vfprintf+0x3d2>
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <vfprintf+0x29a>
    2292:	90 37       	cpi	r25, 0x70	; 112
    2294:	39 f0       	breq	.+14     	; 0x22a4 <vfprintf+0x28e>
    2296:	98 37       	cpi	r25, 0x78	; 120
    2298:	09 f0       	breq	.+2      	; 0x229c <vfprintf+0x286>
    229a:	a6 c0       	rjmp	.+332    	; 0x23e8 <vfprintf+0x3d2>
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <vfprintf+0x290>
    229e:	28 e0       	ldi	r18, 0x08	; 8
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	0a c0       	rjmp	.+20     	; 0x22b8 <vfprintf+0x2a2>
    22a4:	10 61       	ori	r17, 0x10	; 16
    22a6:	14 fd       	sbrc	r17, 4
    22a8:	14 60       	ori	r17, 0x04	; 4
    22aa:	20 e1       	ldi	r18, 0x10	; 16
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	04 c0       	rjmp	.+8      	; 0x22b8 <vfprintf+0x2a2>
    22b0:	14 fd       	sbrc	r17, 4
    22b2:	16 60       	ori	r17, 0x06	; 6
    22b4:	20 e1       	ldi	r18, 0x10	; 16
    22b6:	32 e0       	ldi	r19, 0x02	; 2
    22b8:	17 ff       	sbrs	r17, 7
    22ba:	08 c0       	rjmp	.+16     	; 0x22cc <vfprintf+0x2b6>
    22bc:	f5 01       	movw	r30, r10
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	44 e0       	ldi	r20, 0x04	; 4
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	08 c0       	rjmp	.+16     	; 0x22dc <vfprintf+0x2c6>
    22cc:	f5 01       	movw	r30, r10
    22ce:	80 81       	ld	r24, Z
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    22d2:	bc 01       	movw	r22, r24
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	42 e0       	ldi	r20, 0x02	; 2
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	a4 0e       	add	r10, r20
    22de:	b5 1e       	adc	r11, r21
    22e0:	a1 01       	movw	r20, r2
    22e2:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__ultoa_invert>
    22e6:	d8 2e       	mov	r13, r24
    22e8:	d2 18       	sub	r13, r2
    22ea:	8f e7       	ldi	r24, 0x7F	; 127
    22ec:	f8 2e       	mov	r15, r24
    22ee:	f1 22       	and	r15, r17
    22f0:	f6 fe       	sbrs	r15, 6
    22f2:	0b c0       	rjmp	.+22     	; 0x230a <vfprintf+0x2f4>
    22f4:	5e ef       	ldi	r21, 0xFE	; 254
    22f6:	f5 22       	and	r15, r21
    22f8:	d9 14       	cp	r13, r9
    22fa:	38 f4       	brcc	.+14     	; 0x230a <vfprintf+0x2f4>
    22fc:	f4 fe       	sbrs	r15, 4
    22fe:	07 c0       	rjmp	.+14     	; 0x230e <vfprintf+0x2f8>
    2300:	f2 fc       	sbrc	r15, 2
    2302:	05 c0       	rjmp	.+10     	; 0x230e <vfprintf+0x2f8>
    2304:	8f ee       	ldi	r24, 0xEF	; 239
    2306:	f8 22       	and	r15, r24
    2308:	02 c0       	rjmp	.+4      	; 0x230e <vfprintf+0x2f8>
    230a:	1d 2d       	mov	r17, r13
    230c:	01 c0       	rjmp	.+2      	; 0x2310 <vfprintf+0x2fa>
    230e:	19 2d       	mov	r17, r9
    2310:	f4 fe       	sbrs	r15, 4
    2312:	0d c0       	rjmp	.+26     	; 0x232e <vfprintf+0x318>
    2314:	fe 01       	movw	r30, r28
    2316:	ed 0d       	add	r30, r13
    2318:	f1 1d       	adc	r31, r1
    231a:	80 81       	ld	r24, Z
    231c:	80 33       	cpi	r24, 0x30	; 48
    231e:	19 f4       	brne	.+6      	; 0x2326 <vfprintf+0x310>
    2320:	99 ee       	ldi	r25, 0xE9	; 233
    2322:	f9 22       	and	r15, r25
    2324:	08 c0       	rjmp	.+16     	; 0x2336 <vfprintf+0x320>
    2326:	1f 5f       	subi	r17, 0xFF	; 255
    2328:	f2 fe       	sbrs	r15, 2
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <vfprintf+0x320>
    232c:	03 c0       	rjmp	.+6      	; 0x2334 <vfprintf+0x31e>
    232e:	8f 2d       	mov	r24, r15
    2330:	86 78       	andi	r24, 0x86	; 134
    2332:	09 f0       	breq	.+2      	; 0x2336 <vfprintf+0x320>
    2334:	1f 5f       	subi	r17, 0xFF	; 255
    2336:	0f 2d       	mov	r16, r15
    2338:	f3 fc       	sbrc	r15, 3
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <vfprintf+0x34e>
    233c:	f0 fe       	sbrs	r15, 0
    233e:	0f c0       	rjmp	.+30     	; 0x235e <vfprintf+0x348>
    2340:	1e 15       	cp	r17, r14
    2342:	10 f0       	brcs	.+4      	; 0x2348 <vfprintf+0x332>
    2344:	9d 2c       	mov	r9, r13
    2346:	0b c0       	rjmp	.+22     	; 0x235e <vfprintf+0x348>
    2348:	9d 2c       	mov	r9, r13
    234a:	9e 0c       	add	r9, r14
    234c:	91 1a       	sub	r9, r17
    234e:	1e 2d       	mov	r17, r14
    2350:	06 c0       	rjmp	.+12     	; 0x235e <vfprintf+0x348>
    2352:	80 e2       	ldi	r24, 0x20	; 32
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	b3 01       	movw	r22, r6
    2358:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    235c:	1f 5f       	subi	r17, 0xFF	; 255
    235e:	1e 15       	cp	r17, r14
    2360:	c0 f3       	brcs	.-16     	; 0x2352 <vfprintf+0x33c>
    2362:	04 c0       	rjmp	.+8      	; 0x236c <vfprintf+0x356>
    2364:	1e 15       	cp	r17, r14
    2366:	10 f4       	brcc	.+4      	; 0x236c <vfprintf+0x356>
    2368:	e1 1a       	sub	r14, r17
    236a:	01 c0       	rjmp	.+2      	; 0x236e <vfprintf+0x358>
    236c:	ee 24       	eor	r14, r14
    236e:	04 ff       	sbrs	r16, 4
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <vfprintf+0x37a>
    2372:	80 e3       	ldi	r24, 0x30	; 48
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	b3 01       	movw	r22, r6
    2378:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    237c:	02 ff       	sbrs	r16, 2
    237e:	1d c0       	rjmp	.+58     	; 0x23ba <vfprintf+0x3a4>
    2380:	01 fd       	sbrc	r16, 1
    2382:	03 c0       	rjmp	.+6      	; 0x238a <vfprintf+0x374>
    2384:	88 e7       	ldi	r24, 0x78	; 120
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e c0       	rjmp	.+28     	; 0x23a6 <vfprintf+0x390>
    238a:	88 e5       	ldi	r24, 0x58	; 88
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0b c0       	rjmp	.+22     	; 0x23a6 <vfprintf+0x390>
    2390:	80 2f       	mov	r24, r16
    2392:	86 78       	andi	r24, 0x86	; 134
    2394:	91 f0       	breq	.+36     	; 0x23ba <vfprintf+0x3a4>
    2396:	01 ff       	sbrs	r16, 1
    2398:	02 c0       	rjmp	.+4      	; 0x239e <vfprintf+0x388>
    239a:	8b e2       	ldi	r24, 0x2B	; 43
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <vfprintf+0x38a>
    239e:	80 e2       	ldi	r24, 0x20	; 32
    23a0:	f7 fc       	sbrc	r15, 7
    23a2:	8d e2       	ldi	r24, 0x2D	; 45
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	b3 01       	movw	r22, r6
    23a8:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <vfprintf+0x3a4>
    23ae:	80 e3       	ldi	r24, 0x30	; 48
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	b3 01       	movw	r22, r6
    23b4:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    23b8:	9a 94       	dec	r9
    23ba:	d9 14       	cp	r13, r9
    23bc:	c0 f3       	brcs	.-16     	; 0x23ae <vfprintf+0x398>
    23be:	da 94       	dec	r13
    23c0:	f1 01       	movw	r30, r2
    23c2:	ed 0d       	add	r30, r13
    23c4:	f1 1d       	adc	r31, r1
    23c6:	80 81       	ld	r24, Z
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	b3 01       	movw	r22, r6
    23cc:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    23d0:	dd 20       	and	r13, r13
    23d2:	a9 f7       	brne	.-22     	; 0x23be <vfprintf+0x3a8>
    23d4:	06 c0       	rjmp	.+12     	; 0x23e2 <vfprintf+0x3cc>
    23d6:	80 e2       	ldi	r24, 0x20	; 32
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	b3 01       	movw	r22, r6
    23dc:	0e 94 27 12 	call	0x244e	; 0x244e <fputc>
    23e0:	ea 94       	dec	r14
    23e2:	ee 20       	and	r14, r14
    23e4:	c1 f7       	brne	.-16     	; 0x23d6 <vfprintf+0x3c0>
    23e6:	43 ce       	rjmp	.-890    	; 0x206e <vfprintf+0x58>
    23e8:	f3 01       	movw	r30, r6
    23ea:	66 81       	ldd	r22, Z+6	; 0x06
    23ec:	77 81       	ldd	r23, Z+7	; 0x07
    23ee:	cb 01       	movw	r24, r22
    23f0:	2b 96       	adiw	r28, 0x0b	; 11
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	bf 90       	pop	r11
    240e:	af 90       	pop	r10
    2410:	9f 90       	pop	r9
    2412:	8f 90       	pop	r8
    2414:	7f 90       	pop	r7
    2416:	6f 90       	pop	r6
    2418:	5f 90       	pop	r5
    241a:	4f 90       	pop	r4
    241c:	3f 90       	pop	r3
    241e:	2f 90       	pop	r2
    2420:	08 95       	ret

00002422 <strnlen_P>:
    2422:	fc 01       	movw	r30, r24
    2424:	05 90       	lpm	r0, Z+
    2426:	61 50       	subi	r22, 0x01	; 1
    2428:	70 40       	sbci	r23, 0x00	; 0
    242a:	01 10       	cpse	r0, r1
    242c:	d8 f7       	brcc	.-10     	; 0x2424 <strnlen_P+0x2>
    242e:	80 95       	com	r24
    2430:	90 95       	com	r25
    2432:	8e 0f       	add	r24, r30
    2434:	9f 1f       	adc	r25, r31
    2436:	08 95       	ret

00002438 <strnlen>:
    2438:	fc 01       	movw	r30, r24
    243a:	61 50       	subi	r22, 0x01	; 1
    243c:	70 40       	sbci	r23, 0x00	; 0
    243e:	01 90       	ld	r0, Z+
    2440:	01 10       	cpse	r0, r1
    2442:	d8 f7       	brcc	.-10     	; 0x243a <strnlen+0x2>
    2444:	80 95       	com	r24
    2446:	90 95       	com	r25
    2448:	8e 0f       	add	r24, r30
    244a:	9f 1f       	adc	r25, r31
    244c:	08 95       	ret

0000244e <fputc>:
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	8c 01       	movw	r16, r24
    2458:	eb 01       	movw	r28, r22
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	81 ff       	sbrs	r24, 1
    245e:	1b c0       	rjmp	.+54     	; 0x2496 <fputc+0x48>
    2460:	82 ff       	sbrs	r24, 2
    2462:	0d c0       	rjmp	.+26     	; 0x247e <fputc+0x30>
    2464:	2e 81       	ldd	r18, Y+6	; 0x06
    2466:	3f 81       	ldd	r19, Y+7	; 0x07
    2468:	8c 81       	ldd	r24, Y+4	; 0x04
    246a:	9d 81       	ldd	r25, Y+5	; 0x05
    246c:	28 17       	cp	r18, r24
    246e:	39 07       	cpc	r19, r25
    2470:	64 f4       	brge	.+24     	; 0x248a <fputc+0x3c>
    2472:	e8 81       	ld	r30, Y
    2474:	f9 81       	ldd	r31, Y+1	; 0x01
    2476:	01 93       	st	Z+, r16
    2478:	f9 83       	std	Y+1, r31	; 0x01
    247a:	e8 83       	st	Y, r30
    247c:	06 c0       	rjmp	.+12     	; 0x248a <fputc+0x3c>
    247e:	e8 85       	ldd	r30, Y+8	; 0x08
    2480:	f9 85       	ldd	r31, Y+9	; 0x09
    2482:	80 2f       	mov	r24, r16
    2484:	09 95       	icall
    2486:	89 2b       	or	r24, r25
    2488:	31 f4       	brne	.+12     	; 0x2496 <fputc+0x48>
    248a:	8e 81       	ldd	r24, Y+6	; 0x06
    248c:	9f 81       	ldd	r25, Y+7	; 0x07
    248e:	01 96       	adiw	r24, 0x01	; 1
    2490:	9f 83       	std	Y+7, r25	; 0x07
    2492:	8e 83       	std	Y+6, r24	; 0x06
    2494:	02 c0       	rjmp	.+4      	; 0x249a <fputc+0x4c>
    2496:	0f ef       	ldi	r16, 0xFF	; 255
    2498:	1f ef       	ldi	r17, 0xFF	; 255
    249a:	c8 01       	movw	r24, r16
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	08 95       	ret

000024a6 <__ultoa_invert>:
    24a6:	fa 01       	movw	r30, r20
    24a8:	aa 27       	eor	r26, r26
    24aa:	28 30       	cpi	r18, 0x08	; 8
    24ac:	51 f1       	breq	.+84     	; 0x2502 <__ultoa_invert+0x5c>
    24ae:	20 31       	cpi	r18, 0x10	; 16
    24b0:	81 f1       	breq	.+96     	; 0x2512 <__ultoa_invert+0x6c>
    24b2:	e8 94       	clt
    24b4:	6f 93       	push	r22
    24b6:	6e 7f       	andi	r22, 0xFE	; 254
    24b8:	6e 5f       	subi	r22, 0xFE	; 254
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255
    24bc:	8f 4f       	sbci	r24, 0xFF	; 255
    24be:	9f 4f       	sbci	r25, 0xFF	; 255
    24c0:	af 4f       	sbci	r26, 0xFF	; 255
    24c2:	b1 e0       	ldi	r27, 0x01	; 1
    24c4:	3e d0       	rcall	.+124    	; 0x2542 <__ultoa_invert+0x9c>
    24c6:	b4 e0       	ldi	r27, 0x04	; 4
    24c8:	3c d0       	rcall	.+120    	; 0x2542 <__ultoa_invert+0x9c>
    24ca:	67 0f       	add	r22, r23
    24cc:	78 1f       	adc	r23, r24
    24ce:	89 1f       	adc	r24, r25
    24d0:	9a 1f       	adc	r25, r26
    24d2:	a1 1d       	adc	r26, r1
    24d4:	68 0f       	add	r22, r24
    24d6:	79 1f       	adc	r23, r25
    24d8:	8a 1f       	adc	r24, r26
    24da:	91 1d       	adc	r25, r1
    24dc:	a1 1d       	adc	r26, r1
    24de:	6a 0f       	add	r22, r26
    24e0:	71 1d       	adc	r23, r1
    24e2:	81 1d       	adc	r24, r1
    24e4:	91 1d       	adc	r25, r1
    24e6:	a1 1d       	adc	r26, r1
    24e8:	20 d0       	rcall	.+64     	; 0x252a <__ultoa_invert+0x84>
    24ea:	09 f4       	brne	.+2      	; 0x24ee <__ultoa_invert+0x48>
    24ec:	68 94       	set
    24ee:	3f 91       	pop	r19
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	26 9f       	mul	r18, r22
    24f4:	11 24       	eor	r1, r1
    24f6:	30 19       	sub	r19, r0
    24f8:	30 5d       	subi	r19, 0xD0	; 208
    24fa:	31 93       	st	Z+, r19
    24fc:	de f6       	brtc	.-74     	; 0x24b4 <__ultoa_invert+0xe>
    24fe:	cf 01       	movw	r24, r30
    2500:	08 95       	ret
    2502:	46 2f       	mov	r20, r22
    2504:	47 70       	andi	r20, 0x07	; 7
    2506:	40 5d       	subi	r20, 0xD0	; 208
    2508:	41 93       	st	Z+, r20
    250a:	b3 e0       	ldi	r27, 0x03	; 3
    250c:	0f d0       	rcall	.+30     	; 0x252c <__ultoa_invert+0x86>
    250e:	c9 f7       	brne	.-14     	; 0x2502 <__ultoa_invert+0x5c>
    2510:	f6 cf       	rjmp	.-20     	; 0x24fe <__ultoa_invert+0x58>
    2512:	46 2f       	mov	r20, r22
    2514:	4f 70       	andi	r20, 0x0F	; 15
    2516:	40 5d       	subi	r20, 0xD0	; 208
    2518:	4a 33       	cpi	r20, 0x3A	; 58
    251a:	18 f0       	brcs	.+6      	; 0x2522 <__ultoa_invert+0x7c>
    251c:	49 5d       	subi	r20, 0xD9	; 217
    251e:	31 fd       	sbrc	r19, 1
    2520:	40 52       	subi	r20, 0x20	; 32
    2522:	41 93       	st	Z+, r20
    2524:	02 d0       	rcall	.+4      	; 0x252a <__ultoa_invert+0x84>
    2526:	a9 f7       	brne	.-22     	; 0x2512 <__ultoa_invert+0x6c>
    2528:	ea cf       	rjmp	.-44     	; 0x24fe <__ultoa_invert+0x58>
    252a:	b4 e0       	ldi	r27, 0x04	; 4
    252c:	a6 95       	lsr	r26
    252e:	97 95       	ror	r25
    2530:	87 95       	ror	r24
    2532:	77 95       	ror	r23
    2534:	67 95       	ror	r22
    2536:	ba 95       	dec	r27
    2538:	c9 f7       	brne	.-14     	; 0x252c <__ultoa_invert+0x86>
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	61 05       	cpc	r22, r1
    253e:	71 05       	cpc	r23, r1
    2540:	08 95       	ret
    2542:	9b 01       	movw	r18, r22
    2544:	ac 01       	movw	r20, r24
    2546:	0a 2e       	mov	r0, r26
    2548:	06 94       	lsr	r0
    254a:	57 95       	ror	r21
    254c:	47 95       	ror	r20
    254e:	37 95       	ror	r19
    2550:	27 95       	ror	r18
    2552:	ba 95       	dec	r27
    2554:	c9 f7       	brne	.-14     	; 0x2548 <__ultoa_invert+0xa2>
    2556:	62 0f       	add	r22, r18
    2558:	73 1f       	adc	r23, r19
    255a:	84 1f       	adc	r24, r20
    255c:	95 1f       	adc	r25, r21
    255e:	a0 1d       	adc	r26, r0
    2560:	08 95       	ret

00002562 <_exit>:
    2562:	f8 94       	cli

00002564 <__stop_program>:
    2564:	ff cf       	rjmp	.-2      	; 0x2564 <__stop_program>
