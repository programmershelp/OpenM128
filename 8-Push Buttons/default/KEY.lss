
KEY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000089  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000054  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ca  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008a  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e5       	ldi	r30, 0x5A	; 90
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  b6:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <key_scanf>:
#define POR_IN PORTC &=~0xff
#define PIN_IN PINC

void key_scanf()
{
	PIN_IN &=0xff;
  be:	83 b3       	in	r24, 0x13	; 19
  c0:	83 bb       	out	0x13, r24	; 19
	switch((PIN_IN&0xff))
  c2:	83 b3       	in	r24, 0x13	; 19
  c4:	8f 3e       	cpi	r24, 0xEF	; 239
  c6:	41 f1       	breq	.+80     	; 0x118 <key_scanf+0x5a>
  c8:	80 3f       	cpi	r24, 0xF0	; 240
  ca:	38 f4       	brcc	.+14     	; 0xda <key_scanf+0x1c>
  cc:	8f 3b       	cpi	r24, 0xBF	; 191
  ce:	71 f1       	breq	.+92     	; 0x12c <key_scanf+0x6e>
  d0:	8f 3d       	cpi	r24, 0xDF	; 223
  d2:	39 f1       	breq	.+78     	; 0x122 <key_scanf+0x64>
  d4:	8f 37       	cpi	r24, 0x7F	; 127
  d6:	a9 f5       	brne	.+106    	; 0x142 <key_scanf+0x84>
  d8:	2f c0       	rjmp	.+94     	; 0x138 <key_scanf+0x7a>
  da:	8b 3f       	cpi	r24, 0xFB	; 251
  dc:	99 f0       	breq	.+38     	; 0x104 <key_scanf+0x46>
  de:	8c 3f       	cpi	r24, 0xFC	; 252
  e0:	18 f4       	brcc	.+6      	; 0xe8 <key_scanf+0x2a>
  e2:	87 3f       	cpi	r24, 0xF7	; 247
  e4:	71 f5       	brne	.+92     	; 0x142 <key_scanf+0x84>
  e6:	13 c0       	rjmp	.+38     	; 0x10e <key_scanf+0x50>
  e8:	8d 3f       	cpi	r24, 0xFD	; 253
  ea:	39 f0       	breq	.+14     	; 0xfa <key_scanf+0x3c>
  ec:	8e 3f       	cpi	r24, 0xFE	; 254
  ee:	49 f5       	brne	.+82     	; 0x142 <key_scanf+0x84>
	{
		case 0xfe: while((PIN_IN&0xff)==0xfe);PORTA =0x01;break;
  f0:	83 b3       	in	r24, 0x13	; 19
  f2:	8e 3f       	cpi	r24, 0xFE	; 254
  f4:	e9 f3       	breq	.-6      	; 0xf0 <key_scanf+0x32>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	1d c0       	rjmp	.+58     	; 0x134 <key_scanf+0x76>
		case 0xfd: while((PIN_IN&0xff)==0xfd);PORTA =0x02;break;
  fa:	83 b3       	in	r24, 0x13	; 19
  fc:	8d 3f       	cpi	r24, 0xFD	; 253
  fe:	e9 f3       	breq	.-6      	; 0xfa <key_scanf+0x3c>
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	18 c0       	rjmp	.+48     	; 0x134 <key_scanf+0x76>
		case 0xfb: while((PIN_IN&0xff)==0xfb);PORTA =0x04;break;
 104:	83 b3       	in	r24, 0x13	; 19
 106:	8b 3f       	cpi	r24, 0xFB	; 251
 108:	e9 f3       	breq	.-6      	; 0x104 <key_scanf+0x46>
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	13 c0       	rjmp	.+38     	; 0x134 <key_scanf+0x76>
		case 0xf7: while((PIN_IN&0xff)==0xf7);PORTA =0x08;break;
 10e:	83 b3       	in	r24, 0x13	; 19
 110:	87 3f       	cpi	r24, 0xF7	; 247
 112:	e9 f3       	breq	.-6      	; 0x10e <key_scanf+0x50>
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	0e c0       	rjmp	.+28     	; 0x134 <key_scanf+0x76>
		case 0xef: while((PIN_IN&0xff)==0xef);PORTA =0x10;break;
 118:	83 b3       	in	r24, 0x13	; 19
 11a:	8f 3e       	cpi	r24, 0xEF	; 239
 11c:	e9 f3       	breq	.-6      	; 0x118 <key_scanf+0x5a>
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	09 c0       	rjmp	.+18     	; 0x134 <key_scanf+0x76>
		case 0xdf: while((PIN_IN&0xff)==0xdf);PORTA =0x20;break;
 122:	83 b3       	in	r24, 0x13	; 19
 124:	8f 3d       	cpi	r24, 0xDF	; 223
 126:	e9 f3       	breq	.-6      	; 0x122 <key_scanf+0x64>
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	04 c0       	rjmp	.+8      	; 0x134 <key_scanf+0x76>
		case 0xbf: while((PIN_IN&0xff)==0xbf);PORTA =0x40;break;
 12c:	83 b3       	in	r24, 0x13	; 19
 12e:	8f 3b       	cpi	r24, 0xBF	; 191
 130:	e9 f3       	breq	.-6      	; 0x12c <key_scanf+0x6e>
 132:	80 e4       	ldi	r24, 0x40	; 64
 134:	8b bb       	out	0x1b, r24	; 27
 136:	08 95       	ret
		case 0x7f: while((PIN_IN&0xff)==0x7f);PORTA =0x80;break;
 138:	83 b3       	in	r24, 0x13	; 19
 13a:	8f 37       	cpi	r24, 0x7F	; 127
 13c:	e9 f3       	breq	.-6      	; 0x138 <key_scanf+0x7a>
 13e:	80 e8       	ldi	r24, 0x80	; 128
 140:	8b bb       	out	0x1b, r24	; 27
 142:	08 95       	ret

00000144 <main>:
}
int main(void)
{


	DDRA = 0xff;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	8a bb       	out	0x1a, r24	; 26
	DD_IN;
 148:	94 b3       	in	r25, 0x14	; 20
 14a:	14 ba       	out	0x14, r1	; 20
	POR_OUT;
 14c:	95 b3       	in	r25, 0x15	; 21
 14e:	85 bb       	out	0x15, r24	; 21
	while(1)
	{
	      key_scanf();
 150:	0e 94 5f 00 	call	0xbe	; 0xbe <key_scanf>
 154:	fd cf       	rjmp	.-6      	; 0x150 <main+0xc>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
